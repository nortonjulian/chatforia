/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
/// <reference types="node" />
import { ApiResponse } from '../apiResponse';
import { FileWrapper } from '../fileWrapper';
import { RequestOptions } from '../http/requestBuilder';
import { BandwidthMessage } from '../models/bandwidthMessage';
import { BandwidthMessagesList } from '../models/bandwidthMessagesList';
import { Media } from '../models/media';
import { MessageRequest } from '../models/messageRequest';
import { BaseController } from './baseController';
export declare class ApiController extends BaseController {
    /**
     * listMedia
     *
     * @param accountId          User's account ID
     * @param continuationToken  Continuation token used to retrieve subsequent media.
     * @return Response from the API call
     */
    listMedia(accountId: string, continuationToken?: string, requestOptions?: RequestOptions): Promise<ApiResponse<Media[]>>;
    /**
     * getMedia
     *
     * @param accountId User's account ID
     * @param mediaId   Media ID to retrieve
     * @return Response from the API call
     */
    getMedia(accountId: string, mediaId: string, requestOptions?: RequestOptions): Promise<ApiResponse<NodeJS.ReadableStream | Blob>>;
    /**
     * uploadMedia
     *
     * @param accountId     User's account ID
     * @param mediaId       The user supplied custom media ID
     * @param body
     * @param contentType   The media type of the entity-body
     * @param cacheControl  General-header field is used to specify directives that MUST be obeyed by all
     *                                     caching mechanisms along the request/response chain.
     * @return Response from the API call
     */
    uploadMedia(accountId: string, mediaId: string, body: FileWrapper, contentType?: string, cacheControl?: string, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * deleteMedia
     *
     * @param accountId User's account ID
     * @param mediaId   The media ID to delete
     * @return Response from the API call
     */
    deleteMedia(accountId: string, mediaId: string, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * getMessages
     *
     * @param accountId     User's account ID
     * @param messageId     The ID of the message to search for. Special characters need to be encoded using
     *                                URL encoding
     * @param sourceTn      The phone number that sent the message
     * @param destinationTn The phone number that received the message
     * @param messageStatus The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED,
     *                                DELIVERED, ACCEPTED, UNDELIVERED
     * @param errorCode     The error code of the message
     * @param fromDateTime  The start of the date range to search in ISO 8601 format. Uses the message receive
     *                                time. The date range to search in is currently 14 days.
     * @param toDateTime    The end of the date range to search in ISO 8601 format. Uses the message receive
     *                                time. The date range to search in is currently 14 days.
     * @param pageToken     A base64 encoded value used for pagination of results
     * @param limit         The maximum records requested in search result. Default 100. The sum of limit and
     *                                after cannot be more than 10000
     * @return Response from the API call
     */
    getMessages(accountId: string, messageId?: string, sourceTn?: string, destinationTn?: string, messageStatus?: string, errorCode?: number, fromDateTime?: string, toDateTime?: string, pageToken?: string, limit?: number, requestOptions?: RequestOptions): Promise<ApiResponse<BandwidthMessagesList>>;
    /**
     * createMessage
     *
     * @param accountId User's account ID
     * @param body
     * @return Response from the API call
     */
    createMessage(accountId: string, body: MessageRequest, requestOptions?: RequestOptions): Promise<ApiResponse<BandwidthMessage>>;
}
