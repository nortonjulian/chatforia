{"version":3,"file":"messaging.esm.js","sources":["../src/http/httpInterceptor.ts","../src/authentication.ts","../src/configuration.ts","../src/defaultConfiguration.ts","../src/errors/apiError.ts","../src/apiHelper.ts","../src/errors/abortError.ts","../src/fileWrapper.ts","../src/http/httpHeaders.ts","../src/http/queryString.ts","../src/http/httpClient.ts","../src/http/pathTemplate.ts","../src/errors/argumentsValidationError.ts","../src/errors/responseValidationError.ts","../src/http/validate.ts","../src/http/xmlSerialization.ts","../src/http/requestBuilder.ts","../src/client.ts","../src/errors/messagingExceptionError.ts","../src/models/bandwidthMessage.ts","../src/models/bandwidthMessageItem.ts","../src/models/pageInfo.ts","../src/models/bandwidthMessagesList.ts","../src/models/media.ts","../src/models/priorityEnum.ts","../src/models/messageRequest.ts","../src/controllers/baseController.ts","../src/controllers/apiController.ts"],"sourcesContent":["/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { HttpContext } from './httpContext';\nimport { HttpRequest } from './httpRequest';\n\n/**\n * Interface for a method that executes an HTTP request and returns the HTTP context.\n *\n * The context contains the HTTP response and the HTTP request (which may or may not be the same\n * as the original HTTP request).\n */\nexport type HttpCallExecutor<T> = (\n  request: HttpRequest,\n  requestOptions: T\n) => Promise<HttpContext>;\n\n/**\n * Interface representing an HTTP interceptor method.\n *\n * HTTP interceptors are used to extend the HTTP call pipeline with new behavior or\n * features.\n *\n * An HTTP interceptor receives an HTTP request. It can modify the\n * HTTP request and then pass it along to the next HTTP interceptor in the chain which\n * then returns an HTTP response. It then returns this HTTP response, after optionally\n * modifying it.\n */\nexport interface HttpInterceptorInterface<T> {\n  (request: HttpRequest, requestOptions: T, next: HttpCallExecutor<T>): Promise<\n    HttpContext\n  >;\n}\n\n/**\n * Calls HTTP interceptor chain\n *\n * @param interceptors HTTP interceptor chain\n * @param client Terminating HTTP handler\n */\nexport function callHttpInterceptors<T>(\n  interceptors: HttpInterceptorInterface<T>[],\n  client: HttpCallExecutor<T>\n): HttpCallExecutor<T> {\n  let next = client;\n  for (let index = interceptors.length - 1; index >= 0; index--) {\n    const current = interceptors[index];\n    const last = next;\n    next = (request, options) => current(request, options, last);\n  }\n  return next;\n}\n\n/** Pass-through HTTP interceptor. */\nexport function passThroughInterceptor<T>(\n  request: HttpRequest,\n  requestOptions: T,\n  next: HttpCallExecutor<T>\n): Promise<HttpContext> {\n  return next(request, requestOptions);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { passThroughInterceptor } from './http/httpInterceptor';\nimport { AuthenticatorInterface } from './http/requestBuilder';\n\n/** None authentication provider */\nexport const noneAuthenticationProvider = () => passThroughInterceptor;\n\nexport const basicAuthAuthenticationProvider = ({\n  basicAuthUserName,\n  basicAuthPassword,\n}: {\n  basicAuthUserName: string;\n  basicAuthPassword: string;\n}): AuthenticatorInterface<boolean> => {\n  return (requiresAuth?: boolean) => {\n    if (!requiresAuth) {\n      return passThroughInterceptor;\n    }\n\n    return (request, options, next) => {\n      request.auth = {\n        username: basicAuthUserName,\n        password: basicAuthPassword,\n      };\n\n      return next(request, options);\n    };\n  };\n};\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/** An interface for all configuration parameters required by the SDK. */\nexport interface Configuration {\n  timeout: number;\n  environment: Environment;\n  baseUrl: string;\n  basicAuthUserName: string;\n  basicAuthPassword: string;\n  unstable_httpClientOptions?: any;\n}\n\n/** Environments available for API */\nexport enum Environment {\n  Production = 'production',\n  Custom = 'custom',\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { Configuration, Environment } from './configuration';\n\n/** Default values for the configuration parameters of the client. */\nexport const DEFAULT_CONFIGURATION: Configuration = {\n  timeout: 0,\n  environment: Environment.Production,\n  baseUrl: 'https://www.example.com',\n  basicAuthUserName: 'TODO access token',\n  basicAuthPassword: 'TODO access token',\n};\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport JSONBig from 'json-bigint';\nimport { HttpContext } from '../http/httpContext';\nimport { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\n\n/**\n * Thrown when the HTTP status code is not okay.\n *\n * The ApiError extends the ApiResponse interface, so all ApiResponse\n * properties are available.\n */\nexport class ApiError<T = {}> extends Error\n  implements ApiResponse<T | undefined> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: T | undefined;\n  public body: string | Blob | NodeJS.ReadableStream;\n\n  constructor(context: HttpContext, message: string) {\n    super(message);\n\n    const { request, response } = context;\n    this.request = request;\n    this.statusCode = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.body;\n\n    if (typeof response.body === 'string' && response.body !== '') {\n      const JSON = JSONBig({ useNativeBigInt: true });\n      try {\n        this.result = JSON.parse(response.body);\n      } catch (error) {\n        if (__DEV__) {\n          if (console) {\n            console.warn(\n              `Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport warning from 'tiny-warning';\n\n/**\n * Validates the protocol and removes duplicate forward slashes\n *\n * @param url URL to clean\n * @returns Sanitized URL\n */\nexport function sanitizeUrl(url: string): string {\n  // ensure that the urls are absolute\n  const protocolRegex = /^https?:\\/\\/[^/]+/;\n  const match = url.match(protocolRegex);\n  if (match === null) {\n    throw new Error(`Invalid URL format: ${url}`);\n  }\n\n  // remove redundant double-forward slashes\n  const protocol = match[0];\n  const queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n\n/**\n * Check whether value is an instance of Blob\n *\n * @remark\n * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js\n *\n * @param value Value to check\n * @returns True if the value is a Blob instance\n */\nexport function isBlob(value: unknown): value is Blob {\n  if (typeof Blob === 'undefined') {\n    return false;\n  }\n\n  return (\n    value instanceof Blob ||\n    Object.prototype.toString.call(value) === '[object Blob]'\n  );\n}\n\n// This is used by deprecated() to keep track of \"hits\".\nconst deprecatedHits: Record<string, boolean> = {};\n\n/**\n * Create warning for deprecated method usage.\n *\n * This is called once per deprecated method. If this method is called again\n * with the same arguments, no warning is generated.\n *\n * @param methodName Method name for deprecated method\n * @param notice Optional message for deprecation\n */\nexport function deprecated(methodName: string, notice?: string): void {\n  let message = `Method ${methodName} is deprecated.`;\n  if (notice) {\n    message += ` ${notice}`;\n  }\n  if (deprecatedHits[message]) {\n    return;\n  }\n  deprecatedHits[message] = true;\n  warning(false, message);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Thrown when the API call is aborted by the caller.\n *\n * Note that when an AbortError is thrown, it is not a guarantee that the API call\n * did not go through.\n */\nexport class AbortError extends Error {}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Wraps file with mime-type and filename to be sent as part of an HTTP request.\n */\nexport class FileWrapper {\n  constructor(\n    public file: Blob | import('stream').Readable,\n    public options?: FileWrapperOptions\n  ) {\n    this.file = file;\n  }\n}\n\n/** File upload options such as filename and mime-type */\ninterface FileWrapperOptions {\n  /** Mime-type to be sent with the file */\n  contentType?: string;\n  /** Name of the file to be used in the upload data */\n  filename?: string;\n  /** Headers to be used in the multipart request */\n  headers?: Record<string, string>;\n}\n\n/** Returns true if value is a FileWrapper */\nexport function isFileWrapper(value: unknown): value is FileWrapper {\n  return value instanceof FileWrapper;\n}\n\n/**\n * Returns a deep clone of the FileWrapper instance\n *\n * @param fileWrapper FileWrapper instance to copy\n */\nexport function cloneFileWrapper(fileWrapper: FileWrapper): FileWrapper {\n  let options: FileWrapperOptions | undefined;\n  if (fileWrapper.options) {\n    options = cloneFileWrapperOptions(fileWrapper.options);\n  }\n  return new FileWrapper(fileWrapper.file, options);\n}\n\nfunction cloneFileWrapperOptions(\n  fileWrapperOptions: FileWrapperOptions\n): FileWrapperOptions {\n  const clone = { ...fileWrapperOptions };\n  if (fileWrapperOptions.headers) {\n    clone.headers = { ...fileWrapperOptions.headers };\n  }\n  return clone;\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Set a header in the headers map.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\n export function setHeader(\n  headers: Record<string, string | number | boolean>,\n  name: string,\n  value?: string | number | boolean | undefined\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\n\nfunction setHeaderInternal(\n  headers: Record<string, string | number | boolean | undefined>,\n  realHeaderName: string | null,\n  name: string,\n  value: string | number | boolean | undefined\n): void {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n  if (value) {\n    headers[name] = value;\n  }\n}\n\n/**\n * Set a header in the headers map if it is not already set.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\nexport function setHeaderIfNotSet(\n  headers: Record<string, string | number | boolean>,\n  name: string,\n  value?: string | number | boolean | undefined\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n\n/**\n * Get header from a map of headers.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n */\nexport function getHeader(\n  headers: Record<string, string>,\n  name: string\n): string | null {\n  const prop = lookupCaseInsensitive(headers, name);\n  if (prop) {\n    return headers[prop];\n  }\n  return null;\n}\n\n/**\n * Looks up and returns the matching property name from the object.\n *\n * This method returns the matching property name in the object which might or might\n * not have the same case as the prop argument.\n *\n * @param obj Object with string property names\n * @param prop Property to lookup\n */\nexport function lookupCaseInsensitive(\n  obj: Record<string, unknown>,\n  prop: string\n): string | null {\n  prop = prop.toLowerCase();\n  for (const p in obj) {\n    if (\n      Object.prototype.hasOwnProperty.call(obj, p) &&\n      prop === p.toLowerCase()\n    ) {\n      return p;\n    }\n  }\n  return null;\n}\n\n/**\n * Merge headers\n *\n * Header names are compared using case-insensitive comparison. This method\n * preserves the original header name. If the headersToMerge overrides an existing\n * header, then the new header name (with its casing) is used.\n *\n * @param headers Headers to merge into\n * @param headersToMerge Headers to set\n */\nexport function mergeHeaders(\n  headers: Record<string, string | number | boolean>,\n  headersToMerge: Record<string, string | number | boolean>\n): void {\n  const headerKeys: Record<string, string> = {};\n\n  // Create a map of lower-cased-header-name to original-header-names\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    headerKeys[headerName.toLowerCase()] = headerName;\n  }\n\n  // Override headers with new values\n  for (const headerName of Object.getOwnPropertyNames(headersToMerge)) {\n    const lowerCasedName = headerName.toLowerCase();\n    if (headerKeys[lowerCasedName]) {\n      delete headers[headerKeys[lowerCasedName]];\n    }\n    headerKeys[lowerCasedName] = headerName;\n    headers[headerName] = headersToMerge[headerName];\n  }\n}\n\n/**\n * Assert headers object is valid\n */\nexport function assertHeaders(\n  headers: unknown\n): asserts headers is Record<string, string> {\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    if (!isValidHeaderName(headerName)) {\n      throw new Error(`\"${headerName}\" is not a valid header name.`);\n    }\n    const headerValue = (headers as Record<string, unknown>)[headerName];\n    if (typeof headerValue !== 'string') {\n      throw new TypeError(\n        `Header value must be string but ${typeof headerValue} provided.`\n      );\n    }\n  }\n}\n\n/**\n * Return true if header name is valid\n * @param headerName Header name\n */\nexport function isValidHeaderName(headerName: string): boolean {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\n\nexport const CONTENT_TYPE_HEADER = 'content-type';\nexport const ACCEPT_HEADER = 'accept';\nexport const CONTENT_LENGTH_HEADER = 'content-length';\nexport const AUTHORIZATION_HEADER = 'authorization';\nexport const FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nexport const JSON_CONTENT_TYPE = 'application/json';\nexport const TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nexport const XML_CONTENT_TYPE = 'application/xml';\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { FileWrapper, isFileWrapper, cloneFileWrapper } from '../fileWrapper';\n\n/**\n * Type for Key-value pair for form-urlencoded serialization\n */\nexport type FormKeyValuePair = { key: string; value: string | FileWrapper };\n\n/**\n * Type for list of key-value pairs for form-urlencoded serialization\n */\nexport type FormKeyValuePairList = FormKeyValuePair[];\n\n/**\n * Type for formatting function used to create key for nested arrays\n */\nexport type ArrayPrefixFunction = (\n  prefix: string,\n  key: number | string\n) => string;\n\n/**\n * Array prefix format: item[1]=1&item[2]=2\n */\nexport const indexedPrefix: ArrayPrefixFunction = (prefix, key) =>\n  `${prefix}[${key}]`;\n\n/**\n * Array prefix format: item[]=1&item[]=2\n */\nexport const unindexedPrefix: ArrayPrefixFunction = prefix => prefix + '[]';\n\n/**\n * Array prefix format: item=1&item=2\n */\nexport const plainPrefix: ArrayPrefixFunction = prefix => prefix;\n\n/**\n * Converts an object to a list of key-value pairs for form-urlencoded serialization.\n *\n * @param obj The object to serialize\n * @param prefixFormat Formatting function to create key for nested arrays\n * @return Result of serialization\n */\nexport function formDataEncodeObject(\n  obj: Record<string, unknown>,\n  prefixFormat: ArrayPrefixFunction = indexedPrefix\n): FormKeyValuePairList {\n  const result: FormKeyValuePairList = [];\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (value === null || value === undefined) {\n      continue;\n    } else if (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      typeof value === 'boolean' ||\n      typeof value === 'bigint'\n    ) {\n      result.push({ key, value: value.toString() });\n    } else if (isFileWrapper(value)) {\n      result.push({ key, value: cloneFileWrapper(value) });\n    } else if (Array.isArray(value)) {\n      for (let iter = 0; iter < value.length; iter += 1) {\n        result.push(\n          ...formDataEncodeObject({ [prefixFormat(key, iter)]: value[iter] })\n        );\n      }\n    } else if (typeof value === 'object') {\n      for (const objectKey in value) {\n        if (Object.prototype.hasOwnProperty.call(value, objectKey)) {\n          const element = value[objectKey as keyof typeof value];\n          result.push(\n            ...formDataEncodeObject({\n              [indexedPrefix(key, objectKey)]: element,\n            })\n          );\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Return a new list with all key-value pairs, which have a FileWrapper as value, removed\n *\n * @param params List of key-value pairs\n */\nexport function filterFileWrapperFromKeyValuePairs(\n  params: FormKeyValuePairList\n): { key: string; value: string }[] {\n  return params.filter(p => !isFileWrapper(p.value)) as any;\n}\n\n/**\n * Serializes an object for a form-urlencoded request.\n *\n * Nested and complex types in values will be flattened using {@link formDataEncodeObject() function} method.\n *\n * @param  obj The object to be serialized\n * @return The result of serialization\n */\nexport function urlEncodeObject(obj: Record<string, unknown>): string {\n  const params = formDataEncodeObject(obj);\n  return urlEncodeKeyValuePairs(params);\n}\n\n/**\n * Serializes a list of key-value pairs for a form-urlencoded request.\n *\n * @param params List of key-value pairs to serialize\n * @return The result of serialization\n */\nexport function urlEncodeKeyValuePairs(\n  params: FormKeyValuePairList | undefined\n): string {\n  const encode = encodeURIComponent;\n  return (params || [])\n    .map(p => `${encode(p.key)}=${encode(p.value.toString())}`)\n    .join('&');\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n import axios, { AxiosHeaders, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n import isNode from 'detect-node';\n import FormData from 'form-data';\n import { isBlob } from '../apiHelper';\n import { AbortError } from '../errors/abortError';\n import { isFileWrapper } from '../fileWrapper';\n import {\n   CONTENT_TYPE_HEADER,\n   FORM_URLENCODED_CONTENT_TYPE,\n   mergeHeaders,\n   setHeader,\n   setHeaderIfNotSet,\n } from './httpHeaders';\n import { HttpRequest } from './httpRequest';\n import { HttpResponse } from './httpResponse';\n import { urlEncodeKeyValuePairs } from './queryString';\n \n export const DEFAULT_AXIOS_CONFIG_OVERRIDES: AxiosRequestConfig = {\n   transformResponse: [],\n };\n \n export const DEFAULT_TIMEOUT = 30 * 1000;\n \n /**\n  * HTTP client implementation.\n  *\n  * This implementation is a wrapper over the Axios client.\n  */\n export class HttpClient {\n   private _axiosInstance: AxiosInstance;\n   private _timeout: number;\n \n   constructor({\n     clientConfigOverrides,\n     timeout = DEFAULT_TIMEOUT,\n   }: { clientConfigOverrides?: AxiosRequestConfig; timeout?: number } = {}) {\n     this._timeout = timeout;\n     this._axiosInstance = axios.create({\n       ...DEFAULT_AXIOS_CONFIG_OVERRIDES,\n       ...clientConfigOverrides,\n     });\n   }\n \n   /** Converts an HttpRequest object to an Axios request. */\n   public convertHttpRequest(req: HttpRequest): AxiosRequestConfig {\n     const newRequest: AxiosRequestConfig = {\n       method: req.method,\n       url: req.url,\n       responseType: 'text',\n       headers: { ...req.headers },\n     };\n \n     if (req.auth) {\n       // Set basic auth credentials if provided\n       newRequest.auth = {\n         username: req.auth.username,\n         password: req.auth.password || '',\n       };\n     }\n     \n     const requestBody = req.body;\n     if (requestBody?.type === 'text') {\n       newRequest.data = requestBody.content;\n     } else if (\n       requestBody?.type === 'form-data' &&\n       requestBody.content.some(item => isFileWrapper(item.value))\n     ) {\n       // Create multipart request if a file is present\n       const form = new FormData();\n       for (const iter of requestBody.content) {\n         if (isFileWrapper(iter.value)) {\n           let fileData = iter.value.file;\n \n           // Make sure Blob has the correct content type if provided\n           if (isBlob(fileData) && iter.value.options?.contentType) {\n             fileData = new Blob([fileData], {\n               type: iter.value.options.contentType,\n             });\n           }\n \n           form.append(iter.key, fileData, iter.value.options);\n         } else {\n           form.append(iter.key, iter.value);\n         }\n       }\n \n       newRequest.data = form;\n       mergeHeaders(newRequest.headers as AxiosHeaders || {} , form.getHeaders());\n     } else if (\n       requestBody?.type === 'form-data' ||\n       requestBody?.type === 'form'\n     ) {\n       // Create form-urlencoded request\n       setHeader(\n         newRequest.headers as AxiosHeaders || {},\n         CONTENT_TYPE_HEADER,\n         FORM_URLENCODED_CONTENT_TYPE\n       );\n       newRequest.data = urlEncodeKeyValuePairs(requestBody.content);\n     } else if (requestBody?.type === 'stream') {\n       let contentType = 'application/octet-stream';\n       if (isBlob(requestBody.content.file) && requestBody.content.file.type) {\n         // Set Blob mime type as the content-type header if present\n         contentType = requestBody.content.file.type;\n       } else if (requestBody.content.options?.contentType) {\n         // Otherwise, use the content type if available.\n         contentType = requestBody.content.options.contentType;\n       }\n       setHeaderIfNotSet(newRequest.headers as AxiosHeaders || {}, CONTENT_TYPE_HEADER, contentType);\n       newRequest.data = requestBody.content.file;\n     } \n     else if (requestBody && typeof(requestBody['type']) !== 'undefined') {\n \n       throw new Error(\n         `HTTP client encountered unknown body type '${requestBody[\"type\"]}'. Could not execute HTTP request.`\n       );\n     }\n \n     if (req.responseType === 'stream') {\n       newRequest.responseType = isNode ? 'stream' : 'blob';\n     }\n \n     // Prevent superagent from converting any status code to error\n     newRequest.validateStatus = () => true;\n \n     // Set 30 seconds timeout\n     newRequest.timeout = this._timeout;\n \n     return newRequest;\n   }\n \n   /** Converts an Axios response to an HttpResponse object. */\n   public convertHttpResponse(resp: AxiosResponse): HttpResponse {\n     return {\n       body: resp.data,\n       headers: resp.headers as AxiosHeaders,\n       statusCode: resp.status,\n     };\n   }\n \n   /**\n    * Executes the HttpRequest with the given options and returns the HttpResponse\n    * or throws an error.\n    */\n   public async executeRequest(\n     request: HttpRequest,\n     requestOptions?: { abortSignal?: AbortSignal }\n   ): Promise<HttpResponse> {\n     const axiosRequest = this.convertHttpRequest(request);\n \n     if (requestOptions?.abortSignal) {\n       // throw if already aborted; do not place HTTP call\n       if (requestOptions.abortSignal.aborted) {\n         throw this.abortError();\n       }\n \n       const cancelToken = axios.CancelToken.source();\n       axiosRequest.cancelToken = cancelToken.token;\n \n       // attach abort event handler\n       requestOptions.abortSignal.addEventListener('abort', () => {\n         cancelToken.cancel();\n       });\n     }\n \n     try {\n       return this.convertHttpResponse(await this._axiosInstance(axiosRequest));\n     } catch (error) {\n       // abort error should be thrown as the AbortError\n       if (axios.isCancel(error)) {\n         throw this.abortError();\n       }\n \n       throw error;\n     }\n   }\n \n   private abortError() {\n     return new AbortError('The HTTP call was aborted.');\n   }\n }\n \n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport flatMap from 'lodash.flatmap';\n\n/** Marker for skipping URL-encoding when used with Path templating */\nexport class SkipEncode<T extends PathTemplatePrimitiveTypes> {\n  constructor(public value: T) {}\n}\n\nexport type PathTemplatePrimitiveTypes = string | string[] | number | number[];\n\n/** Path template argument type */\nexport type PathTemplateTypes =\n  | PathTemplatePrimitiveTypes\n  | SkipEncode<PathTemplatePrimitiveTypes>;\n\n/**\n * URL path templating method.\n *\n * Template arguments of array type are imploded using the path separator and\n * individual elements are URL-encoded.\n *\n * Template arguments are URL-encoded unless wrapped in a SkipEncode instance.\n */\nexport function pathTemplate(\n  strings: TemplateStringsArray,\n  ...args: PathTemplateTypes[]\n) {\n  const values = flatMap(\n    interweaveArrays(\n      strings.map(s => new SkipEncode(s)),\n      args\n    ),\n    encodePathTemplateSegment\n  );\n  const pathSegment = values.join('');\n  return pathSegment;\n}\n\nfunction encodePathTemplateSegment(value: PathTemplateTypes) {\n  let skipEncode = false;\n  const encode = (m: string | number) =>\n    skipEncode ? m.toString() : encodeURIComponent(m);\n  if (value instanceof SkipEncode) {\n    value = value.value;\n    skipEncode = true;\n  }\n  return Array.isArray(value)\n    ? (value as Array<string | number>).map<string | number>(encode).join('/')\n    : [encode(value)];\n}\n\nfunction interweaveArrays<A, B>(\n  a: ReadonlyArray<A>,\n  b: ReadonlyArray<B>\n): Array<A | B> {\n  const min = Math.min(a.length, b.length);\n  return Array.apply(null, new Array(min))\n    .reduce((result: Array<A | B>, _, index) => {\n      result.push(a[index], b[index]);\n      return result;\n    }, [])\n    .concat((a.length > min ? a : b).slice(min));\n}\n","import { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when one or more arguments passed to a method fail validation.\n */\nexport class ArgumentsValidationError extends Error {\n  public readonly errors: Record<string, SchemaValidationError[]>;\n  constructor(errors: Record<string, SchemaValidationError[]>) {\n    const errorKeys = Object.keys(errors);\n\n    let message: string;\n    if (errorKeys.length === 0) {\n      message = 'One or more arguments failed validation.';\n    } else if (errorKeys.length === 1 && errors[errorKeys[0]].length === 1) {\n      message = `Argument for '${errorKeys[0]}' failed validation.\\n\\n${\n        errors[errorKeys[0]][0].message\n      }`;\n    } else {\n      message = `The following arguments failed validation: ${errorKeys.join(\n        ', '\n      )}.\\n\\n`;\n\n      const msgList: string[] = [];\n      for (const param of errorKeys) {\n        msgList.push(`> For argument '${param}':`);\n        if (errors[param].length === 1) {\n          msgList.push(errors[param][0].message!);\n        } else {\n          for (let index = 0; index < errors[param].length; index++) {\n            const error = errors[param][index];\n            msgList.push(`>> Issue #${index + 1}\\n\\n${error.message}`);\n          }\n        }\n      }\n\n      message += msgList.join('\\n\\n');\n    }\n\n    super(message);\n    this.errors = errors;\n  }\n}\n","import { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\nimport { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when the API response does not match the schema.\n */\nexport class ResponseValidationError extends Error\n  implements ApiResponse<never> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: never;\n  public body: string | Blob | NodeJS.ReadableStream;\n  public errors: SchemaValidationError[];\n\n  constructor(apiResponse: ApiResponse<any>, errors: SchemaValidationError[]) {\n    let message = 'The response did not match the response schema.';\n\n    if (errors.length === 1) {\n      message += `\\n\\n${errors[0].message}`;\n    } else {\n      message += errors\n        .map((e, i) => `\\n\\n> Issue #${i + 1}\\n\\n${e.message}`)\n        .join('');\n    }\n\n    super(message);\n\n    this.request = apiResponse.request;\n    this.statusCode = apiResponse.statusCode;\n    this.headers = apiResponse.headers;\n    this.body = apiResponse.body;\n    this.errors = errors;\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport {\n  Schema,\n  SchemaMappedType,\n  SchemaType,\n  SchemaValidationError,\n  validateAndUnmap,\n} from '../schema';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\n\n/**\n * Prepares arguments for being sent in the API request.\n *\n * Each argument is validated and converted to a JSON-serialization ready value.\n *\n * If one or more arguments fail validation, an ArgumentsValidationError is\n * thrown, which contains the validation details for all arguments that failed\n * validation.\n *\n * @param params Map of arguments with values and schema\n * @returns Map of serialization-ready argument values\n *\n * @throws ArgumentsValidationError\n */\nexport function prepareArgs<\n  S extends Schema<any, any>,\n  T extends Record<string, [SchemaType<S>, S]>\n>(params: T): { [key in keyof T]: SchemaMappedType<T[key][1]> } {\n  const validationErrors: Record<string, SchemaValidationError[]> = {};\n  const result: Partial<{ [key in keyof T]: SchemaMappedType<T[key][1]> }> = {};\n\n  for (const paramName in params) {\n    if (Object.prototype.hasOwnProperty.call(params, paramName)) {\n      const paramInfo = params[paramName];\n      const validationResult = validateAndUnmap(paramInfo[0], paramInfo[1]);\n      if (validationResult.errors) {\n        validationErrors[paramName] = validationResult.errors;\n      } else {\n        result[paramName] = validationResult.result;\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length > 0) {\n    throw new ArgumentsValidationError(validationErrors);\n  }\n\n  return result as any;\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nexport function xmlSerialize(_rootName: string, _value: unknown): string {\n  throw new Error('XML serialization is not available.');\n}\n\nexport async function xmlDeserialize(\n  _rootName: string,\n  _xmlString: string\n): Promise<any> {\n  throw new Error('XML deserialization is not available.');\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport isNode from 'detect-node';\nimport JSONBig from 'json-bigint';\nimport { FileWrapper } from '../fileWrapper';\nimport { deprecated, sanitizeUrl } from '../apiHelper';\nimport { ApiResponse } from '../apiResponse';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\nimport { ResponseValidationError } from '../errors/responseValidationError';\nimport {\n  Schema,\n  validateAndMap,\n  validateAndMapXml,\n  validateAndUnmapXml,\n} from '../schema';\nimport { HttpContext } from './httpContext';\nimport {\n  ACCEPT_HEADER,\n  CONTENT_LENGTH_HEADER,\n  CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE,\n  mergeHeaders,\n  setHeader,\n  setHeaderIfNotSet,\n  TEXT_CONTENT_TYPE,\n  XML_CONTENT_TYPE,\n} from './httpHeaders';\nimport {\n  callHttpInterceptors,\n  HttpInterceptorInterface,\n} from './httpInterceptor';\nimport {\n  HttpMethod,\n  HttpRequest,\n  HttpRequestMultipartFormBody,\n  HttpRequestUrlEncodedFormBody,\n} from './httpRequest';\nimport { HttpResponse } from './httpResponse';\nimport {\n  pathTemplate,\n  PathTemplatePrimitiveTypes,\n  PathTemplateTypes,\n  SkipEncode,\n} from './pathTemplate';\nimport {\n  filterFileWrapperFromKeyValuePairs,\n  formDataEncodeObject,\n  urlEncodeObject,\n} from './queryString';\nimport { prepareArgs } from './validate';\nimport { xmlDeserialize, xmlSerialize } from './xmlSerialization';\n\nexport interface RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  (httpMethod: HttpMethod, path?: string): RequestBuilder<\n    BaseUrlParamType,\n    AuthParams\n  >;\n}\n\nconst JSON = JSONBig({ useNativeBigInt: true });\n\ntype QueryValue =\n  | string\n  | string[]\n  | number\n  | number[]\n  | bigint\n  | bigint[]\n  | boolean\n  | null\n  | undefined;\n\nexport function skipEncode<T extends PathTemplatePrimitiveTypes>(\n  value: T\n): SkipEncode<T> {\n  return new SkipEncode(value);\n}\n\n/** Optional API call options such as the Abort Signal. */\nexport interface RequestOptions {\n  /**\n   * Allows cancelling the API call using an Abort Signal.\n   *\n   * This must be set to an instance compatible with the\n   * [WHATWG AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal). The\n   * AbortSignal comes built-in in modern browsers and can be polyfilled for older browser versions\n   * and Node.js using the\n   * [abort-controller](https://github.com/mysticatea/abort-controller) package.\n   */\n  abortSignal?: AbortSignal;\n}\n\nexport interface HttpClientInterface {\n  (request: HttpRequest, requestOptions?: RequestOptions): Promise<\n    HttpResponse\n  >;\n}\n\nexport interface ApiErrorConstructor {\n  new (response: HttpContext, message: string): any;\n}\n\nexport interface AuthenticatorInterface<AuthParams> {\n  (authParams?: AuthParams): HttpInterceptorInterface<\n    RequestOptions | undefined\n  >;\n}\n\nexport interface RequestBuilder<BaseUrlParamType, AuthParams> {\n  deprecated(methodName: string, message?: string): void;\n  prepareArgs: typeof prepareArgs;\n  method(httpMethodName: HttpMethod): void;\n  baseUrl(arg: BaseUrlParamType): void;\n  authenticate(params: AuthParams): void;\n  appendPath(path: string): void;\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void;\n  acceptJson(): void;\n  accept(acceptHeaderValue: string): void;\n  contentType(contentTypeHeaderValue: string): void;\n  header(name: string, value?: string | boolean | number): void;\n  headers(headersToMerge: Record<string, string>): void;\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  form(parameters: Record<string, unknown>): void;\n  formData(parameters: Record<string, unknown>): void;\n  text(body: string): void;\n  json(data: unknown): void;\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void;\n  stream(file?: FileWrapper): void;\n  toRequest(): HttpRequest;\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void;\n  interceptRequest(interceptor: (request: HttpRequest) => HttpRequest): void;\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void;\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void;\n  validateResponse(validate: boolean): void;\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void;\n  call(requestOptions?: RequestOptions): Promise<ApiResponse<void>>;\n  callAsJson<T>(\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>>;\n  callAsText(requestOptions?: RequestOptions): Promise<ApiResponse<string>>;\n  callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n}\n\nexport class DefaultRequestBuilder<BaseUrlParamType, AuthParams>\n  implements RequestBuilder<BaseUrlParamType, AuthParams> {\n  protected _accept?: string;\n  protected _contentType?: string;\n  protected _headers: Record<string, string>;\n  protected _body?: string;\n  protected _stream?: FileWrapper;\n  protected _query: string[];\n  protected _form?: HttpRequestUrlEncodedFormBody['content'];\n  protected _formData?: HttpRequestMultipartFormBody['content'];\n  protected _baseUrlArg: BaseUrlParamType | undefined;\n  protected _validateResponse: boolean;\n  protected _interceptors: HttpInterceptorInterface<\n    RequestOptions | undefined\n  >[];\n  protected _authParams?: AuthParams;\n  public prepareArgs: typeof prepareArgs;\n\n  constructor(\n    protected _httpClient: HttpClientInterface,\n    protected _baseUrlProvider: (arg?: BaseUrlParamType) => string,\n    protected _apiErrorFactory: ApiErrorConstructor,\n    protected _authenticationProvider: AuthenticatorInterface<AuthParams>,\n    protected _httpMethod: HttpMethod,\n    protected _path?: string\n  ) {\n    this._headers = {};\n    this._query = [];\n    this._interceptors = [];\n    this._validateResponse = true;\n    this._addResponseValidator();\n    this._addAuthentication();\n    this.prepareArgs = prepareArgs.bind(this);\n  }\n  authenticate(params: AuthParams): void {\n    this._authParams = params;\n  }\n  deprecated(methodName: string, message?: string): void {\n    deprecated(methodName, message);\n  }\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void {\n    const pathSegment = pathTemplate(strings, ...args);\n    this.appendPath(pathSegment);\n  }\n  method(httpMethodName: HttpMethod): void {\n    this._httpMethod = httpMethodName;\n  }\n  baseUrl(arg: BaseUrlParamType): void {\n    this._baseUrlArg = arg;\n  }\n  appendPath(path: string): void {\n    this._path = this._path ? mergePath(this._path, path) : path;\n  }\n  acceptJson(): void {\n    this._accept = JSON_CONTENT_TYPE;\n  }\n  accept(acceptHeaderValue: string): void {\n    this._accept = acceptHeaderValue;\n  }\n  contentType(contentTypeHeaderValue: string): void {\n    this._contentType = contentTypeHeaderValue;\n  }\n  header(name: string, value?: string | boolean | number): void {\n    if (value === undefined) {\n      return;\n    }\n    setHeader(this._headers, name, value.toString());\n  }\n  headers(headersToMerge: Record<string, string>): void {\n    mergeHeaders(this._headers, headersToMerge);\n  }\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  query(\n    nameOrParameters: string | Record<string, QueryValue> | null | undefined,\n    value?: unknown\n  ): void {\n    if (nameOrParameters === null || nameOrParameters === undefined) return;\n    const queryString =\n      typeof nameOrParameters === 'string'\n        ? urlEncodeObject({\n            [nameOrParameters]: value,\n          })\n        : urlEncodeObject(nameOrParameters);\n    if (queryString) {\n      this._query.push(queryString);\n    }\n  }\n  text(body: string): void {\n    this._body = body;\n    this._setContentTypeIfNotSet(TEXT_CONTENT_TYPE);\n  }\n  json(data: unknown): void {\n    this._body = JSON.stringify(data);\n    this._setContentTypeIfNotSet(JSON_CONTENT_TYPE);\n  }\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void {\n    const mappingResult = validateAndUnmapXml(data, schema);\n    if (mappingResult.errors) {\n      throw new ArgumentsValidationError({ [argName]: mappingResult.errors });\n    }\n    this._body = xmlSerialize(rootName, mappingResult.result);\n    this._setContentTypeIfNotSet(XML_CONTENT_TYPE);\n  }\n  stream(file?: FileWrapper): void {\n    this._stream = file;\n  }\n  form(parameters: Record<string, unknown>): void {\n    this._form = filterFileWrapperFromKeyValuePairs(\n      formDataEncodeObject(parameters)\n    );\n  }\n  formData(parameters: Record<string, unknown>): void {\n    this._formData = formDataEncodeObject(parameters);\n  }\n  toRequest(): HttpRequest {\n    const request: HttpRequest = {\n      method: this._httpMethod,\n      url: mergePath(this._baseUrlProvider(this._baseUrlArg), this._path),\n    };\n\n    if (this._query.length > 0) {\n      const queryString = this._query.join('&');\n      request.url +=\n        (request.url.indexOf('?') === -1 ? '?' : '&') + queryString;\n    }\n\n    request.url = sanitizeUrl(request.url);\n\n    // defensively copy headers\n    const headers = { ...this._headers };\n\n    if (this._accept) {\n      setHeader(headers, ACCEPT_HEADER, this._accept);\n    }\n\n    if (this._contentType) {\n      setHeader(headers, CONTENT_TYPE_HEADER, this._contentType);\n    }\n\n    setHeader(headers, CONTENT_LENGTH_HEADER);\n\n    request.headers = headers;\n\n    if (this._body !== undefined) {\n      request.body = { type: 'text', content: this._body };\n    } else if (this._form !== undefined) {\n      request.body = { type: 'form', content: this._form };\n    } else if (this._formData !== undefined) {\n      request.body = { type: 'form-data', content: this._formData };\n    } else if (this._stream !== undefined) {\n      request.body = { type: 'stream', content: this._stream };\n    }\n\n    return request;\n  }\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void {\n    this._interceptors.push(interceptor);\n  }\n  interceptRequest(\n    interceptor: (httpRequest: HttpRequest) => HttpRequest\n  ): void {\n    this.intercept((req, opt, next) => next(interceptor(req), opt));\n  }\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void {\n    this.intercept(async (req, opt, next) => interceptor(await next(req, opt)));\n  }\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void {\n    this._apiErrorFactory = apiErrorCtor;\n  }\n  validateResponse(validate: boolean): void {\n    this._validateResponse = validate;\n  }\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        (typeof statusCode === 'number' &&\n          response.statusCode === statusCode) ||\n        (typeof statusCode !== 'number' &&\n          response.statusCode >= statusCode[0] &&\n          response.statusCode <= statusCode[1])\n      ) {\n        throw new errorConstructor(context, ...args);\n      }\n      return context;\n    });\n  }\n  async call(requestOptions?: RequestOptions): Promise<ApiResponse<void>> {\n    // Prepare the HTTP pipeline\n    const pipeline = callHttpInterceptors(\n      this._interceptors,\n      async (request, opt) => {\n        const response = await this._httpClient(request, opt);\n        return { request, response };\n      }\n    );\n\n    // Execute HTTP pipeline\n    const { request, response } = await pipeline(\n      this.toRequest(),\n      requestOptions\n    );\n\n    return { ...response, request, result: undefined };\n  }\n  async callAsText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      throw new Error('Could not parse body as string.'); // TODO: Replace with SDK error\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      return { ...result, result: undefined };\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {\n    this.interceptRequest(req => ({ ...req, responseType: 'stream' }));\n    const result = await this.call(requestOptions);\n    return { ...result, result: convertToStream(result.body) };\n  }\n  async callAsJson<T>(\n    schema: Schema<T>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, JSON_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is not a string.'\n      );\n    }\n    let parsed: unknown;\n    try {\n      parsed = JSON.parse(result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as JSON.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMap(parsed, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  async callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, XML_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as XML. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as XML. The response body is not a string.'\n      );\n    }\n    let xmlObject: unknown;\n    try {\n      xmlObject = await xmlDeserialize(rootName, result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as XML.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMapXml(xmlObject, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  private _setContentTypeIfNotSet(contentType: string) {\n    if (!this._contentType) {\n      setHeaderIfNotSet(this._headers, CONTENT_TYPE_HEADER, contentType);\n    }\n  }\n  private _addResponseValidator(): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        this._validateResponse &&\n        (response.statusCode < 200 || response.statusCode >= 300)\n      ) {\n        throw new this._apiErrorFactory(\n          context,\n          `Response status code was not ok: ${response.statusCode}.`\n        );\n      }\n      return context;\n    });\n  }\n  private _addAuthentication() {\n    this.intercept((...args) => {\n      const handler = this._authenticationProvider(this._authParams);\n      return handler(...args);\n    });\n  }\n}\n\nexport function createRequestBuilderFactory<BaseUrlParamType, AuthParams>(\n  httpClient: HttpClientInterface,\n  baseUrlProvider: (arg?: BaseUrlParamType) => string,\n  apiErrorFactory: ApiErrorConstructor,\n  authenticationProvider: AuthenticatorInterface<AuthParams>\n): RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  return (httpMethod, path?) => {\n    return new DefaultRequestBuilder(\n      httpClient,\n      baseUrlProvider,\n      apiErrorFactory,\n      authenticationProvider,\n      httpMethod,\n      path\n    );\n  };\n}\n\nfunction mergePath(left: string, right?: string): string {\n  if (!right || right === '') {\n    return left;\n  }\n\n  if (left[left.length - 1] === '/' && right[0] === '/') {\n    return left + right.substr(1);\n  } else if (left[left.length - 1] === '/' || right[0] === '/') {\n    return left + right;\n  } else {\n    return `${left}/${right}`;\n  }\n}\n\nexport function convertToStream(\n  content: string | Blob | NodeJS.ReadableStream\n): Blob | NodeJS.ReadableStream {\n  if (typeof content !== 'string') {\n    return content;\n  }\n\n  if (isNode) {\n    // ref: https://stackoverflow.com/a/22085851\n    const rs = new (require('stream').Readable)();\n    rs._read = () => {};\n    rs.push(content);\n    rs.push(null);\n    return rs;\n  }\n\n  return new Blob([content]);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { basicAuthAuthenticationProvider } from './authentication';\nimport {\n  AuthParams,\n  ClientInterface,\n  SdkRequestBuilder,\n  SdkRequestBuilderFactory,\n  Server,\n} from './clientInterface';\nimport { Configuration, Environment } from './configuration';\nimport { DEFAULT_CONFIGURATION } from './defaultConfiguration';\nimport { ApiError } from './errors/apiError';\nimport { HttpClient } from './http/httpClient';\nimport { pathTemplate, SkipEncode } from './http/pathTemplate';\nimport {\n  AuthenticatorInterface,\n  createRequestBuilderFactory,\n  HttpClientInterface,\n} from './http/requestBuilder';\n\nconst USER_AGENT = 'node-messaging';\n\nexport class Client implements ClientInterface {\n  private _config: Readonly<Configuration>;\n  private _requestBuilderFactory: SdkRequestBuilderFactory;\n\n  constructor(config?: Partial<Configuration>) {\n    this._config = {\n      ...DEFAULT_CONFIGURATION,\n      ...config,\n    };\n    this._requestBuilderFactory = createRequestHandlerFactory(\n      server => getBaseUri(server, this._config),\n      basicAuthAuthenticationProvider(this._config),\n      new HttpClient({\n        timeout: this._config.timeout,\n        clientConfigOverrides: this._config.unstable_httpClientOptions,\n      }),\n      [\n        withErrorHandlers,\n        withUserAgent,\n        withAuthenticationByDefault,\n      ]\n    );\n  }\n\n  public getRequestBuilderFactory(): SdkRequestBuilderFactory {\n    return this._requestBuilderFactory;\n  }\n\n  /**\n   * Clone this client and override given configuration options\n   */\n  public withConfiguration(config: Partial<Configuration>) {\n    return new Client({ ...this._config, ...config });\n  }\n}\n\nfunction createHttpClientAdapter(client: HttpClient): HttpClientInterface {\n  return async (request, requestOptions) => {\n    return await client.executeRequest(request, requestOptions);\n  };\n}\n\nfunction getBaseUri(server: Server = 'MessagingDefault', config: Configuration): string {\n  if (config.environment === Environment.Production) {\n    if (server === 'MessagingDefault') {\n      return 'https://messaging.bandwidth.com/api/v2';\n    }\n  }\n  if (config.environment === Environment.Custom) {\n    if (server === 'MessagingDefault') {\n      return pathTemplate`${new SkipEncode(config.baseUrl)}`;\n    }\n  }\n  throw new Error('Could not get Base URL. Invalid environment or server.');\n}\n\nfunction createRequestHandlerFactory(\n  baseUrlProvider: (server?: Server) => string,\n  authProvider: AuthenticatorInterface<AuthParams>,\n  httpClient: HttpClient,\n  addons: ((rb: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  const requestBuilderFactory = createRequestBuilderFactory(\n    createHttpClientAdapter(httpClient),\n    baseUrlProvider,\n    ApiError,\n    authProvider\n  );\n\n  return tap(requestBuilderFactory, ...addons);\n}\n\nfunction tap(\n  requestBuilderFactory: SdkRequestBuilderFactory,\n  ...callback: ((requestBuilder: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  return (...args) => {\n    const requestBuilder = requestBuilderFactory(...args);\n    callback.forEach(c => c(requestBuilder));\n    return requestBuilder;\n  };\n}\n\nfunction withErrorHandlers(rb: SdkRequestBuilder) {\n  rb.defaultToError(ApiError);\n}\n\nfunction withUserAgent(rb: SdkRequestBuilder) {\n  rb.header('user-agent', USER_AGENT);\n}\n\nfunction withAuthenticationByDefault(rb: SdkRequestBuilder) {\n  rb.authenticate(true);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ApiError } from './apiError';\n\n/**\n * Creates an instance of MessagingException\n */\n interface MessagingException {\n  type: string;\n  description: string;\n}\n\nexport class MessagingExceptionError extends ApiError<MessagingException> {}\n\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, number, object, optional, Schema, string } from '../schema';\n\nexport interface BandwidthMessage {\n  /** The id of the message */\n  id?: string;\n  /** The Bandwidth phone number associated with the message */\n  owner?: string;\n  /** The application ID associated with the message */\n  applicationId?: string;\n  /** The datetime stamp of the message in ISO 8601 */\n  time?: string;\n  /** The number of segments the original message from the user is broken into before sending over to carrier networks */\n  segmentCount?: number;\n  /** The direction of the message relative to Bandwidth. Can be in or out */\n  direction?: string;\n  /** The phone number recipients of the message */\n  to?: string[];\n  /** The phone number the message was sent from */\n  from?: string;\n  /** The list of media URLs sent in the message */\n  media?: string[];\n  /** The contents of the message */\n  text?: string;\n  /** The custom string set by the user */\n  tag?: string;\n  /** The priority specified by the user */\n  priority?: string;\n}\n\nexport const bandwidthMessageSchema: Schema<BandwidthMessage> = object({\n  id: ['id', optional(string())],\n  owner: ['owner', optional(string())],\n  applicationId: ['applicationId', optional(string())],\n  time: ['time', optional(string())],\n  segmentCount: ['segmentCount', optional(number())],\n  direction: ['direction', optional(string())],\n  to: ['to', optional(array(string()))],\n  from: ['from', optional(string())],\n  media: ['media', optional(array(string()))],\n  text: ['text', optional(string())],\n  tag: ['tag', optional(string())],\n  priority: ['priority', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { number, object, optional, Schema, string, nullable } from '../schema';\n\nexport interface BandwidthMessageItem {\n  /** The message id */\n  messageId?: string;\n  /** The account id of the message */\n  accountId?: string;\n  /** The source phone number of the message */\n  sourceTn?: string;\n  /** The recipient phone number of the message */\n  destinationTn?: string;\n  /** The status of the message */\n  messageStatus?: string;\n  /** The direction of the message relative to Bandwidth. INBOUND or OUTBOUND */\n  messageDirection?: string;\n  /** The type of message. sms or mms */\n  messageType?: string;\n  /** The number of segments the message was sent as */\n  segmentCount?: number;\n  /** The numeric error code of the message */\n  errorCode?: number;\n  /** The ISO 8601 datetime of the message */\n  receiveTime?: string;\n  /** The name of the carrier. Not currently supported for MMS, coming soon */\n  carrierName?: string | null;\n}\n\nexport const bandwidthMessageItemSchema: Schema<BandwidthMessageItem> = object({\n  messageId: ['messageId', optional(string())],\n  accountId: ['accountId', optional(string())],\n  sourceTn: ['sourceTn', optional(string())],\n  destinationTn: ['destinationTn', optional(string())],\n  messageStatus: ['messageStatus', optional(string())],\n  messageDirection: ['messageDirection', optional(string())],\n  messageType: ['messageType', optional(string())],\n  segmentCount: ['segmentCount', optional(number())],\n  errorCode: ['errorCode', optional(number())],\n  receiveTime: ['receiveTime', optional(string())],\n  carrierName: ['carrierName', nullable(optional(string()))],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { object, optional, Schema, string } from '../schema';\n\nexport interface PageInfo {\n  /** The link to the previous page for pagination */\n  prevPage?: string;\n  /** The link to the next page for pagination */\n  nextPage?: string;\n  /** The isolated pagination token for the previous page */\n  prevPageToken?: string;\n  /** The isolated pagination token for the next page */\n  nextPageToken?: string;\n}\n\nexport const pageInfoSchema: Schema<PageInfo> = object({\n  prevPage: ['prevPage', optional(string())],\n  nextPage: ['nextPage', optional(string())],\n  prevPageToken: ['prevPageToken', optional(string())],\n  nextPageToken: ['nextPageToken', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, lazy, number, object, optional, Schema } from '../schema';\nimport {\n  BandwidthMessageItem,\n  bandwidthMessageItemSchema,\n} from './bandwidthMessageItem';\nimport { PageInfo, pageInfoSchema } from './pageInfo';\n\nexport interface BandwidthMessagesList {\n  /** Total number of messages matched by the search */\n  totalCount?: number;\n  pageInfo?: PageInfo;\n  messages?: BandwidthMessageItem[];\n}\n\nexport const bandwidthMessagesListSchema: Schema<BandwidthMessagesList> = object(\n  {\n    totalCount: ['totalCount', optional(number())],\n    pageInfo: ['pageInfo', optional(lazy(() => pageInfoSchema))],\n    messages: [\n      'messages',\n      optional(array(lazy(() => bandwidthMessageItemSchema))),\n    ],\n  }\n);\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { number, object, optional, Schema, string } from '../schema';\n\nexport interface Media {\n  content?: string;\n  contentLength?: number;\n  mediaName?: string;\n}\n\nexport const mediaSchema: Schema<Media> = object({\n  content: ['content', optional(string())],\n  contentLength: ['contentLength', optional(number())],\n  mediaName: ['mediaName', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { Schema, stringEnum } from '../schema';\n\n/**\n * Enum for PriorityEnum\n */\nexport enum PriorityEnum {\n  Default = 'default',\n  High = 'high',\n}\n\n/**\n * Schema for PriorityEnum\n */\nexport const priorityEnumSchema: Schema<PriorityEnum> = stringEnum(PriorityEnum);\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, object, optional, Schema, string } from '../schema';\nimport { PriorityEnum, priorityEnumSchema } from './priorityEnum';\n\nexport interface MessageRequest {\n  /** The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard. */\n  applicationId: string;\n  /** The phone number(s) the message should be sent to in E164 format */\n  to: string[];\n  /** One of your telephone numbers the message should come from in E164 format */\n  from: string;\n  /** The contents of the text message. Must be 2048 characters or less. */\n  text?: string;\n  /** A list of URLs to include as media attachments as part of the message. */\n  media?: string[];\n  /** A custom string that will be included in callback events of the message. Max 1024 characters */\n  tag?: string;\n  /** The message's priority, currently for toll-free or short code SMS only. Messages with a priority value of `\"high\"` are given preference over your other traffic. */\n  priority?: PriorityEnum;\n}\n\nexport const messageRequestSchema: Schema<MessageRequest> = object({\n  applicationId: ['applicationId', string()],\n  to: ['to', array(string())],\n  from: ['from', string()],\n  text: ['text', optional(string())],\n  media: ['media', optional(array(string()))],\n  tag: ['tag', optional(string())],\n  priority: ['priority', optional(priorityEnumSchema)],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ClientInterface, SdkRequestBuilderFactory } from '../clientInterface';\n\n/** Base class for all controllers */\nexport class BaseController {\n  /** Create a request builder */\n  protected createRequest: SdkRequestBuilderFactory;\n\n  constructor(client: ClientInterface) {\n    this.createRequest = client.getRequestBuilderFactory();\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ApiResponse } from '../apiResponse';\nimport { MessagingExceptionError } from '../errors/messagingExceptionError';\nimport { FileWrapper } from '../fileWrapper';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BandwidthMessage,\n  bandwidthMessageSchema,\n} from '../models/bandwidthMessage';\nimport {\n  BandwidthMessagesList,\n  bandwidthMessagesListSchema,\n} from '../models/bandwidthMessagesList';\nimport { Media, mediaSchema } from '../models/media';\nimport { MessageRequest, messageRequestSchema } from '../models/messageRequest';\nimport { array, number, optional, string } from '../schema';\nimport { BaseController } from './baseController';\n\nexport class ApiController extends BaseController {\n  /**\n   * listMedia\n   *\n   * @param accountId          User's account ID\n   * @param continuationToken  Continuation token used to retrieve subsequent media.\n   * @return Response from the API call\n   */\n  async listMedia(\n    accountId: string,\n    continuationToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<Media[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      continuationToken: [continuationToken, optional(string())],\n    });\n    req.header('Continuation-Token', mapped.continuationToken);\n    req.appendTemplatePath`/users/${mapped.accountId}/media`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(array(mediaSchema), requestOptions);\n  }\n\n  /**\n   * getMedia\n   *\n   * @param accountId User's account ID\n   * @param mediaId   Media ID to retrieve\n   * @return Response from the API call\n   */\n  async getMedia(\n    accountId: string,\n    mediaId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n    });\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsStream(requestOptions);\n  }\n\n  /**\n   * uploadMedia\n   *\n   * @param accountId     User's account ID\n   * @param mediaId       The user supplied custom media ID\n   * @param body\n   * @param contentType   The media type of the entity-body\n   * @param cacheControl  General-header field is used to specify directives that MUST be obeyed by all\n   *                                     caching mechanisms along the request/response chain.\n   * @return Response from the API call\n   */\n  async uploadMedia(\n    accountId: string,\n    mediaId: string,\n    body: FileWrapper,\n    contentType?: string,\n    cacheControl?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<void>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n      contentType: [contentType, optional(string())],\n      cacheControl: [cacheControl, optional(string())],\n    });\n    req.header('Content-Type', mapped.contentType);\n    req.header('Cache-Control', mapped.cacheControl);\n    req.stream(body);\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.call(requestOptions);\n  }\n\n  /**\n   * deleteMedia\n   *\n   * @param accountId User's account ID\n   * @param mediaId   The media ID to delete\n   * @return Response from the API call\n   */\n  async deleteMedia(\n    accountId: string,\n    mediaId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<void>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n    });\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.call(requestOptions);\n  }\n\n  /**\n   * getMessages\n   *\n   * @param accountId     User's account ID\n   * @param messageId     The ID of the message to search for. Special characters need to be encoded using\n   *                                URL encoding\n   * @param sourceTn      The phone number that sent the message\n   * @param destinationTn The phone number that received the message\n   * @param messageStatus The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED,\n   *                                DELIVERED, ACCEPTED, UNDELIVERED\n   * @param errorCode     The error code of the message\n   * @param fromDateTime  The start of the date range to search in ISO 8601 format. Uses the message receive\n   *                                time. The date range to search in is currently 14 days.\n   * @param toDateTime    The end of the date range to search in ISO 8601 format. Uses the message receive\n   *                                time. The date range to search in is currently 14 days.\n   * @param pageToken     A base64 encoded value used for pagination of results\n   * @param limit         The maximum records requested in search result. Default 100. The sum of limit and\n   *                                after cannot be more than 10000\n   * @return Response from the API call\n   */\n  async getMessages(\n    accountId: string,\n    messageId?: string,\n    sourceTn?: string,\n    destinationTn?: string,\n    messageStatus?: string,\n    errorCode?: number,\n    fromDateTime?: string,\n    toDateTime?: string,\n    pageToken?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BandwidthMessagesList>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      messageId: [messageId, optional(string())],\n      sourceTn: [sourceTn, optional(string())],\n      destinationTn: [destinationTn, optional(string())],\n      messageStatus: [messageStatus, optional(string())],\n      errorCode: [errorCode, optional(number())],\n      fromDateTime: [fromDateTime, optional(string())],\n      toDateTime: [toDateTime, optional(string())],\n      pageToken: [pageToken, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('messageId', mapped.messageId);\n    req.query('sourceTn', mapped.sourceTn);\n    req.query('destinationTn', mapped.destinationTn);\n    req.query('messageStatus', mapped.messageStatus);\n    req.query('errorCode', mapped.errorCode);\n    req.query('fromDateTime', mapped.fromDateTime);\n    req.query('toDateTime', mapped.toDateTime);\n    req.query('pageToken', mapped.pageToken);\n    req.query('limit', mapped.limit);\n    req.appendTemplatePath`/users/${mapped.accountId}/messages`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(bandwidthMessagesListSchema, requestOptions);\n  }\n\n  /**\n   * createMessage\n   *\n   * @param accountId User's account ID\n   * @param body\n   * @return Response from the API call\n   */\n  async createMessage(\n    accountId: string,\n    body: MessageRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BandwidthMessage>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, messageRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/users/${mapped.accountId}/messages`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(bandwidthMessageSchema, requestOptions);\n  }\n}\n"],"names":["callHttpInterceptors","interceptors","client","next","index","length","current","last","request","options","passThroughInterceptor","requestOptions","basicAuthAuthenticationProvider","basicAuthUserName","basicAuthPassword","requiresAuth","auth","username","password","Environment","DEFAULT_CONFIGURATION","timeout","environment","Production","baseUrl","ApiError","Error","constructor","context","message","response","statusCode","headers","body","JSON","JSONBig","useNativeBigInt","result","parse","error","process","env","NODE_ENV","console","warn","sanitizeUrl","url","protocolRegex","match","protocol","queryUrl","substring","replace","isBlob","value","Blob","Object","prototype","toString","call","deprecatedHits","deprecated","methodName","notice","warning","AbortError","FileWrapper","file","isFileWrapper","cloneFileWrapper","fileWrapper","cloneFileWrapperOptions","fileWrapperOptions","clone","setHeader","name","realHeaderName","lookupCaseInsensitive","setHeaderInternal","setHeaderIfNotSet","obj","prop","toLowerCase","p","hasOwnProperty","mergeHeaders","headersToMerge","headerKeys","headerName","getOwnPropertyNames","lowerCasedName","CONTENT_TYPE_HEADER","ACCEPT_HEADER","CONTENT_LENGTH_HEADER","FORM_URLENCODED_CONTENT_TYPE","JSON_CONTENT_TYPE","TEXT_CONTENT_TYPE","XML_CONTENT_TYPE","indexedPrefix","prefix","key","formDataEncodeObject","prefixFormat","keys","undefined","push","Array","isArray","iter","objectKey","element","filterFileWrapperFromKeyValuePairs","params","filter","urlEncodeObject","urlEncodeKeyValuePairs","encode","encodeURIComponent","map","join","DEFAULT_AXIOS_CONFIG_OVERRIDES","transformResponse","DEFAULT_TIMEOUT","HttpClient","clientConfigOverrides","_timeout","_axiosInstance","axios","create","convertHttpRequest","req","newRequest","method","responseType","requestBody","type","data","content","some","item","form","FormData","_iter$value$options","fileData","contentType","append","getHeaders","_requestBody$content$","isNode","validateStatus","convertHttpResponse","resp","status","executeRequest","axiosRequest","abortSignal","aborted","abortError","cancelToken","CancelToken","source","token","addEventListener","cancel","isCancel","SkipEncode","pathTemplate","strings","args","values","flatMap","interweaveArrays","s","encodePathTemplateSegment","pathSegment","skipEncode","m","a","b","min","Math","apply","reduce","_","concat","slice","ArgumentsValidationError","errors","errorKeys","msgList","param","ResponseValidationError","apiResponse","e","i","prepareArgs","validationErrors","paramName","paramInfo","validationResult","validateAndUnmap","xmlSerialize","_rootName","_value","xmlDeserialize","_xmlString","DefaultRequestBuilder","_httpClient","_baseUrlProvider","_apiErrorFactory","_authenticationProvider","_httpMethod","_path","_headers","_query","_interceptors","_validateResponse","_addResponseValidator","_addAuthentication","bind","authenticate","_authParams","appendTemplatePath","appendPath","httpMethodName","arg","_baseUrlArg","path","mergePath","acceptJson","_accept","accept","acceptHeaderValue","contentTypeHeaderValue","_contentType","header","query","nameOrParameters","queryString","text","_body","_setContentTypeIfNotSet","json","stringify","xml","argName","rootName","schema","mappingResult","validateAndUnmapXml","stream","_stream","parameters","_form","formData","_formData","toRequest","indexOf","intercept","interceptor","interceptRequest","opt","interceptResponse","defaultToError","apiErrorCtor","validateResponse","validate","throwOn","errorConstructor","pipeline","callAsText","callAsOptionalText","callAsStream","convertToStream","callAsJson","parsed","validateAndMap","callAsXml","xmlObject","validateAndMapXml","handler","createRequestBuilderFactory","httpClient","baseUrlProvider","apiErrorFactory","authenticationProvider","httpMethod","left","right","substr","rs","require","Readable","_read","USER_AGENT","Client","config","_config","_requestBuilderFactory","createRequestHandlerFactory","server","getBaseUri","unstable_httpClientOptions","withErrorHandlers","withUserAgent","withAuthenticationByDefault","getRequestBuilderFactory","withConfiguration","createHttpClientAdapter","Custom","authProvider","addons","requestBuilderFactory","tap","callback","requestBuilder","forEach","c","rb","MessagingExceptionError","bandwidthMessageSchema","object","id","optional","string","owner","applicationId","time","segmentCount","number","direction","to","array","from","media","tag","priority","bandwidthMessageItemSchema","messageId","accountId","sourceTn","destinationTn","messageStatus","messageDirection","messageType","errorCode","receiveTime","carrierName","nullable","pageInfoSchema","prevPage","nextPage","prevPageToken","nextPageToken","bandwidthMessagesListSchema","totalCount","pageInfo","lazy","messages","mediaSchema","contentLength","mediaName","PriorityEnum","priorityEnumSchema","stringEnum","messageRequestSchema","BaseController","createRequest","ApiController","listMedia","continuationToken","mapped","getMedia","mediaId","uploadMedia","cacheControl","deleteMedia","getMessages","fromDateTime","toDateTime","pageToken","limit","createMessage"],"mappings":"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"}