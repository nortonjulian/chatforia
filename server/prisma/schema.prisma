// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================================
// Chatforia Prisma Schema (ordered + normalized)
// =======================================================

// ===================== 0) Global Enums =====================

enum Plan {
  FREE
  PREMIUM
}

enum RoomRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum AttachmentKind {
  IMAGE
  VIDEO
  AUDIO
  FILE
  STICKER
  GIF
}

enum StatusAudience {
  EVERYONE
  CONTACTS
  MUTUALS
  CUSTOM
}

enum StatusAssetKind {
  IMAGE
  VIDEO
  AUDIO
  GIF
  STICKER
  FILE
}

enum AutoResponderMode {
  OFF
  DM
  MENTION
  ALL
}

enum AutoTranslateMode {
  OFF
  TAGGED
  ALL
}

enum AIAssistantMode {
  OFF
  MENTION
  ALWAYS
}

enum AgeBand {
  TEEN_13_17
  ADULT_18_24
  ADULT_25_34
  ADULT_35_49
  ADULT_50_PLUS
}

enum ContentScope {
  COMMANDS
  MENTIONS
  ALL
}

enum CallMode {
  AUDIO
  VIDEO
}

enum CallStatus {
  INITIATED
  RINGING
  ANSWERED
  REJECTED
  MISSED
  CANCELLED
  ENDED
}

enum NumberStatus {
  AVAILABLE
  RESERVED
  ASSIGNED
  HOLD
  RELEASING
}

enum PortStatus {
  NONE
  PORT_IN_PENDING
  PORTED_IN
  PORT_OUT_PENDING
  PORTED_OUT
}

// ===================== 1) Core User & Access =====================

model User {
  id                          Int         @id @default(autoincrement())
  username                    String      @unique
  email                       String?     @unique
  password                    String
  phoneNumber                 String?     @db.VarChar(32)
  preferredLanguage           String      @default("en")
  allowExplicitContent        Boolean     @default(true)
  showOriginalWithTranslation Boolean     @default(true)
  role                        String      @default("USER")
  enableAIResponder           Boolean     @default(false)
  enableSmartReplies          Boolean     @default(false)
  theme                       String      @default("dawn")
  cycling  Boolean @default(false)
  strictE2EE                  Boolean     @default(false)
  uploads                     Upload[]    @relation("UserUploads")
  smsThreads                  SmsThread[] @relation("UserSmsThreads")

  autoResponderMode        AutoResponderMode @default(DM)
  autoResponderCooldownSec Int               @default(120)
  autoResponderActiveUntil DateTime?
  autoResponderSignature   String?

  // Billing
  stripeCustomerId     String? @unique
  stripeSubscriptionId String?

  publicKey  String?
  privateKey String?

  // Relations
  followers                  Follow[]             @relation("follower") // who follows THIS user
  following                  Follow[]             @relation("following")
  passwordResetTokens        PasswordResetToken[] @relation("UserPasswordResetTokens")
  roomsOwned                 ChatRoom[]           @relation("ChatRoomOwner")
  messages                   Message[]            @relation("UserMessages")
  participants               Participant[]
  reports                    Report[]             @relation("UserReports")
  randomChatRooms            RandomChatRoom[]     @relation("RandomChatParticipants")
  readMessages               Message[]            @relation("ReadMessages")
  contactsOwned              Contact[]            @relation("ContactsOwned")
  contactsSaved              Contact[]            @relation("ContactsSaved")
  auditLogs                  AuditLog[]           @relation("AuditActor")
  messageKeys                MessageKey[]
  devices                    Device[]
  deviceRevocations          Device[]             @relation("DeviceRevokedBy")
  createdInvites             ChatRoomInvite[]     @relation("InviteCreator")
  messageReactions           MessageReaction[]
  statusesAuthored           Status[]
  statusKeys                 StatusKey[]
  statusViews                StatusView[]
  statusReactions            StatusReaction[]
  botsOwned                  Bot[]                @relation("BotsOwned")
  botsAsService              Bot[]                @relation("BotServiceUser")
  provisionLinks             ProvisionLink[]      @relation("ProvisionLinkUser")
  provisionLinksCreated      ProvisionLink[]      @relation("ProvisionLinkCreator")
  callsPlaced                Call[]               @relation("CallCaller")
  callsReceived              Call[]               @relation("CallCallee")
  scheduledMessagesAuthored  ScheduledMessage[]   @relation("ScheduledMessageSender")
  messageSessionKeysReceived MessageSessionKey[]  @relation("MsgSessionKeys_Recipient")
  assignedNumbers            PhoneNumber[]
  numberReservations         NumberReservation[]  @relation("UserNumberReservations")
  transcripts                Transcript[]

  // Usage/analytics
  sttUsage STTUsage[] @relation("UserSTTUsage")

  // Settings
  plan              Plan    @default(FREE)
  autoDeleteSeconds Int?
  showReadReceipts  Boolean @default(true)
  avatarUrl         String?
  emojiTag          String?
  messageTone       String? @default("default.mp3")
  ringtone          String? @default("classic.mp3")

  privacyBlurEnabled  Boolean @default(false)
  privacyHoldToReveal Boolean @default(false)
  notifyOnCopy        Boolean @default(false)

  ageBand                AgeBand?
  ageAttestedAt          DateTime?
  wantsAgeFilter         Boolean   @default(true)
  randomChatAllowedBands Json?

  // Accessibility preferences (hearing-impaired support)
  a11yVisualAlerts Boolean @default(true) // banners/title-blink instead of relying on sound
  a11yVibrate      Boolean @default(true)
  a11yFlashOnCall  Boolean @default(false) // optional screen flash on incoming call
  a11yLiveCaptions Boolean @default(false) // premium toggle for live call captions
  a11yVoiceNoteSTT Boolean @default(true) // auto-transcribe voice notes
  a11yCaptionFont  String  @default("lg") // sm|md|lg|xl
  a11yCaptionBg    String  @default("dark") // light|dark|transparent
}

model PasswordResetToken {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User     @relation("UserPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String    @db.VarChar(64)
  expiresAt  DateTime
  usedAt     DateTime?

  @@index([tokenHash])
  @@index([userId, usedAt])
  @@index([expiresAt])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followingId])
}

model Device {
  id String @id @default(cuid())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  publicKey  String
  name       String?
  platform   String?
  isPrimary  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  lastSeenAt DateTime?
  revokedAt  DateTime?

  revokedById Int?
  revokedBy   User? @relation("DeviceRevokedBy", fields: [revokedById], references: [id])

  messageSessionKeys MessageSessionKey[] @relation("MsgSessionKeys_Device")

  @@index([userId])
}

model ProvisionLink {
  id String @id @default(cuid())

  userId Int
  user   User @relation("ProvisionLinkUser", fields: [userId], references: [id], onDelete: Cascade)

  createdById Int?
  createdBy   User? @relation("ProvisionLinkCreator", fields: [createdById], references: [id], onDelete: SetNull)

  secret    String
  expiresAt DateTime
  usedAt    DateTime?
  sasCode   String
  createdAt DateTime  @default(now())

  @@index([userId])
}


// ===================== 2) Conversation & Participation =====================

model ChatRoom {
  id              Int             @id @default(autoincrement())
  name            String?
  aiAssistantMode AIAssistantMode @default(OFF)
  isGroup         Boolean         @default(false)
  ownerId         Int?
  owner           User?           @relation("ChatRoomOwner", fields: [ownerId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  participants Participant[]
  messages     Message[]     @relation("ChatRoomMessages")

  autoTranslateMode AutoTranslateMode @default(OFF)
  allowForiaBot     Boolean           @default(false)

  invites           ChatRoomInvite[]   @relation("RoomInvites")
  botInstalls       BotInstall[]       @relation("BotInstallRoom")
  scheduledMessages ScheduledMessage[] @relation("ScheduledMessageRoom")

  @@index([ownerId])
  @@index([updatedAt, id], map: "room_updated_id")
}

model Participant {
  id         Int @id @default(autoincrement())
  userId     Int
  chatRoomId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  role       RoomRole @default(MEMBER)
  joinedAt   DateTime @default(now())
  allowAIBot Boolean  @default(true)

  @@unique([chatRoomId, userId])
  @@index([chatRoomId], map: "part_room")
}

model ChatRoomInvite {
  id   Int    @id @default(autoincrement())
  code String @unique

  chatRoomId Int
  chatRoom   ChatRoom @relation("RoomInvites", fields: [chatRoomId], references: [id], onDelete: Cascade)

  createdById Int
  createdBy   User @relation("InviteCreator", fields: [createdById], references: [id], onDelete: Cascade)

  maxUses   Int       @default(0)
  uses      Int       @default(0)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model RandomChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  participants User[]    @relation("RandomChatParticipants")
  messages     Message[]
  aiEnabled    Boolean   @default(false)
}

// ===================== 3) Messaging =====================

model Message {
  id                Int       @id @default(autoincrement())
  contentCiphertext String    @default("")
  rawContent        String
  translations      Json?
  translatedFrom    String?
  translatedContent String?
  translatedTo      String?
  isExplicit        Boolean   @default(false)
  imageUrl          String?
  audioUrl          String?
  audioDurationSec  Int?
  expiresAt         DateTime?
  deletedBySender   Boolean   @default(false)

  senderId   Int
  chatRoomId Int

  sender   User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id], onDelete: Cascade)

  keys        MessageKey[]
  attachments MessageAttachment[]
  reactions   MessageReaction[]
  reports     Report[]

  randomChatRoomId Int?
  randomChatRoom   RandomChatRoom? @relation(fields: [randomChatRoomId], references: [id])

  createdAt   DateTime @default(now())
  readBy      User[]   @relation("ReadMessages")
  isAutoReply Boolean  @default(false)

  sessionKeys MessageSessionKey[] @relation("MsgSessionKeys_Message")

  @@index([expiresAt])
  @@index([chatRoomId, id], map: "msg_room_id")
  @@index([chatRoomId, createdAt], map: "msg_room_time")
}

model MessageSessionKey {
  id String @id @default(cuid())

  messageId         Int
  recipientUserId   Int
  recipientDeviceId String

  message         Message @relation("MsgSessionKeys_Message", fields: [messageId], references: [id], onDelete: Cascade)
  recipientUser   User    @relation("MsgSessionKeys_Recipient", fields: [recipientUserId], references: [id], onDelete: Cascade)
  recipientDevice Device  @relation("MsgSessionKeys_Device", fields: [recipientDeviceId], references: [id], onDelete: Cascade)

  encryptedSessionKey String

  @@index([messageId])
  @@index([recipientUserId])
  @@index([recipientDeviceId])
}

model MessageKey {
  messageId    Int
  userId       Int
  encryptedKey String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId])
}

model MessageAttachment {
  id          Int            @id @default(autoincrement())
  messageId   Int
  kind        AttachmentKind
  url         String
  mimeType    String
  width       Int?
  height      Int?
  durationSec Int?
  caption     String?
  createdAt   DateTime       @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model MessageReaction {
  messageId Int
  userId    Int
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model ScheduledMessage {
  id          Int      @id @default(autoincrement())
  chatRoomId  Int
  senderId    Int
  content     String
  scheduledAt DateTime
  createdAt   DateTime @default(now())

  chatRoom ChatRoom @relation("ScheduledMessageRoom", fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation("ScheduledMessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([senderId])
  @@index([scheduledAt]) // ⬅️ new
}

// Upload
model Upload {
  id           Int      @id @default(autoincrement())
  ownerId      Int
  key          String
  sha256       String   @db.VarChar(64)
  originalName String
  mimeType     String
  size         Int
  driver       String // 'local' | 's3'
  createdAt    DateTime @default(now())

  // Name the relation to match User.uploads
  owner User @relation("UserUploads", fields: [ownerId], references: [id], onDelete: Cascade)

  // choose ONE of these uniqueness guarantees:
  // key is globally unique:
  // @unique on key:
  // key          String   @unique
  //
  // OR key is unique per owner:
  // @@unique([ownerId, key])

  @@index([ownerId])
  @@index([sha256])
}

model SmsThread {
  id           Int          @id @default(autoincrement())
  userId       Int
  contactPhone String       @db.VarChar(32) // normalized E.164 of the *other party*
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  messages     SmsMessage[]

  // single relation to User, named to match User.smsThreads
  user User @relation("UserSmsThreads", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contactPhone])
  @@index([userId])
}

model SmsMessage {
  id         Int       @id @default(autoincrement())
  thread     SmsThread @relation(fields: [threadId], references: [id])
  threadId   Int
  direction  String // 'in' | 'out'
  fromNumber String    @db.VarChar(32)
  toNumber   String    @db.VarChar(32)
  body       String
  provider   String?
  createdAt  DateTime  @default(now())
}

// ===================== 4) Contacts, Reports, Auditing =====================

model Contact {
  id            Int      @id @default(autoincrement())
  ownerId       Int
  userId        Int?
  externalPhone String? // normalized digits with optional +
  externalName  String?
  alias         String?
  favorite      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // name the two different relations to User:
  owner User  @relation("ContactsOwned", fields: [ownerId], references: [id])
  user  User? @relation("ContactsSaved", fields: [userId], references: [id])

  @@unique([ownerId, userId], name: "ownerId_userId")
  @@unique([ownerId, externalPhone], name: "ownerId_externalPhone")
  @@index([ownerId])
  @@index([userId])
}

model Report {
  id               Int      @id @default(autoincrement())
  messageId        Int
  reporterId       Int
  decryptedContent String
  createdAt        DateTime @default(now())

  status     String    @default("OPEN")
  resolvedAt DateTime?
  notes      String?

  message  Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reporter User    @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
}

model AuditLog {
  id      Int  @id @default(autoincrement())
  actorId Int
  actor   User @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)

  action     String
  resource   String?
  resourceId String?
  status     Int
  ip         String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([actorId, createdAt])
  @@index([action, createdAt])
}

// ===================== 5) Status / Stories =====================

model Status {
  id                Int            @id @default(autoincrement())
  authorId          Int
  author            User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  captionCiphertext String?
  encryptedKeys     Json?
  translatedFrom    String?
  translations      Json?
  isExplicit        Boolean        @default(false)
  audience          StatusAudience @default(MUTUALS)
  expiresAt         DateTime
  createdAt         DateTime       @default(now())

  assets    StatusAsset[]
  keys      StatusKey[]
  views     StatusView[]
  reactions StatusReaction[]

  @@index([authorId, expiresAt])
}

model StatusAsset {
  id          Int             @id @default(autoincrement())
  statusId    Int
  status      Status          @relation(fields: [statusId], references: [id], onDelete: Cascade)
  kind        StatusAssetKind
  url         String
  mimeType    String
  width       Int?
  height      Int?
  durationSec Int?
  caption     String?
  createdAt   DateTime        @default(now())

  @@index([statusId])
}

model StatusKey {
  statusId     Int
  userId       Int
  encryptedKey String

  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([statusId, userId])
}

model StatusView {
  id       Int      @id @default(autoincrement())
  statusId Int
  viewerId Int
  viewedAt DateTime @default(now())

  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
  viewer User   @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@unique([statusId, viewerId])
  @@index([viewerId])
}

model StatusReaction {
  statusId Int
  userId   Int
  emoji    String

  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([statusId, userId, emoji])
  @@index([statusId, emoji], map: "status_emoji")
}

// ===================== 6) Bots & Automation =====================

model Bot {
  id      Int  @id @default(autoincrement())
  ownerId Int
  owner   User @relation("BotsOwned", fields: [ownerId], references: [id], onDelete: Cascade)

  name   String
  url    String
  secret String

  serviceUserId Int?
  serviceUser   User? @relation("BotServiceUser", fields: [serviceUserId], references: [id], onDelete: SetNull)

  installs  BotInstall[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([ownerId, name])
}

model BotInstall {
  id           Int          @id @default(autoincrement())
  botId        Int
  chatRoomId   Int
  contentScope ContentScope @default(COMMANDS)
  isEnabled    Boolean      @default(true)
  scopes       String?

  bot      Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation("BotInstallRoom", fields: [chatRoomId], references: [id], onDelete: Cascade)

  events    BotEventLog[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([botId, chatRoomId])
}

model BotEventLog {
  id            Int       @id @default(autoincrement())
  installId     Int
  eventId       String    @unique @default(cuid())
  type          String
  payload       Json
  status        String    @default("pending")
  attempts      Int       @default(0)
  nextAttemptAt DateTime?
  lastError     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  install BotInstall @relation(fields: [installId], references: [id], onDelete: Cascade)

  @@index([installId])
}

// ===================== 7) Calls =====================

model Call {
  id       Int        @id @default(autoincrement())
  roomId   Int?
  callerId Int
  calleeId Int
  mode     CallMode
  status   CallStatus @default(RINGING)

  offerSdp  String?
  answerSdp String?
  createdAt DateTime  @default(now())
  startedAt DateTime?
  endedAt   DateTime?

  // ⬇️ use the SAME relation names as User.callsPlaced / callsReceived
  caller User @relation("CallCaller", fields: [callerId], references: [id])
  callee User @relation("CallCallee", fields: [calleeId], references: [id])

  @@index([callerId])
  @@index([calleeId])
  @@index([roomId])
}

// ===================== 8) Phone Numbers =====================

model PhoneNumber {
  id             Int          @id @default(autoincrement())
  e164           String       @unique
  provider       String // 'telnyx' | 'bandwidth'
  areaCode       String?
  vanity         Boolean      @default(false)
  status         NumberStatus @default(AVAILABLE)
  assignedUserId Int?
  assignedAt     DateTime?
  lastOutboundAt DateTime?
  keepLocked     Boolean      @default(false)
  holdUntil      DateTime?
  releaseAfter   DateTime?
  portStatus     PortStatus   @default(NONE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  assignedUser User?               @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  reservations NumberReservation[] @relation("PhoneNumberReservations")

  @@index([status])
  @@index([assignedUserId])
  @@index([provider, areaCode, status])
}

model NumberReservation {
  id            Int      @id @default(autoincrement())
  phoneNumberId Int
  userId        Int
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  phone PhoneNumber @relation("PhoneNumberReservations", fields: [phoneNumberId], references: [id])
  user  User        @relation("UserNumberReservations", fields: [userId], references: [id])

  @@index([expiresAt])
}

// ===================== 9) Accessibility Transcripts =====================

model Transcript {
  id        String   @id @default(uuid())
  userId    Int
  callId    String? // if generated during a call
  messageId Int? // if generated from a voice note
  language  String? // e.g., "en-US"
  segments  Json // [{start,end,text}, ...]
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([callId])
  @@index([messageId])
}

model STTUsage {
  id        Int      @id @default(autoincrement())
  userId    Int
  monthKey  String // e.g., '2025-08'
  seconds   Int      @default(0) // consumed STT seconds (voice notes + live captions)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user User @relation("UserSTTUsage", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, monthKey])
  @@index([monthKey])
  @@index([userId, updatedAt])
}
