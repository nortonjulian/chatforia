name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports: [ '5432:5432' ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Minimal env so tests/builds don’t crash on missing secrets
    env:
      # DB for server tests & prisma
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      # Server expectations
      NODE_ENV: test
      JWT_SECRET: test-secret
      FRONTEND_ORIGIN: http://localhost:5173

      # Stripe – dummy + skip sig check in CI
      STRIPE_SECRET_KEY: sk_test_dummy
      STRIPE_WEBHOOK_SECRET: whsec_dummy
      STRIPE_SKIP_SIG_CHECK: 'true'

      # Optional feature flags
      STATUS_ENABLED: 'true'

      # Client build expectations (if referenced in code)
      VITE_API_URL: http://localhost:5002

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install (workspaces)
        run: npm ci

      # Generate Prisma client (no DB needed)
      - name: Prisma generate (server)
        working-directory: server
        run: npx prisma generate

      # >>> This is the key fix: create schema in the CI Postgres before tests
      - name: Prisma migrate deploy (server)
        working-directory: server
        run: npx prisma migrate deploy

      - name: Lint
        run: npm run lint --workspaces

      # If you have TS in either workspace, keep this. If not, remove.
      - name: Typecheck (server/client)
        run: npm run typecheck --workspaces
        continue-on-error: true

      - name: Test (server)
        run: npm run test --workspace server

      - name: Test (client)
        env:
          CI: 'true'
        run: npm run test --workspace client

      - name: Build (server)
        run: npm run build --workspace server

      - name: Build (client)
        run: npm run build --workspace client

      - name: Upload junit / coverage (if available)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            **/junit*.xml
            **/coverage/**
