name: CI

on:
  pull_request:
    branches-ignore: ['**']   # match nothing
  push:
    branches-ignore: ['**']   # match nothing

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports: [ '5432:5432' ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
      NODE_ENV: test
      JWT_SECRET: test-secret
      FRONTEND_ORIGIN: http://localhost:5173
      STRIPE_SECRET_KEY: sk_test_dummy
      STRIPE_WEBHOOK_SECRET: whsec_dummy
      STRIPE_SKIP_SIG_CHECK: 'true'
      STATUS_ENABLED: 'true'
      VITE_API_URL: http://localhost:5002
      COOKIE_SECURE: 'false'
      CORS_ORIGINS: http://localhost:5173
      CI: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install (workspaces)
        run: npm ci

      - name: Env sanity (lint-only check)
        run: |
          node -e "import('./server/config/validateEnv.js').then(m=>{try{m.default();console.log('env ok (using repo defaults)')}catch(e){console.error(e.message);process.exit(1)}})"

      - name: Wait for Postgres (belt & suspenders)
        run: |
          for i in {1..30}; do
            nc -z localhost 5432 && echo 'Postgres up' && exit 0
            echo 'Waiting for Postgres...'
            sleep 2
          done
          echo 'Postgres never became ready' >&2
          exit 1

      - name: Prisma generate (server)
        working-directory: server
        run: npx prisma generate

      - name: Prisma migrate deploy (server)
        working-directory: server
        run: npx prisma migrate deploy

      - name: Lint (ESLint)
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: Server tests
        run: npm run test:server

      - name: Client tests
        run: npm run test:client

      - name: Build (server)
        run: npm run build --workspace server

      - name: Build (client)
        run: npm run build --workspace client

      - name: Upload junit / coverage (if available)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            **/junit*.xml
            **/coverage/**
