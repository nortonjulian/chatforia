jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install jq (needed for parsing Render responses)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install (workspaces)
        run: npm ci

      - name: Build server
        run: npm run build --workspace server

      - name: Build client
        run: npm run build --workspace client

      - name: Prisma migrate deploy (staging)
        run: npx prisma migrate deploy
        working-directory: server
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Render Deploy (staging)
        id: render-deploy-staging
        run: |
          DEPLOY=$(curl -s -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}')
          echo "$DEPLOY"
          ID=$(echo "$DEPLOY" | jq -r '.id')
          echo "deploy_id=$ID" >> $GITHUB_OUTPUT

      - name: Wait for Render deploy (staging)
        if: steps.render-deploy-staging.outputs.deploy_id != 'null'
        shell: bash
        run: |
          DEPLOY_ID=${{ steps.render-deploy-staging.outputs.deploy_id }}
          for i in {1..60}; do
            STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              "https://api.render.com/v1/deploys/$DEPLOY_ID" | jq -r '.status')
            echo "Deploy status: $STATUS"
            if [ "$STATUS" = "live" ]; then exit 0; fi
            if [ "$STATUS" = "failed" ]; then echo "Render deploy failed"; exit 1; fi
            sleep 10
          done
          echo "Timed out waiting for Render deploy"; exit 1

      - name: Smoke check (curl)
        run: |
          set -e
          URL="${{ secrets.STAGING_BASE_URL }}"
          echo "GET $URL/status"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/status")
          echo "HTTP $code"
          test "$code" -eq 200

      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Run k6 smoke
        run: k6 run k6/smoke.js
        env:
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-smoke
          path: k6/*.json

  promote-prod:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install (workspaces)
        run: npm ci

      - name: Build server
        run: npm run build --workspace server

      - name: Build client
        run: npm run build --workspace client

      - name: Prisma migrate deploy (prod)
        run: npx prisma migrate deploy
        working-directory: server
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

      - name: Render Deploy (prod)
        id: render-deploy-prod
        run: |
          DEPLOY=$(curl -s -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PROD_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}')
          echo "$DEPLOY"
          ID=$(echo "$DEPLOY" | jq -r '.id')
          echo "deploy_id=$ID" >> $GITHUB_OUTPUT

      - name: Wait for Render deploy (prod)
        if: steps.render-deploy-prod.outputs.deploy_id != 'null'
        shell: bash
        run: |
          DEPLOY_ID=${{ steps.render-deploy-prod.outputs.deploy_id }}
          for i in {1..60}; do
            STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              "https://api.render.com/v1/deploys/$DEPLOY_ID" | jq -r '.status')
            echo "Deploy status: $STATUS"
            if [ "$STATUS" = "live" ]; then exit 0; fi
            if [ "$STATUS" = "failed" ]; then echo "Render deploy failed"; exit 1; fi
            sleep 10
          done
          echo "Timed out waiting for Render deploy"; exit 1
