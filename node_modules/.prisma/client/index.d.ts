
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model Participant
 * 
 */
export type Participant = $Result.DefaultSelection<Prisma.$ParticipantPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model ScheduledMessage
 * 
 */
export type ScheduledMessage = $Result.DefaultSelection<Prisma.$ScheduledMessagePayload>
/**
 * Model MessageKey
 * 
 */
export type MessageKey = $Result.DefaultSelection<Prisma.$MessageKeyPayload>
/**
 * Model MessageAttachment
 * 
 */
export type MessageAttachment = $Result.DefaultSelection<Prisma.$MessageAttachmentPayload>
/**
 * Model RandomChatRoom
 * 
 */
export type RandomChatRoom = $Result.DefaultSelection<Prisma.$RandomChatRoomPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Device
 * 
 */
export type Device = $Result.DefaultSelection<Prisma.$DevicePayload>
/**
 * Model ProvisionLink
 * 
 */
export type ProvisionLink = $Result.DefaultSelection<Prisma.$ProvisionLinkPayload>
/**
 * Model MessageSessionKey
 * 
 */
export type MessageSessionKey = $Result.DefaultSelection<Prisma.$MessageSessionKeyPayload>
/**
 * Model ChatRoomInvite
 * 
 */
export type ChatRoomInvite = $Result.DefaultSelection<Prisma.$ChatRoomInvitePayload>
/**
 * Model MessageReaction
 * 
 */
export type MessageReaction = $Result.DefaultSelection<Prisma.$MessageReactionPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model StatusAsset
 * 
 */
export type StatusAsset = $Result.DefaultSelection<Prisma.$StatusAssetPayload>
/**
 * Model StatusKey
 * 
 */
export type StatusKey = $Result.DefaultSelection<Prisma.$StatusKeyPayload>
/**
 * Model StatusView
 * 
 */
export type StatusView = $Result.DefaultSelection<Prisma.$StatusViewPayload>
/**
 * Model StatusReaction
 * 
 */
export type StatusReaction = $Result.DefaultSelection<Prisma.$StatusReactionPayload>
/**
 * Model Bot
 * 
 */
export type Bot = $Result.DefaultSelection<Prisma.$BotPayload>
/**
 * Model BotInstall
 * 
 */
export type BotInstall = $Result.DefaultSelection<Prisma.$BotInstallPayload>
/**
 * Model BotEventLog
 * 
 */
export type BotEventLog = $Result.DefaultSelection<Prisma.$BotEventLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AutoResponderMode: {
  off: 'off',
  dm: 'dm',
  mention: 'mention',
  all: 'all'
};

export type AutoResponderMode = (typeof AutoResponderMode)[keyof typeof AutoResponderMode]


export const Plan: {
  FREE: 'FREE',
  PREMIUM: 'PREMIUM'
};

export type Plan = (typeof Plan)[keyof typeof Plan]


export const AutoTranslateMode: {
  off: 'off',
  tagged: 'tagged',
  all: 'all'
};

export type AutoTranslateMode = (typeof AutoTranslateMode)[keyof typeof AutoTranslateMode]


export const AIAssistantMode: {
  off: 'off',
  mention: 'mention',
  always: 'always'
};

export type AIAssistantMode = (typeof AIAssistantMode)[keyof typeof AIAssistantMode]


export const RoomRole: {
  MEMBER: 'MEMBER',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN'
};

export type RoomRole = (typeof RoomRole)[keyof typeof RoomRole]


export const AttachmentKind: {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE',
  STICKER: 'STICKER',
  GIF: 'GIF'
};

export type AttachmentKind = (typeof AttachmentKind)[keyof typeof AttachmentKind]


export const StatusAudience: {
  CONTACTS: 'CONTACTS',
  MUTUALS: 'MUTUALS',
  CUSTOM: 'CUSTOM'
};

export type StatusAudience = (typeof StatusAudience)[keyof typeof StatusAudience]


export const StatusAssetKind: {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  GIF: 'GIF',
  STICKER: 'STICKER',
  FILE: 'FILE'
};

export type StatusAssetKind = (typeof StatusAssetKind)[keyof typeof StatusAssetKind]


export const ContentScope: {
  COMMANDS: 'COMMANDS',
  MENTIONS: 'MENTIONS',
  ALL: 'ALL'
};

export type ContentScope = (typeof ContentScope)[keyof typeof ContentScope]

}

export type AutoResponderMode = $Enums.AutoResponderMode

export const AutoResponderMode: typeof $Enums.AutoResponderMode

export type Plan = $Enums.Plan

export const Plan: typeof $Enums.Plan

export type AutoTranslateMode = $Enums.AutoTranslateMode

export const AutoTranslateMode: typeof $Enums.AutoTranslateMode

export type AIAssistantMode = $Enums.AIAssistantMode

export const AIAssistantMode: typeof $Enums.AIAssistantMode

export type RoomRole = $Enums.RoomRole

export const RoomRole: typeof $Enums.RoomRole

export type AttachmentKind = $Enums.AttachmentKind

export const AttachmentKind: typeof $Enums.AttachmentKind

export type StatusAudience = $Enums.StatusAudience

export const StatusAudience: typeof $Enums.StatusAudience

export type StatusAssetKind = $Enums.StatusAssetKind

export const StatusAssetKind: typeof $Enums.StatusAssetKind

export type ContentScope = $Enums.ContentScope

export const ContentScope: typeof $Enums.ContentScope

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.participant`: Exposes CRUD operations for the **Participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participants
    * const participants = await prisma.participant.findMany()
    * ```
    */
  get participant(): Prisma.ParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scheduledMessage`: Exposes CRUD operations for the **ScheduledMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduledMessages
    * const scheduledMessages = await prisma.scheduledMessage.findMany()
    * ```
    */
  get scheduledMessage(): Prisma.ScheduledMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageKey`: Exposes CRUD operations for the **MessageKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageKeys
    * const messageKeys = await prisma.messageKey.findMany()
    * ```
    */
  get messageKey(): Prisma.MessageKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageAttachment`: Exposes CRUD operations for the **MessageAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageAttachments
    * const messageAttachments = await prisma.messageAttachment.findMany()
    * ```
    */
  get messageAttachment(): Prisma.MessageAttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.randomChatRoom`: Exposes CRUD operations for the **RandomChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RandomChatRooms
    * const randomChatRooms = await prisma.randomChatRoom.findMany()
    * ```
    */
  get randomChatRoom(): Prisma.RandomChatRoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **Device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.DeviceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.provisionLink`: Exposes CRUD operations for the **ProvisionLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProvisionLinks
    * const provisionLinks = await prisma.provisionLink.findMany()
    * ```
    */
  get provisionLink(): Prisma.ProvisionLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageSessionKey`: Exposes CRUD operations for the **MessageSessionKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageSessionKeys
    * const messageSessionKeys = await prisma.messageSessionKey.findMany()
    * ```
    */
  get messageSessionKey(): Prisma.MessageSessionKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatRoomInvite`: Exposes CRUD operations for the **ChatRoomInvite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRoomInvites
    * const chatRoomInvites = await prisma.chatRoomInvite.findMany()
    * ```
    */
  get chatRoomInvite(): Prisma.ChatRoomInviteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageReaction`: Exposes CRUD operations for the **MessageReaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageReactions
    * const messageReactions = await prisma.messageReaction.findMany()
    * ```
    */
  get messageReaction(): Prisma.MessageReactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusAsset`: Exposes CRUD operations for the **StatusAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusAssets
    * const statusAssets = await prisma.statusAsset.findMany()
    * ```
    */
  get statusAsset(): Prisma.StatusAssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusKey`: Exposes CRUD operations for the **StatusKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusKeys
    * const statusKeys = await prisma.statusKey.findMany()
    * ```
    */
  get statusKey(): Prisma.StatusKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusView`: Exposes CRUD operations for the **StatusView** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusViews
    * const statusViews = await prisma.statusView.findMany()
    * ```
    */
  get statusView(): Prisma.StatusViewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusReaction`: Exposes CRUD operations for the **StatusReaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusReactions
    * const statusReactions = await prisma.statusReaction.findMany()
    * ```
    */
  get statusReaction(): Prisma.StatusReactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bot`: Exposes CRUD operations for the **Bot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bots
    * const bots = await prisma.bot.findMany()
    * ```
    */
  get bot(): Prisma.BotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.botInstall`: Exposes CRUD operations for the **BotInstall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BotInstalls
    * const botInstalls = await prisma.botInstall.findMany()
    * ```
    */
  get botInstall(): Prisma.BotInstallDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.botEventLog`: Exposes CRUD operations for the **BotEventLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BotEventLogs
    * const botEventLogs = await prisma.botEventLog.findMany()
    * ```
    */
  get botEventLog(): Prisma.BotEventLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ChatRoom: 'ChatRoom',
    Participant: 'Participant',
    Message: 'Message',
    ScheduledMessage: 'ScheduledMessage',
    MessageKey: 'MessageKey',
    MessageAttachment: 'MessageAttachment',
    RandomChatRoom: 'RandomChatRoom',
    Contact: 'Contact',
    Report: 'Report',
    AuditLog: 'AuditLog',
    Device: 'Device',
    ProvisionLink: 'ProvisionLink',
    MessageSessionKey: 'MessageSessionKey',
    ChatRoomInvite: 'ChatRoomInvite',
    MessageReaction: 'MessageReaction',
    Status: 'Status',
    StatusAsset: 'StatusAsset',
    StatusKey: 'StatusKey',
    StatusView: 'StatusView',
    StatusReaction: 'StatusReaction',
    Bot: 'Bot',
    BotInstall: 'BotInstall',
    BotEventLog: 'BotEventLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "chatRoom" | "participant" | "message" | "scheduledMessage" | "messageKey" | "messageAttachment" | "randomChatRoom" | "contact" | "report" | "auditLog" | "device" | "provisionLink" | "messageSessionKey" | "chatRoomInvite" | "messageReaction" | "status" | "statusAsset" | "statusKey" | "statusView" | "statusReaction" | "bot" | "botInstall" | "botEventLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatRoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      Participant: {
        payload: Prisma.$ParticipantPayload<ExtArgs>
        fields: Prisma.ParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          findFirst: {
            args: Prisma.ParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          findMany: {
            args: Prisma.ParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
          }
          create: {
            args: Prisma.ParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          createMany: {
            args: Prisma.ParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
          }
          delete: {
            args: Prisma.ParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          update: {
            args: Prisma.ParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>[]
          }
          upsert: {
            args: Prisma.ParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantPayload>
          }
          aggregate: {
            args: Prisma.ParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParticipant>
          }
          groupBy: {
            args: Prisma.ParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ParticipantCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      ScheduledMessage: {
        payload: Prisma.$ScheduledMessagePayload<ExtArgs>
        fields: Prisma.ScheduledMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduledMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduledMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          findFirst: {
            args: Prisma.ScheduledMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduledMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          findMany: {
            args: Prisma.ScheduledMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>[]
          }
          create: {
            args: Prisma.ScheduledMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          createMany: {
            args: Prisma.ScheduledMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduledMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>[]
          }
          delete: {
            args: Prisma.ScheduledMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          update: {
            args: Prisma.ScheduledMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          deleteMany: {
            args: Prisma.ScheduledMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduledMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduledMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>[]
          }
          upsert: {
            args: Prisma.ScheduledMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduledMessagePayload>
          }
          aggregate: {
            args: Prisma.ScheduledMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduledMessage>
          }
          groupBy: {
            args: Prisma.ScheduledMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduledMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduledMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduledMessageCountAggregateOutputType> | number
          }
        }
      }
      MessageKey: {
        payload: Prisma.$MessageKeyPayload<ExtArgs>
        fields: Prisma.MessageKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          findFirst: {
            args: Prisma.MessageKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          findMany: {
            args: Prisma.MessageKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>[]
          }
          create: {
            args: Prisma.MessageKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          createMany: {
            args: Prisma.MessageKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>[]
          }
          delete: {
            args: Prisma.MessageKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          update: {
            args: Prisma.MessageKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          deleteMany: {
            args: Prisma.MessageKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>[]
          }
          upsert: {
            args: Prisma.MessageKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageKeyPayload>
          }
          aggregate: {
            args: Prisma.MessageKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageKey>
          }
          groupBy: {
            args: Prisma.MessageKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageKeyCountArgs<ExtArgs>
            result: $Utils.Optional<MessageKeyCountAggregateOutputType> | number
          }
        }
      }
      MessageAttachment: {
        payload: Prisma.$MessageAttachmentPayload<ExtArgs>
        fields: Prisma.MessageAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          findFirst: {
            args: Prisma.MessageAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          findMany: {
            args: Prisma.MessageAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>[]
          }
          create: {
            args: Prisma.MessageAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          createMany: {
            args: Prisma.MessageAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageAttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>[]
          }
          delete: {
            args: Prisma.MessageAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          update: {
            args: Prisma.MessageAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.MessageAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageAttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>[]
          }
          upsert: {
            args: Prisma.MessageAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageAttachmentPayload>
          }
          aggregate: {
            args: Prisma.MessageAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageAttachment>
          }
          groupBy: {
            args: Prisma.MessageAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<MessageAttachmentCountAggregateOutputType> | number
          }
        }
      }
      RandomChatRoom: {
        payload: Prisma.$RandomChatRoomPayload<ExtArgs>
        fields: Prisma.RandomChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RandomChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RandomChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          findFirst: {
            args: Prisma.RandomChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RandomChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          findMany: {
            args: Prisma.RandomChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>[]
          }
          create: {
            args: Prisma.RandomChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          createMany: {
            args: Prisma.RandomChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RandomChatRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>[]
          }
          delete: {
            args: Prisma.RandomChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          update: {
            args: Prisma.RandomChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.RandomChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RandomChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RandomChatRoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>[]
          }
          upsert: {
            args: Prisma.RandomChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RandomChatRoomPayload>
          }
          aggregate: {
            args: Prisma.RandomChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRandomChatRoom>
          }
          groupBy: {
            args: Prisma.RandomChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RandomChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RandomChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<RandomChatRoomCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Device: {
        payload: Prisma.$DevicePayload<ExtArgs>
        fields: Prisma.DeviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findFirst: {
            args: Prisma.DeviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          findMany: {
            args: Prisma.DeviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          create: {
            args: Prisma.DeviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          createMany: {
            args: Prisma.DeviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          delete: {
            args: Prisma.DeviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          update: {
            args: Prisma.DeviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          deleteMany: {
            args: Prisma.DeviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>[]
          }
          upsert: {
            args: Prisma.DeviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DevicePayload>
          }
          aggregate: {
            args: Prisma.DeviceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDevice>
          }
          groupBy: {
            args: Prisma.DeviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceCountAggregateOutputType> | number
          }
        }
      }
      ProvisionLink: {
        payload: Prisma.$ProvisionLinkPayload<ExtArgs>
        fields: Prisma.ProvisionLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProvisionLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProvisionLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          findFirst: {
            args: Prisma.ProvisionLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProvisionLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          findMany: {
            args: Prisma.ProvisionLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>[]
          }
          create: {
            args: Prisma.ProvisionLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          createMany: {
            args: Prisma.ProvisionLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProvisionLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>[]
          }
          delete: {
            args: Prisma.ProvisionLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          update: {
            args: Prisma.ProvisionLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          deleteMany: {
            args: Prisma.ProvisionLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProvisionLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProvisionLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>[]
          }
          upsert: {
            args: Prisma.ProvisionLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProvisionLinkPayload>
          }
          aggregate: {
            args: Prisma.ProvisionLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvisionLink>
          }
          groupBy: {
            args: Prisma.ProvisionLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProvisionLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProvisionLinkCountArgs<ExtArgs>
            result: $Utils.Optional<ProvisionLinkCountAggregateOutputType> | number
          }
        }
      }
      MessageSessionKey: {
        payload: Prisma.$MessageSessionKeyPayload<ExtArgs>
        fields: Prisma.MessageSessionKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageSessionKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageSessionKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          findFirst: {
            args: Prisma.MessageSessionKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageSessionKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          findMany: {
            args: Prisma.MessageSessionKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>[]
          }
          create: {
            args: Prisma.MessageSessionKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          createMany: {
            args: Prisma.MessageSessionKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageSessionKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>[]
          }
          delete: {
            args: Prisma.MessageSessionKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          update: {
            args: Prisma.MessageSessionKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          deleteMany: {
            args: Prisma.MessageSessionKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageSessionKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageSessionKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>[]
          }
          upsert: {
            args: Prisma.MessageSessionKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageSessionKeyPayload>
          }
          aggregate: {
            args: Prisma.MessageSessionKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageSessionKey>
          }
          groupBy: {
            args: Prisma.MessageSessionKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageSessionKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageSessionKeyCountArgs<ExtArgs>
            result: $Utils.Optional<MessageSessionKeyCountAggregateOutputType> | number
          }
        }
      }
      ChatRoomInvite: {
        payload: Prisma.$ChatRoomInvitePayload<ExtArgs>
        fields: Prisma.ChatRoomInviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomInviteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomInviteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          findFirst: {
            args: Prisma.ChatRoomInviteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomInviteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          findMany: {
            args: Prisma.ChatRoomInviteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>[]
          }
          create: {
            args: Prisma.ChatRoomInviteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          createMany: {
            args: Prisma.ChatRoomInviteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatRoomInviteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>[]
          }
          delete: {
            args: Prisma.ChatRoomInviteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          update: {
            args: Prisma.ChatRoomInviteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomInviteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomInviteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatRoomInviteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>[]
          }
          upsert: {
            args: Prisma.ChatRoomInviteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomInvitePayload>
          }
          aggregate: {
            args: Prisma.ChatRoomInviteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoomInvite>
          }
          groupBy: {
            args: Prisma.ChatRoomInviteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomInviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomInviteCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomInviteCountAggregateOutputType> | number
          }
        }
      }
      MessageReaction: {
        payload: Prisma.$MessageReactionPayload<ExtArgs>
        fields: Prisma.MessageReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          findFirst: {
            args: Prisma.MessageReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          findMany: {
            args: Prisma.MessageReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
          }
          create: {
            args: Prisma.MessageReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          createMany: {
            args: Prisma.MessageReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
          }
          delete: {
            args: Prisma.MessageReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          update: {
            args: Prisma.MessageReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          deleteMany: {
            args: Prisma.MessageReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageReactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>[]
          }
          upsert: {
            args: Prisma.MessageReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageReactionPayload>
          }
          aggregate: {
            args: Prisma.MessageReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageReaction>
          }
          groupBy: {
            args: Prisma.MessageReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageReactionCountArgs<ExtArgs>
            result: $Utils.Optional<MessageReactionCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      StatusAsset: {
        payload: Prisma.$StatusAssetPayload<ExtArgs>
        fields: Prisma.StatusAssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusAssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusAssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          findFirst: {
            args: Prisma.StatusAssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusAssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          findMany: {
            args: Prisma.StatusAssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>[]
          }
          create: {
            args: Prisma.StatusAssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          createMany: {
            args: Prisma.StatusAssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusAssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>[]
          }
          delete: {
            args: Prisma.StatusAssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          update: {
            args: Prisma.StatusAssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          deleteMany: {
            args: Prisma.StatusAssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusAssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusAssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>[]
          }
          upsert: {
            args: Prisma.StatusAssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusAssetPayload>
          }
          aggregate: {
            args: Prisma.StatusAssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusAsset>
          }
          groupBy: {
            args: Prisma.StatusAssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusAssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusAssetCountArgs<ExtArgs>
            result: $Utils.Optional<StatusAssetCountAggregateOutputType> | number
          }
        }
      }
      StatusKey: {
        payload: Prisma.$StatusKeyPayload<ExtArgs>
        fields: Prisma.StatusKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          findFirst: {
            args: Prisma.StatusKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          findMany: {
            args: Prisma.StatusKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>[]
          }
          create: {
            args: Prisma.StatusKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          createMany: {
            args: Prisma.StatusKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>[]
          }
          delete: {
            args: Prisma.StatusKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          update: {
            args: Prisma.StatusKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          deleteMany: {
            args: Prisma.StatusKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>[]
          }
          upsert: {
            args: Prisma.StatusKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusKeyPayload>
          }
          aggregate: {
            args: Prisma.StatusKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusKey>
          }
          groupBy: {
            args: Prisma.StatusKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusKeyCountArgs<ExtArgs>
            result: $Utils.Optional<StatusKeyCountAggregateOutputType> | number
          }
        }
      }
      StatusView: {
        payload: Prisma.$StatusViewPayload<ExtArgs>
        fields: Prisma.StatusViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusViewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusViewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          findFirst: {
            args: Prisma.StatusViewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusViewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          findMany: {
            args: Prisma.StatusViewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>[]
          }
          create: {
            args: Prisma.StatusViewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          createMany: {
            args: Prisma.StatusViewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusViewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>[]
          }
          delete: {
            args: Prisma.StatusViewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          update: {
            args: Prisma.StatusViewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          deleteMany: {
            args: Prisma.StatusViewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusViewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusViewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>[]
          }
          upsert: {
            args: Prisma.StatusViewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusViewPayload>
          }
          aggregate: {
            args: Prisma.StatusViewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusView>
          }
          groupBy: {
            args: Prisma.StatusViewGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusViewCountArgs<ExtArgs>
            result: $Utils.Optional<StatusViewCountAggregateOutputType> | number
          }
        }
      }
      StatusReaction: {
        payload: Prisma.$StatusReactionPayload<ExtArgs>
        fields: Prisma.StatusReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          findFirst: {
            args: Prisma.StatusReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          findMany: {
            args: Prisma.StatusReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>[]
          }
          create: {
            args: Prisma.StatusReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          createMany: {
            args: Prisma.StatusReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>[]
          }
          delete: {
            args: Prisma.StatusReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          update: {
            args: Prisma.StatusReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          deleteMany: {
            args: Prisma.StatusReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StatusReactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>[]
          }
          upsert: {
            args: Prisma.StatusReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusReactionPayload>
          }
          aggregate: {
            args: Prisma.StatusReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusReaction>
          }
          groupBy: {
            args: Prisma.StatusReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusReactionCountArgs<ExtArgs>
            result: $Utils.Optional<StatusReactionCountAggregateOutputType> | number
          }
        }
      }
      Bot: {
        payload: Prisma.$BotPayload<ExtArgs>
        fields: Prisma.BotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          findFirst: {
            args: Prisma.BotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          findMany: {
            args: Prisma.BotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>[]
          }
          create: {
            args: Prisma.BotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          createMany: {
            args: Prisma.BotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>[]
          }
          delete: {
            args: Prisma.BotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          update: {
            args: Prisma.BotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          deleteMany: {
            args: Prisma.BotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>[]
          }
          upsert: {
            args: Prisma.BotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotPayload>
          }
          aggregate: {
            args: Prisma.BotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBot>
          }
          groupBy: {
            args: Prisma.BotGroupByArgs<ExtArgs>
            result: $Utils.Optional<BotGroupByOutputType>[]
          }
          count: {
            args: Prisma.BotCountArgs<ExtArgs>
            result: $Utils.Optional<BotCountAggregateOutputType> | number
          }
        }
      }
      BotInstall: {
        payload: Prisma.$BotInstallPayload<ExtArgs>
        fields: Prisma.BotInstallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BotInstallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BotInstallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          findFirst: {
            args: Prisma.BotInstallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BotInstallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          findMany: {
            args: Prisma.BotInstallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>[]
          }
          create: {
            args: Prisma.BotInstallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          createMany: {
            args: Prisma.BotInstallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BotInstallCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>[]
          }
          delete: {
            args: Prisma.BotInstallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          update: {
            args: Prisma.BotInstallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          deleteMany: {
            args: Prisma.BotInstallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BotInstallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BotInstallUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>[]
          }
          upsert: {
            args: Prisma.BotInstallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotInstallPayload>
          }
          aggregate: {
            args: Prisma.BotInstallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBotInstall>
          }
          groupBy: {
            args: Prisma.BotInstallGroupByArgs<ExtArgs>
            result: $Utils.Optional<BotInstallGroupByOutputType>[]
          }
          count: {
            args: Prisma.BotInstallCountArgs<ExtArgs>
            result: $Utils.Optional<BotInstallCountAggregateOutputType> | number
          }
        }
      }
      BotEventLog: {
        payload: Prisma.$BotEventLogPayload<ExtArgs>
        fields: Prisma.BotEventLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BotEventLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BotEventLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          findFirst: {
            args: Prisma.BotEventLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BotEventLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          findMany: {
            args: Prisma.BotEventLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>[]
          }
          create: {
            args: Prisma.BotEventLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          createMany: {
            args: Prisma.BotEventLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BotEventLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>[]
          }
          delete: {
            args: Prisma.BotEventLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          update: {
            args: Prisma.BotEventLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          deleteMany: {
            args: Prisma.BotEventLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BotEventLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BotEventLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>[]
          }
          upsert: {
            args: Prisma.BotEventLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BotEventLogPayload>
          }
          aggregate: {
            args: Prisma.BotEventLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBotEventLog>
          }
          groupBy: {
            args: Prisma.BotEventLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<BotEventLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BotEventLogCountArgs<ExtArgs>
            result: $Utils.Optional<BotEventLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    chatRoom?: ChatRoomOmit
    participant?: ParticipantOmit
    message?: MessageOmit
    scheduledMessage?: ScheduledMessageOmit
    messageKey?: MessageKeyOmit
    messageAttachment?: MessageAttachmentOmit
    randomChatRoom?: RandomChatRoomOmit
    contact?: ContactOmit
    report?: ReportOmit
    auditLog?: AuditLogOmit
    device?: DeviceOmit
    provisionLink?: ProvisionLinkOmit
    messageSessionKey?: MessageSessionKeyOmit
    chatRoomInvite?: ChatRoomInviteOmit
    messageReaction?: MessageReactionOmit
    status?: StatusOmit
    statusAsset?: StatusAssetOmit
    statusKey?: StatusKeyOmit
    statusView?: StatusViewOmit
    statusReaction?: StatusReactionOmit
    bot?: BotOmit
    botInstall?: BotInstallOmit
    botEventLog?: BotEventLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    messages: number
    participants: number
    reports: number
    randomChatRooms: number
    readMessages: number
    contactsOwned: number
    contactsSaved: number
    auditLogs: number
    messageKeys: number
    devices: number
    deviceRevocations: number
    createdInvites: number
    messageReactions: number
    statusesAuthored: number
    statusKeys: number
    statusViews: number
    statusReactions: number
    botsOwned: number
    botsAsService: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    participants?: boolean | UserCountOutputTypeCountParticipantsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    randomChatRooms?: boolean | UserCountOutputTypeCountRandomChatRoomsArgs
    readMessages?: boolean | UserCountOutputTypeCountReadMessagesArgs
    contactsOwned?: boolean | UserCountOutputTypeCountContactsOwnedArgs
    contactsSaved?: boolean | UserCountOutputTypeCountContactsSavedArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    messageKeys?: boolean | UserCountOutputTypeCountMessageKeysArgs
    devices?: boolean | UserCountOutputTypeCountDevicesArgs
    deviceRevocations?: boolean | UserCountOutputTypeCountDeviceRevocationsArgs
    createdInvites?: boolean | UserCountOutputTypeCountCreatedInvitesArgs
    messageReactions?: boolean | UserCountOutputTypeCountMessageReactionsArgs
    statusesAuthored?: boolean | UserCountOutputTypeCountStatusesAuthoredArgs
    statusKeys?: boolean | UserCountOutputTypeCountStatusKeysArgs
    statusViews?: boolean | UserCountOutputTypeCountStatusViewsArgs
    statusReactions?: boolean | UserCountOutputTypeCountStatusReactionsArgs
    botsOwned?: boolean | UserCountOutputTypeCountBotsOwnedArgs
    botsAsService?: boolean | UserCountOutputTypeCountBotsAsServiceArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRandomChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RandomChatRoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReadMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsSavedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageKeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDevicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDeviceRevocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomInviteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusesAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusKeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusViewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusReactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBotsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBotsAsServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    participants: number
    messages: number
    invites: number
    botInstalls: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ChatRoomCountOutputTypeCountParticipantsArgs
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
    invites?: boolean | ChatRoomCountOutputTypeCountInvitesArgs
    botInstalls?: boolean | ChatRoomCountOutputTypeCountBotInstallsArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantWhereInput
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomInviteWhereInput
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountBotInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotInstallWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    keys: number
    attachments: number
    readBy: number
    reports: number
    reactions: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keys?: boolean | MessageCountOutputTypeCountKeysArgs
    attachments?: boolean | MessageCountOutputTypeCountAttachmentsArgs
    readBy?: boolean | MessageCountOutputTypeCountReadByArgs
    reports?: boolean | MessageCountOutputTypeCountReportsArgs
    reactions?: boolean | MessageCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageKeyWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageAttachmentWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReadByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReactionWhereInput
  }


  /**
   * Count Type RandomChatRoomCountOutputType
   */

  export type RandomChatRoomCountOutputType = {
    participants: number
    messages: number
  }

  export type RandomChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | RandomChatRoomCountOutputTypeCountParticipantsArgs
    messages?: boolean | RandomChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * RandomChatRoomCountOutputType without action
   */
  export type RandomChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoomCountOutputType
     */
    select?: RandomChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RandomChatRoomCountOutputType without action
   */
  export type RandomChatRoomCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * RandomChatRoomCountOutputType without action
   */
  export type RandomChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    assets: number
    keys: number
    views: number
    reactions: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | StatusCountOutputTypeCountAssetsArgs
    keys?: boolean | StatusCountOutputTypeCountKeysArgs
    views?: boolean | StatusCountOutputTypeCountViewsArgs
    reactions?: boolean | StatusCountOutputTypeCountReactionsArgs
  }

  // Custom InputTypes
  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusAssetWhereInput
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusKeyWhereInput
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusViewWhereInput
  }

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusReactionWhereInput
  }


  /**
   * Count Type BotCountOutputType
   */

  export type BotCountOutputType = {
    installs: number
  }

  export type BotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    installs?: boolean | BotCountOutputTypeCountInstallsArgs
  }

  // Custom InputTypes
  /**
   * BotCountOutputType without action
   */
  export type BotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotCountOutputType
     */
    select?: BotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BotCountOutputType without action
   */
  export type BotCountOutputTypeCountInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotInstallWhereInput
  }


  /**
   * Count Type BotInstallCountOutputType
   */

  export type BotInstallCountOutputType = {
    events: number
  }

  export type BotInstallCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | BotInstallCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * BotInstallCountOutputType without action
   */
  export type BotInstallCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstallCountOutputType
     */
    select?: BotInstallCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BotInstallCountOutputType without action
   */
  export type BotInstallCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotEventLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    autoResponderCooldownSec: number | null
    autoDeleteSeconds: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    autoResponderCooldownSec: number | null
    autoDeleteSeconds: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    preferredLanguage: string | null
    allowExplicitContent: boolean | null
    showOriginalWithTranslation: boolean | null
    role: string | null
    enableAIResponder: boolean | null
    enableSmartReplies: boolean | null
    autoResponderMode: $Enums.AutoResponderMode | null
    autoResponderCooldownSec: number | null
    autoResponderActiveUntil: Date | null
    autoResponderSignature: string | null
    publicKey: string | null
    privateKey: string | null
    autoDeleteSeconds: number | null
    showReadReceipts: boolean | null
    avatarUrl: string | null
    emojiTag: string | null
    plan: $Enums.Plan | null
    messageTone: string | null
    ringtone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    preferredLanguage: string | null
    allowExplicitContent: boolean | null
    showOriginalWithTranslation: boolean | null
    role: string | null
    enableAIResponder: boolean | null
    enableSmartReplies: boolean | null
    autoResponderMode: $Enums.AutoResponderMode | null
    autoResponderCooldownSec: number | null
    autoResponderActiveUntil: Date | null
    autoResponderSignature: string | null
    publicKey: string | null
    privateKey: string | null
    autoDeleteSeconds: number | null
    showReadReceipts: boolean | null
    avatarUrl: string | null
    emojiTag: string | null
    plan: $Enums.Plan | null
    messageTone: string | null
    ringtone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    phoneNumber: number
    preferredLanguage: number
    allowExplicitContent: number
    showOriginalWithTranslation: number
    role: number
    enableAIResponder: number
    enableSmartReplies: number
    autoResponderMode: number
    autoResponderCooldownSec: number
    autoResponderActiveUntil: number
    autoResponderSignature: number
    publicKey: number
    privateKey: number
    autoDeleteSeconds: number
    showReadReceipts: number
    avatarUrl: number
    emojiTag: number
    plan: number
    messageTone: number
    ringtone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    autoResponderCooldownSec?: true
    autoDeleteSeconds?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    autoResponderCooldownSec?: true
    autoDeleteSeconds?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    phoneNumber?: true
    preferredLanguage?: true
    allowExplicitContent?: true
    showOriginalWithTranslation?: true
    role?: true
    enableAIResponder?: true
    enableSmartReplies?: true
    autoResponderMode?: true
    autoResponderCooldownSec?: true
    autoResponderActiveUntil?: true
    autoResponderSignature?: true
    publicKey?: true
    privateKey?: true
    autoDeleteSeconds?: true
    showReadReceipts?: true
    avatarUrl?: true
    emojiTag?: true
    plan?: true
    messageTone?: true
    ringtone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    phoneNumber?: true
    preferredLanguage?: true
    allowExplicitContent?: true
    showOriginalWithTranslation?: true
    role?: true
    enableAIResponder?: true
    enableSmartReplies?: true
    autoResponderMode?: true
    autoResponderCooldownSec?: true
    autoResponderActiveUntil?: true
    autoResponderSignature?: true
    publicKey?: true
    privateKey?: true
    autoDeleteSeconds?: true
    showReadReceipts?: true
    avatarUrl?: true
    emojiTag?: true
    plan?: true
    messageTone?: true
    ringtone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    phoneNumber?: true
    preferredLanguage?: true
    allowExplicitContent?: true
    showOriginalWithTranslation?: true
    role?: true
    enableAIResponder?: true
    enableSmartReplies?: true
    autoResponderMode?: true
    autoResponderCooldownSec?: true
    autoResponderActiveUntil?: true
    autoResponderSignature?: true
    publicKey?: true
    privateKey?: true
    autoDeleteSeconds?: true
    showReadReceipts?: true
    avatarUrl?: true
    emojiTag?: true
    plan?: true
    messageTone?: true
    ringtone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string | null
    password: string
    phoneNumber: string | null
    preferredLanguage: string
    allowExplicitContent: boolean
    showOriginalWithTranslation: boolean
    role: string
    enableAIResponder: boolean
    enableSmartReplies: boolean
    autoResponderMode: $Enums.AutoResponderMode
    autoResponderCooldownSec: number
    autoResponderActiveUntil: Date | null
    autoResponderSignature: string | null
    publicKey: string | null
    privateKey: string | null
    autoDeleteSeconds: number | null
    showReadReceipts: boolean
    avatarUrl: string | null
    emojiTag: string | null
    plan: $Enums.Plan
    messageTone: string | null
    ringtone: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    preferredLanguage?: boolean
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: boolean
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: boolean
    autoResponderCooldownSec?: boolean
    autoResponderActiveUntil?: boolean
    autoResponderSignature?: boolean
    publicKey?: boolean
    privateKey?: boolean
    autoDeleteSeconds?: boolean
    showReadReceipts?: boolean
    avatarUrl?: boolean
    emojiTag?: boolean
    plan?: boolean
    messageTone?: boolean
    ringtone?: boolean
    messages?: boolean | User$messagesArgs<ExtArgs>
    participants?: boolean | User$participantsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    randomChatRooms?: boolean | User$randomChatRoomsArgs<ExtArgs>
    readMessages?: boolean | User$readMessagesArgs<ExtArgs>
    contactsOwned?: boolean | User$contactsOwnedArgs<ExtArgs>
    contactsSaved?: boolean | User$contactsSavedArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    messageKeys?: boolean | User$messageKeysArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    deviceRevocations?: boolean | User$deviceRevocationsArgs<ExtArgs>
    createdInvites?: boolean | User$createdInvitesArgs<ExtArgs>
    messageReactions?: boolean | User$messageReactionsArgs<ExtArgs>
    statusesAuthored?: boolean | User$statusesAuthoredArgs<ExtArgs>
    statusKeys?: boolean | User$statusKeysArgs<ExtArgs>
    statusViews?: boolean | User$statusViewsArgs<ExtArgs>
    statusReactions?: boolean | User$statusReactionsArgs<ExtArgs>
    botsOwned?: boolean | User$botsOwnedArgs<ExtArgs>
    botsAsService?: boolean | User$botsAsServiceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    preferredLanguage?: boolean
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: boolean
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: boolean
    autoResponderCooldownSec?: boolean
    autoResponderActiveUntil?: boolean
    autoResponderSignature?: boolean
    publicKey?: boolean
    privateKey?: boolean
    autoDeleteSeconds?: boolean
    showReadReceipts?: boolean
    avatarUrl?: boolean
    emojiTag?: boolean
    plan?: boolean
    messageTone?: boolean
    ringtone?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    preferredLanguage?: boolean
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: boolean
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: boolean
    autoResponderCooldownSec?: boolean
    autoResponderActiveUntil?: boolean
    autoResponderSignature?: boolean
    publicKey?: boolean
    privateKey?: boolean
    autoDeleteSeconds?: boolean
    showReadReceipts?: boolean
    avatarUrl?: boolean
    emojiTag?: boolean
    plan?: boolean
    messageTone?: boolean
    ringtone?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    preferredLanguage?: boolean
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: boolean
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: boolean
    autoResponderCooldownSec?: boolean
    autoResponderActiveUntil?: boolean
    autoResponderSignature?: boolean
    publicKey?: boolean
    privateKey?: boolean
    autoDeleteSeconds?: boolean
    showReadReceipts?: boolean
    avatarUrl?: boolean
    emojiTag?: boolean
    plan?: boolean
    messageTone?: boolean
    ringtone?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "phoneNumber" | "preferredLanguage" | "allowExplicitContent" | "showOriginalWithTranslation" | "role" | "enableAIResponder" | "enableSmartReplies" | "autoResponderMode" | "autoResponderCooldownSec" | "autoResponderActiveUntil" | "autoResponderSignature" | "publicKey" | "privateKey" | "autoDeleteSeconds" | "showReadReceipts" | "avatarUrl" | "emojiTag" | "plan" | "messageTone" | "ringtone", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | User$messagesArgs<ExtArgs>
    participants?: boolean | User$participantsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    randomChatRooms?: boolean | User$randomChatRoomsArgs<ExtArgs>
    readMessages?: boolean | User$readMessagesArgs<ExtArgs>
    contactsOwned?: boolean | User$contactsOwnedArgs<ExtArgs>
    contactsSaved?: boolean | User$contactsSavedArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    messageKeys?: boolean | User$messageKeysArgs<ExtArgs>
    devices?: boolean | User$devicesArgs<ExtArgs>
    deviceRevocations?: boolean | User$deviceRevocationsArgs<ExtArgs>
    createdInvites?: boolean | User$createdInvitesArgs<ExtArgs>
    messageReactions?: boolean | User$messageReactionsArgs<ExtArgs>
    statusesAuthored?: boolean | User$statusesAuthoredArgs<ExtArgs>
    statusKeys?: boolean | User$statusKeysArgs<ExtArgs>
    statusViews?: boolean | User$statusViewsArgs<ExtArgs>
    statusReactions?: boolean | User$statusReactionsArgs<ExtArgs>
    botsOwned?: boolean | User$botsOwnedArgs<ExtArgs>
    botsAsService?: boolean | User$botsAsServiceArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      participants: Prisma.$ParticipantPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      randomChatRooms: Prisma.$RandomChatRoomPayload<ExtArgs>[]
      readMessages: Prisma.$MessagePayload<ExtArgs>[]
      contactsOwned: Prisma.$ContactPayload<ExtArgs>[]
      contactsSaved: Prisma.$ContactPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      messageKeys: Prisma.$MessageKeyPayload<ExtArgs>[]
      devices: Prisma.$DevicePayload<ExtArgs>[]
      deviceRevocations: Prisma.$DevicePayload<ExtArgs>[]
      createdInvites: Prisma.$ChatRoomInvitePayload<ExtArgs>[]
      messageReactions: Prisma.$MessageReactionPayload<ExtArgs>[]
      statusesAuthored: Prisma.$StatusPayload<ExtArgs>[]
      statusKeys: Prisma.$StatusKeyPayload<ExtArgs>[]
      statusViews: Prisma.$StatusViewPayload<ExtArgs>[]
      statusReactions: Prisma.$StatusReactionPayload<ExtArgs>[]
      botsOwned: Prisma.$BotPayload<ExtArgs>[]
      botsAsService: Prisma.$BotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string | null
      password: string
      phoneNumber: string | null
      preferredLanguage: string
      allowExplicitContent: boolean
      showOriginalWithTranslation: boolean
      role: string
      enableAIResponder: boolean
      enableSmartReplies: boolean
      autoResponderMode: $Enums.AutoResponderMode
      autoResponderCooldownSec: number
      autoResponderActiveUntil: Date | null
      autoResponderSignature: string | null
      publicKey: string | null
      privateKey: string | null
      autoDeleteSeconds: number | null
      showReadReceipts: boolean
      avatarUrl: string | null
      emojiTag: string | null
      plan: $Enums.Plan
      messageTone: string | null
      ringtone: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends User$participantsArgs<ExtArgs> = {}>(args?: Subset<T, User$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    randomChatRooms<T extends User$randomChatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, User$randomChatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    readMessages<T extends User$readMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$readMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactsOwned<T extends User$contactsOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$contactsOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactsSaved<T extends User$contactsSavedArgs<ExtArgs> = {}>(args?: Subset<T, User$contactsSavedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messageKeys<T extends User$messageKeysArgs<ExtArgs> = {}>(args?: Subset<T, User$messageKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    devices<T extends User$devicesArgs<ExtArgs> = {}>(args?: Subset<T, User$devicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    deviceRevocations<T extends User$deviceRevocationsArgs<ExtArgs> = {}>(args?: Subset<T, User$deviceRevocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdInvites<T extends User$createdInvitesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messageReactions<T extends User$messageReactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$messageReactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusesAuthored<T extends User$statusesAuthoredArgs<ExtArgs> = {}>(args?: Subset<T, User$statusesAuthoredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusKeys<T extends User$statusKeysArgs<ExtArgs> = {}>(args?: Subset<T, User$statusKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusViews<T extends User$statusViewsArgs<ExtArgs> = {}>(args?: Subset<T, User$statusViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusReactions<T extends User$statusReactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$statusReactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    botsOwned<T extends User$botsOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$botsOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    botsAsService<T extends User$botsAsServiceArgs<ExtArgs> = {}>(args?: Subset<T, User$botsAsServiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly preferredLanguage: FieldRef<"User", 'String'>
    readonly allowExplicitContent: FieldRef<"User", 'Boolean'>
    readonly showOriginalWithTranslation: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
    readonly enableAIResponder: FieldRef<"User", 'Boolean'>
    readonly enableSmartReplies: FieldRef<"User", 'Boolean'>
    readonly autoResponderMode: FieldRef<"User", 'AutoResponderMode'>
    readonly autoResponderCooldownSec: FieldRef<"User", 'Int'>
    readonly autoResponderActiveUntil: FieldRef<"User", 'DateTime'>
    readonly autoResponderSignature: FieldRef<"User", 'String'>
    readonly publicKey: FieldRef<"User", 'String'>
    readonly privateKey: FieldRef<"User", 'String'>
    readonly autoDeleteSeconds: FieldRef<"User", 'Int'>
    readonly showReadReceipts: FieldRef<"User", 'Boolean'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly emojiTag: FieldRef<"User", 'String'>
    readonly plan: FieldRef<"User", 'Plan'>
    readonly messageTone: FieldRef<"User", 'String'>
    readonly ringtone: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.participants
   */
  export type User$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    where?: ParticipantWhereInput
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    cursor?: ParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.randomChatRooms
   */
  export type User$randomChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    where?: RandomChatRoomWhereInput
    orderBy?: RandomChatRoomOrderByWithRelationInput | RandomChatRoomOrderByWithRelationInput[]
    cursor?: RandomChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RandomChatRoomScalarFieldEnum | RandomChatRoomScalarFieldEnum[]
  }

  /**
   * User.readMessages
   */
  export type User$readMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.contactsOwned
   */
  export type User$contactsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User.contactsSaved
   */
  export type User$contactsSavedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.messageKeys
   */
  export type User$messageKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    where?: MessageKeyWhereInput
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    cursor?: MessageKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageKeyScalarFieldEnum | MessageKeyScalarFieldEnum[]
  }

  /**
   * User.devices
   */
  export type User$devicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * User.deviceRevocations
   */
  export type User$deviceRevocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    cursor?: DeviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * User.createdInvites
   */
  export type User$createdInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    where?: ChatRoomInviteWhereInput
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    cursor?: ChatRoomInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomInviteScalarFieldEnum | ChatRoomInviteScalarFieldEnum[]
  }

  /**
   * User.messageReactions
   */
  export type User$messageReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    where?: MessageReactionWhereInput
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    cursor?: MessageReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageReactionScalarFieldEnum | MessageReactionScalarFieldEnum[]
  }

  /**
   * User.statusesAuthored
   */
  export type User$statusesAuthoredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    cursor?: StatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * User.statusKeys
   */
  export type User$statusKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    where?: StatusKeyWhereInput
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    cursor?: StatusKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusKeyScalarFieldEnum | StatusKeyScalarFieldEnum[]
  }

  /**
   * User.statusViews
   */
  export type User$statusViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    where?: StatusViewWhereInput
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    cursor?: StatusViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusViewScalarFieldEnum | StatusViewScalarFieldEnum[]
  }

  /**
   * User.statusReactions
   */
  export type User$statusReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    where?: StatusReactionWhereInput
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    cursor?: StatusReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusReactionScalarFieldEnum | StatusReactionScalarFieldEnum[]
  }

  /**
   * User.botsOwned
   */
  export type User$botsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    where?: BotWhereInput
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    cursor?: BotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BotScalarFieldEnum | BotScalarFieldEnum[]
  }

  /**
   * User.botsAsService
   */
  export type User$botsAsServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    where?: BotWhereInput
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    cursor?: BotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BotScalarFieldEnum | BotScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomAvgAggregateOutputType = {
    id: number | null
  }

  export type ChatRoomSumAggregateOutputType = {
    id: number | null
  }

  export type ChatRoomMinAggregateOutputType = {
    id: number | null
    name: string | null
    aiAssistantMode: $Enums.AIAssistantMode | null
    isGroup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    autoTranslateMode: $Enums.AutoTranslateMode | null
    allowOrbitBot: boolean | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
    aiAssistantMode: $Enums.AIAssistantMode | null
    isGroup: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    autoTranslateMode: $Enums.AutoTranslateMode | null
    allowOrbitBot: boolean | null
  }

  export type ChatRoomCountAggregateOutputType = {
    id: number
    name: number
    aiAssistantMode: number
    isGroup: number
    createdAt: number
    updatedAt: number
    autoTranslateMode: number
    allowOrbitBot: number
    _all: number
  }


  export type ChatRoomAvgAggregateInputType = {
    id?: true
  }

  export type ChatRoomSumAggregateInputType = {
    id?: true
  }

  export type ChatRoomMinAggregateInputType = {
    id?: true
    name?: true
    aiAssistantMode?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
    autoTranslateMode?: true
    allowOrbitBot?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    id?: true
    name?: true
    aiAssistantMode?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
    autoTranslateMode?: true
    allowOrbitBot?: true
  }

  export type ChatRoomCountAggregateInputType = {
    id?: true
    name?: true
    aiAssistantMode?: true
    isGroup?: true
    createdAt?: true
    updatedAt?: true
    autoTranslateMode?: true
    allowOrbitBot?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _avg?: ChatRoomAvgAggregateInputType
    _sum?: ChatRoomSumAggregateInputType
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    id: number
    name: string | null
    aiAssistantMode: $Enums.AIAssistantMode
    isGroup: boolean
    createdAt: Date
    updatedAt: Date
    autoTranslateMode: $Enums.AutoTranslateMode
    allowOrbitBot: boolean
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    aiAssistantMode?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autoTranslateMode?: boolean
    allowOrbitBot?: boolean
    participants?: boolean | ChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    invites?: boolean | ChatRoom$invitesArgs<ExtArgs>
    botInstalls?: boolean | ChatRoom$botInstallsArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    aiAssistantMode?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autoTranslateMode?: boolean
    allowOrbitBot?: boolean
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    aiAssistantMode?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autoTranslateMode?: boolean
    allowOrbitBot?: boolean
  }, ExtArgs["result"]["chatRoom"]>

  export type ChatRoomSelectScalar = {
    id?: boolean
    name?: boolean
    aiAssistantMode?: boolean
    isGroup?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    autoTranslateMode?: boolean
    allowOrbitBot?: boolean
  }

  export type ChatRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "aiAssistantMode" | "isGroup" | "createdAt" | "updatedAt" | "autoTranslateMode" | "allowOrbitBot", ExtArgs["result"]["chatRoom"]>
  export type ChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    invites?: boolean | ChatRoom$invitesArgs<ExtArgs>
    botInstalls?: boolean | ChatRoom$botInstallsArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChatRoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      participants: Prisma.$ParticipantPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      invites: Prisma.$ChatRoomInvitePayload<ExtArgs>[]
      botInstalls: Prisma.$BotInstallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      aiAssistantMode: $Enums.AIAssistantMode
      isGroup: boolean
      createdAt: Date
      updatedAt: Date
      autoTranslateMode: $Enums.AutoTranslateMode
      allowOrbitBot: boolean
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomFindUniqueArgs>(args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomFindFirstArgs>(args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomFindManyArgs>(args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends ChatRoomCreateArgs>(args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatRooms.
     * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomCreateManyArgs>(args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRooms and returns the data saved in the database.
     * @param {ChatRoomCreateManyAndReturnArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRooms and only return the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDeleteArgs>(args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomUpdateArgs>(args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomUpdateManyArgs>(args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms and returns the data updated in the database.
     * @param {ChatRoomUpdateManyAndReturnArgs} args - Arguments to update many ChatRooms.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatRooms and only return the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatRoomUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomUpsertArgs>(args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends ChatRoom$participantsArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invites<T extends ChatRoom$invitesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    botInstalls<T extends ChatRoom$botInstallsArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$botInstallsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoom model
   */
  interface ChatRoomFieldRefs {
    readonly id: FieldRef<"ChatRoom", 'Int'>
    readonly name: FieldRef<"ChatRoom", 'String'>
    readonly aiAssistantMode: FieldRef<"ChatRoom", 'AIAssistantMode'>
    readonly isGroup: FieldRef<"ChatRoom", 'Boolean'>
    readonly createdAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly autoTranslateMode: FieldRef<"ChatRoom", 'AutoTranslateMode'>
    readonly allowOrbitBot: FieldRef<"ChatRoom", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }

  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoom createManyAndReturn
   */
  export type ChatRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
    /**
     * Limit how many ChatRooms to update.
     */
    limit?: number
  }

  /**
   * ChatRoom updateManyAndReturn
   */
  export type ChatRoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
    /**
     * Limit how many ChatRooms to update.
     */
    limit?: number
  }

  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }

  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
    /**
     * Limit how many ChatRooms to delete.
     */
    limit?: number
  }

  /**
   * ChatRoom.participants
   */
  export type ChatRoom$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    where?: ParticipantWhereInput
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    cursor?: ParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatRoom.invites
   */
  export type ChatRoom$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    where?: ChatRoomInviteWhereInput
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    cursor?: ChatRoomInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomInviteScalarFieldEnum | ChatRoomInviteScalarFieldEnum[]
  }

  /**
   * ChatRoom.botInstalls
   */
  export type ChatRoom$botInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    where?: BotInstallWhereInput
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    cursor?: BotInstallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BotInstallScalarFieldEnum | BotInstallScalarFieldEnum[]
  }

  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model Participant
   */

  export type AggregateParticipant = {
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  export type ParticipantAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    chatRoomId: number | null
  }

  export type ParticipantSumAggregateOutputType = {
    id: number | null
    userId: number | null
    chatRoomId: number | null
  }

  export type ParticipantMinAggregateOutputType = {
    id: number | null
    userId: number | null
    chatRoomId: number | null
    role: $Enums.RoomRole | null
    joinedAt: Date | null
    allowAIBot: boolean | null
  }

  export type ParticipantMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    chatRoomId: number | null
    role: $Enums.RoomRole | null
    joinedAt: Date | null
    allowAIBot: boolean | null
  }

  export type ParticipantCountAggregateOutputType = {
    id: number
    userId: number
    chatRoomId: number
    role: number
    joinedAt: number
    allowAIBot: number
    _all: number
  }


  export type ParticipantAvgAggregateInputType = {
    id?: true
    userId?: true
    chatRoomId?: true
  }

  export type ParticipantSumAggregateInputType = {
    id?: true
    userId?: true
    chatRoomId?: true
  }

  export type ParticipantMinAggregateInputType = {
    id?: true
    userId?: true
    chatRoomId?: true
    role?: true
    joinedAt?: true
    allowAIBot?: true
  }

  export type ParticipantMaxAggregateInputType = {
    id?: true
    userId?: true
    chatRoomId?: true
    role?: true
    joinedAt?: true
    allowAIBot?: true
  }

  export type ParticipantCountAggregateInputType = {
    id?: true
    userId?: true
    chatRoomId?: true
    role?: true
    joinedAt?: true
    allowAIBot?: true
    _all?: true
  }

  export type ParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Participant to aggregate.
     */
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     */
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Participants
    **/
    _count?: true | ParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipantMaxAggregateInputType
  }

  export type GetParticipantAggregateType<T extends ParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipant[P]>
      : GetScalarType<T[P], AggregateParticipant[P]>
  }




  export type ParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantWhereInput
    orderBy?: ParticipantOrderByWithAggregationInput | ParticipantOrderByWithAggregationInput[]
    by: ParticipantScalarFieldEnum[] | ParticipantScalarFieldEnum
    having?: ParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipantCountAggregateInputType | true
    _avg?: ParticipantAvgAggregateInputType
    _sum?: ParticipantSumAggregateInputType
    _min?: ParticipantMinAggregateInputType
    _max?: ParticipantMaxAggregateInputType
  }

  export type ParticipantGroupByOutputType = {
    id: number
    userId: number
    chatRoomId: number
    role: $Enums.RoomRole
    joinedAt: Date
    allowAIBot: boolean
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  type GetParticipantGroupByPayload<T extends ParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    chatRoomId?: boolean
    role?: boolean
    joinedAt?: boolean
    allowAIBot?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type ParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    chatRoomId?: boolean
    role?: boolean
    joinedAt?: boolean
    allowAIBot?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type ParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    chatRoomId?: boolean
    role?: boolean
    joinedAt?: boolean
    allowAIBot?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participant"]>

  export type ParticipantSelectScalar = {
    id?: boolean
    userId?: boolean
    chatRoomId?: boolean
    role?: boolean
    joinedAt?: boolean
    allowAIBot?: boolean
  }

  export type ParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "chatRoomId" | "role" | "joinedAt" | "allowAIBot", ExtArgs["result"]["participant"]>
  export type ParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }
  export type ParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }
  export type ParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }

  export type $ParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Participant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      chatRoomId: number
      role: $Enums.RoomRole
      joinedAt: Date
      allowAIBot: boolean
    }, ExtArgs["result"]["participant"]>
    composites: {}
  }

  type ParticipantGetPayload<S extends boolean | null | undefined | ParticipantDefaultArgs> = $Result.GetResult<Prisma.$ParticipantPayload, S>

  type ParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParticipantCountAggregateInputType | true
    }

  export interface ParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Participant'], meta: { name: 'Participant' } }
    /**
     * Find zero or one Participant that matches the filter.
     * @param {ParticipantFindUniqueArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParticipantFindUniqueArgs>(args: SelectSubset<T, ParticipantFindUniqueArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Participant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParticipantFindUniqueOrThrowArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindFirstArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParticipantFindFirstArgs>(args?: SelectSubset<T, ParticipantFindFirstArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Participant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindFirstOrThrowArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participants
     * const participants = await prisma.participant.findMany()
     * 
     * // Get first 10 Participants
     * const participants = await prisma.participant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const participantWithIdOnly = await prisma.participant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParticipantFindManyArgs>(args?: SelectSubset<T, ParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Participant.
     * @param {ParticipantCreateArgs} args - Arguments to create a Participant.
     * @example
     * // Create one Participant
     * const Participant = await prisma.participant.create({
     *   data: {
     *     // ... data to create a Participant
     *   }
     * })
     * 
     */
    create<T extends ParticipantCreateArgs>(args: SelectSubset<T, ParticipantCreateArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Participants.
     * @param {ParticipantCreateManyArgs} args - Arguments to create many Participants.
     * @example
     * // Create many Participants
     * const participant = await prisma.participant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParticipantCreateManyArgs>(args?: SelectSubset<T, ParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Participants and returns the data saved in the database.
     * @param {ParticipantCreateManyAndReturnArgs} args - Arguments to create many Participants.
     * @example
     * // Create many Participants
     * const participant = await prisma.participant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Participants and only return the `id`
     * const participantWithIdOnly = await prisma.participant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, ParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Participant.
     * @param {ParticipantDeleteArgs} args - Arguments to delete one Participant.
     * @example
     * // Delete one Participant
     * const Participant = await prisma.participant.delete({
     *   where: {
     *     // ... filter to delete one Participant
     *   }
     * })
     * 
     */
    delete<T extends ParticipantDeleteArgs>(args: SelectSubset<T, ParticipantDeleteArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Participant.
     * @param {ParticipantUpdateArgs} args - Arguments to update one Participant.
     * @example
     * // Update one Participant
     * const participant = await prisma.participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParticipantUpdateArgs>(args: SelectSubset<T, ParticipantUpdateArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Participants.
     * @param {ParticipantDeleteManyArgs} args - Arguments to filter Participants to delete.
     * @example
     * // Delete a few Participants
     * const { count } = await prisma.participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParticipantDeleteManyArgs>(args?: SelectSubset<T, ParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParticipantUpdateManyArgs>(args: SelectSubset<T, ParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants and returns the data updated in the database.
     * @param {ParticipantUpdateManyAndReturnArgs} args - Arguments to update many Participants.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Participants and only return the `id`
     * const participantWithIdOnly = await prisma.participant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, ParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Participant.
     * @param {ParticipantUpsertArgs} args - Arguments to update or create a Participant.
     * @example
     * // Update or create a Participant
     * const participant = await prisma.participant.upsert({
     *   create: {
     *     // ... data to create a Participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participant we want to update
     *   }
     * })
     */
    upsert<T extends ParticipantUpsertArgs>(args: SelectSubset<T, ParticipantUpsertArgs<ExtArgs>>): Prisma__ParticipantClient<$Result.GetResult<Prisma.$ParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantCountArgs} args - Arguments to filter Participants to count.
     * @example
     * // Count the number of Participants
     * const count = await prisma.participant.count({
     *   where: {
     *     // ... the filter for the Participants we want to count
     *   }
     * })
    **/
    count<T extends ParticipantCountArgs>(
      args?: Subset<T, ParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipantAggregateArgs>(args: Subset<T, ParticipantAggregateArgs>): Prisma.PrismaPromise<GetParticipantAggregateType<T>>

    /**
     * Group by Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Participant model
   */
  readonly fields: ParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Participant model
   */
  interface ParticipantFieldRefs {
    readonly id: FieldRef<"Participant", 'Int'>
    readonly userId: FieldRef<"Participant", 'Int'>
    readonly chatRoomId: FieldRef<"Participant", 'Int'>
    readonly role: FieldRef<"Participant", 'RoomRole'>
    readonly joinedAt: FieldRef<"Participant", 'DateTime'>
    readonly allowAIBot: FieldRef<"Participant", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Participant findUnique
   */
  export type ParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which Participant to fetch.
     */
    where: ParticipantWhereUniqueInput
  }

  /**
   * Participant findUniqueOrThrow
   */
  export type ParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which Participant to fetch.
     */
    where: ParticipantWhereUniqueInput
  }

  /**
   * Participant findFirst
   */
  export type ParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which Participant to fetch.
     */
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     */
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Participants.
     */
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Participants.
     */
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * Participant findFirstOrThrow
   */
  export type ParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which Participant to fetch.
     */
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     */
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Participants.
     */
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Participants.
     */
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * Participant findMany
   */
  export type ParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter, which Participants to fetch.
     */
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     */
    orderBy?: ParticipantOrderByWithRelationInput | ParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Participants.
     */
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     */
    skip?: number
    distinct?: ParticipantScalarFieldEnum | ParticipantScalarFieldEnum[]
  }

  /**
   * Participant create
   */
  export type ParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a Participant.
     */
    data: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
  }

  /**
   * Participant createMany
   */
  export type ParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Participants.
     */
    data: ParticipantCreateManyInput | ParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Participant createManyAndReturn
   */
  export type ParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many Participants.
     */
    data: ParticipantCreateManyInput | ParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Participant update
   */
  export type ParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a Participant.
     */
    data: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
    /**
     * Choose, which Participant to update.
     */
    where: ParticipantWhereUniqueInput
  }

  /**
   * Participant updateMany
   */
  export type ParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Participants.
     */
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyInput>
    /**
     * Filter which Participants to update
     */
    where?: ParticipantWhereInput
    /**
     * Limit how many Participants to update.
     */
    limit?: number
  }

  /**
   * Participant updateManyAndReturn
   */
  export type ParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * The data used to update Participants.
     */
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyInput>
    /**
     * Filter which Participants to update
     */
    where?: ParticipantWhereInput
    /**
     * Limit how many Participants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Participant upsert
   */
  export type ParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the Participant to update in case it exists.
     */
    where: ParticipantWhereUniqueInput
    /**
     * In case the Participant found by the `where` argument doesn't exist, create a new Participant with this data.
     */
    create: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
    /**
     * In case the Participant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
  }

  /**
   * Participant delete
   */
  export type ParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
    /**
     * Filter which Participant to delete.
     */
    where: ParticipantWhereUniqueInput
  }

  /**
   * Participant deleteMany
   */
  export type ParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Participants to delete
     */
    where?: ParticipantWhereInput
    /**
     * Limit how many Participants to delete.
     */
    limit?: number
  }

  /**
   * Participant without action
   */
  export type ParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Participant
     */
    select?: ParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Participant
     */
    omit?: ParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    audioDurationSec: number | null
    senderId: number | null
    chatRoomId: number | null
    randomChatRoomId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    audioDurationSec: number | null
    senderId: number | null
    chatRoomId: number | null
    randomChatRoomId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    contentCiphertext: string | null
    rawContent: string | null
    translatedFrom: string | null
    isExplicit: boolean | null
    imageUrl: string | null
    audioUrl: string | null
    audioDurationSec: number | null
    expiresAt: Date | null
    deletedBySender: boolean | null
    senderId: number | null
    chatRoomId: number | null
    randomChatRoomId: number | null
    createdAt: Date | null
    isAutoReply: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    contentCiphertext: string | null
    rawContent: string | null
    translatedFrom: string | null
    isExplicit: boolean | null
    imageUrl: string | null
    audioUrl: string | null
    audioDurationSec: number | null
    expiresAt: Date | null
    deletedBySender: boolean | null
    senderId: number | null
    chatRoomId: number | null
    randomChatRoomId: number | null
    createdAt: Date | null
    isAutoReply: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    contentCiphertext: number
    rawContent: number
    translations: number
    translatedFrom: number
    isExplicit: number
    imageUrl: number
    audioUrl: number
    audioDurationSec: number
    expiresAt: number
    deletedBySender: number
    senderId: number
    chatRoomId: number
    randomChatRoomId: number
    createdAt: number
    isAutoReply: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    audioDurationSec?: true
    senderId?: true
    chatRoomId?: true
    randomChatRoomId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    audioDurationSec?: true
    senderId?: true
    chatRoomId?: true
    randomChatRoomId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    contentCiphertext?: true
    rawContent?: true
    translatedFrom?: true
    isExplicit?: true
    imageUrl?: true
    audioUrl?: true
    audioDurationSec?: true
    expiresAt?: true
    deletedBySender?: true
    senderId?: true
    chatRoomId?: true
    randomChatRoomId?: true
    createdAt?: true
    isAutoReply?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    contentCiphertext?: true
    rawContent?: true
    translatedFrom?: true
    isExplicit?: true
    imageUrl?: true
    audioUrl?: true
    audioDurationSec?: true
    expiresAt?: true
    deletedBySender?: true
    senderId?: true
    chatRoomId?: true
    randomChatRoomId?: true
    createdAt?: true
    isAutoReply?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    contentCiphertext?: true
    rawContent?: true
    translations?: true
    translatedFrom?: true
    isExplicit?: true
    imageUrl?: true
    audioUrl?: true
    audioDurationSec?: true
    expiresAt?: true
    deletedBySender?: true
    senderId?: true
    chatRoomId?: true
    randomChatRoomId?: true
    createdAt?: true
    isAutoReply?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    contentCiphertext: string
    rawContent: string
    translations: JsonValue | null
    translatedFrom: string | null
    isExplicit: boolean
    imageUrl: string | null
    audioUrl: string | null
    audioDurationSec: number | null
    expiresAt: Date | null
    deletedBySender: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId: number | null
    createdAt: Date
    isAutoReply: boolean
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentCiphertext?: boolean
    rawContent?: boolean
    translations?: boolean
    translatedFrom?: boolean
    isExplicit?: boolean
    imageUrl?: boolean
    audioUrl?: boolean
    audioDurationSec?: boolean
    expiresAt?: boolean
    deletedBySender?: boolean
    senderId?: boolean
    chatRoomId?: boolean
    randomChatRoomId?: boolean
    createdAt?: boolean
    isAutoReply?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    keys?: boolean | Message$keysArgs<ExtArgs>
    attachments?: boolean | Message$attachmentsArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
    readBy?: boolean | Message$readByArgs<ExtArgs>
    reports?: boolean | Message$reportsArgs<ExtArgs>
    reactions?: boolean | Message$reactionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentCiphertext?: boolean
    rawContent?: boolean
    translations?: boolean
    translatedFrom?: boolean
    isExplicit?: boolean
    imageUrl?: boolean
    audioUrl?: boolean
    audioDurationSec?: boolean
    expiresAt?: boolean
    deletedBySender?: boolean
    senderId?: boolean
    chatRoomId?: boolean
    randomChatRoomId?: boolean
    createdAt?: boolean
    isAutoReply?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentCiphertext?: boolean
    rawContent?: boolean
    translations?: boolean
    translatedFrom?: boolean
    isExplicit?: boolean
    imageUrl?: boolean
    audioUrl?: boolean
    audioDurationSec?: boolean
    expiresAt?: boolean
    deletedBySender?: boolean
    senderId?: boolean
    chatRoomId?: boolean
    randomChatRoomId?: boolean
    createdAt?: boolean
    isAutoReply?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    contentCiphertext?: boolean
    rawContent?: boolean
    translations?: boolean
    translatedFrom?: boolean
    isExplicit?: boolean
    imageUrl?: boolean
    audioUrl?: boolean
    audioDurationSec?: boolean
    expiresAt?: boolean
    deletedBySender?: boolean
    senderId?: boolean
    chatRoomId?: boolean
    randomChatRoomId?: boolean
    createdAt?: boolean
    isAutoReply?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contentCiphertext" | "rawContent" | "translations" | "translatedFrom" | "isExplicit" | "imageUrl" | "audioUrl" | "audioDurationSec" | "expiresAt" | "deletedBySender" | "senderId" | "chatRoomId" | "randomChatRoomId" | "createdAt" | "isAutoReply", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    keys?: boolean | Message$keysArgs<ExtArgs>
    attachments?: boolean | Message$attachmentsArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
    readBy?: boolean | Message$readByArgs<ExtArgs>
    reports?: boolean | Message$reportsArgs<ExtArgs>
    reactions?: boolean | Message$reactionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    randomChatRoom?: boolean | Message$randomChatRoomArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
      keys: Prisma.$MessageKeyPayload<ExtArgs>[]
      attachments: Prisma.$MessageAttachmentPayload<ExtArgs>[]
      randomChatRoom: Prisma.$RandomChatRoomPayload<ExtArgs> | null
      readBy: Prisma.$UserPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      reactions: Prisma.$MessageReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contentCiphertext: string
      rawContent: string
      translations: Prisma.JsonValue | null
      translatedFrom: string | null
      isExplicit: boolean
      imageUrl: string | null
      audioUrl: string | null
      audioDurationSec: number | null
      expiresAt: Date | null
      deletedBySender: boolean
      senderId: number
      chatRoomId: number
      randomChatRoomId: number | null
      createdAt: Date
      isAutoReply: boolean
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    keys<T extends Message$keysArgs<ExtArgs> = {}>(args?: Subset<T, Message$keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Message$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Message$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    randomChatRoom<T extends Message$randomChatRoomArgs<ExtArgs> = {}>(args?: Subset<T, Message$randomChatRoomArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    readBy<T extends Message$readByArgs<ExtArgs> = {}>(args?: Subset<T, Message$readByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Message$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Message$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends Message$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, Message$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly contentCiphertext: FieldRef<"Message", 'String'>
    readonly rawContent: FieldRef<"Message", 'String'>
    readonly translations: FieldRef<"Message", 'Json'>
    readonly translatedFrom: FieldRef<"Message", 'String'>
    readonly isExplicit: FieldRef<"Message", 'Boolean'>
    readonly imageUrl: FieldRef<"Message", 'String'>
    readonly audioUrl: FieldRef<"Message", 'String'>
    readonly audioDurationSec: FieldRef<"Message", 'Int'>
    readonly expiresAt: FieldRef<"Message", 'DateTime'>
    readonly deletedBySender: FieldRef<"Message", 'Boolean'>
    readonly senderId: FieldRef<"Message", 'Int'>
    readonly chatRoomId: FieldRef<"Message", 'Int'>
    readonly randomChatRoomId: FieldRef<"Message", 'Int'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly isAutoReply: FieldRef<"Message", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message.keys
   */
  export type Message$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    where?: MessageKeyWhereInput
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    cursor?: MessageKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageKeyScalarFieldEnum | MessageKeyScalarFieldEnum[]
  }

  /**
   * Message.attachments
   */
  export type Message$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    where?: MessageAttachmentWhereInput
    orderBy?: MessageAttachmentOrderByWithRelationInput | MessageAttachmentOrderByWithRelationInput[]
    cursor?: MessageAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageAttachmentScalarFieldEnum | MessageAttachmentScalarFieldEnum[]
  }

  /**
   * Message.randomChatRoom
   */
  export type Message$randomChatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    where?: RandomChatRoomWhereInput
  }

  /**
   * Message.readBy
   */
  export type Message$readByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Message.reports
   */
  export type Message$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Message.reactions
   */
  export type Message$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    where?: MessageReactionWhereInput
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    cursor?: MessageReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageReactionScalarFieldEnum | MessageReactionScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model ScheduledMessage
   */

  export type AggregateScheduledMessage = {
    _count: ScheduledMessageCountAggregateOutputType | null
    _avg: ScheduledMessageAvgAggregateOutputType | null
    _sum: ScheduledMessageSumAggregateOutputType | null
    _min: ScheduledMessageMinAggregateOutputType | null
    _max: ScheduledMessageMaxAggregateOutputType | null
  }

  export type ScheduledMessageAvgAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    senderId: number | null
  }

  export type ScheduledMessageSumAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    senderId: number | null
  }

  export type ScheduledMessageMinAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    senderId: number | null
    content: string | null
    scheduledAt: Date | null
    createdAt: Date | null
  }

  export type ScheduledMessageMaxAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    senderId: number | null
    content: string | null
    scheduledAt: Date | null
    createdAt: Date | null
  }

  export type ScheduledMessageCountAggregateOutputType = {
    id: number
    chatRoomId: number
    senderId: number
    content: number
    scheduledAt: number
    createdAt: number
    _all: number
  }


  export type ScheduledMessageAvgAggregateInputType = {
    id?: true
    chatRoomId?: true
    senderId?: true
  }

  export type ScheduledMessageSumAggregateInputType = {
    id?: true
    chatRoomId?: true
    senderId?: true
  }

  export type ScheduledMessageMinAggregateInputType = {
    id?: true
    chatRoomId?: true
    senderId?: true
    content?: true
    scheduledAt?: true
    createdAt?: true
  }

  export type ScheduledMessageMaxAggregateInputType = {
    id?: true
    chatRoomId?: true
    senderId?: true
    content?: true
    scheduledAt?: true
    createdAt?: true
  }

  export type ScheduledMessageCountAggregateInputType = {
    id?: true
    chatRoomId?: true
    senderId?: true
    content?: true
    scheduledAt?: true
    createdAt?: true
    _all?: true
  }

  export type ScheduledMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledMessage to aggregate.
     */
    where?: ScheduledMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledMessages to fetch.
     */
    orderBy?: ScheduledMessageOrderByWithRelationInput | ScheduledMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduledMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduledMessages
    **/
    _count?: true | ScheduledMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduledMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduledMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduledMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduledMessageMaxAggregateInputType
  }

  export type GetScheduledMessageAggregateType<T extends ScheduledMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduledMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduledMessage[P]>
      : GetScalarType<T[P], AggregateScheduledMessage[P]>
  }




  export type ScheduledMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduledMessageWhereInput
    orderBy?: ScheduledMessageOrderByWithAggregationInput | ScheduledMessageOrderByWithAggregationInput[]
    by: ScheduledMessageScalarFieldEnum[] | ScheduledMessageScalarFieldEnum
    having?: ScheduledMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduledMessageCountAggregateInputType | true
    _avg?: ScheduledMessageAvgAggregateInputType
    _sum?: ScheduledMessageSumAggregateInputType
    _min?: ScheduledMessageMinAggregateInputType
    _max?: ScheduledMessageMaxAggregateInputType
  }

  export type ScheduledMessageGroupByOutputType = {
    id: number
    chatRoomId: number
    senderId: number
    content: string
    scheduledAt: Date
    createdAt: Date
    _count: ScheduledMessageCountAggregateOutputType | null
    _avg: ScheduledMessageAvgAggregateOutputType | null
    _sum: ScheduledMessageSumAggregateOutputType | null
    _min: ScheduledMessageMinAggregateOutputType | null
    _max: ScheduledMessageMaxAggregateOutputType | null
  }

  type GetScheduledMessageGroupByPayload<T extends ScheduledMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduledMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduledMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduledMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduledMessageGroupByOutputType[P]>
        }
      >
    >


  export type ScheduledMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatRoomId?: boolean
    senderId?: boolean
    content?: boolean
    scheduledAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["scheduledMessage"]>

  export type ScheduledMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatRoomId?: boolean
    senderId?: boolean
    content?: boolean
    scheduledAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["scheduledMessage"]>

  export type ScheduledMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatRoomId?: boolean
    senderId?: boolean
    content?: boolean
    scheduledAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["scheduledMessage"]>

  export type ScheduledMessageSelectScalar = {
    id?: boolean
    chatRoomId?: boolean
    senderId?: boolean
    content?: boolean
    scheduledAt?: boolean
    createdAt?: boolean
  }

  export type ScheduledMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chatRoomId" | "senderId" | "content" | "scheduledAt" | "createdAt", ExtArgs["result"]["scheduledMessage"]>

  export type $ScheduledMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduledMessage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      chatRoomId: number
      senderId: number
      content: string
      scheduledAt: Date
      createdAt: Date
    }, ExtArgs["result"]["scheduledMessage"]>
    composites: {}
  }

  type ScheduledMessageGetPayload<S extends boolean | null | undefined | ScheduledMessageDefaultArgs> = $Result.GetResult<Prisma.$ScheduledMessagePayload, S>

  type ScheduledMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduledMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduledMessageCountAggregateInputType | true
    }

  export interface ScheduledMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduledMessage'], meta: { name: 'ScheduledMessage' } }
    /**
     * Find zero or one ScheduledMessage that matches the filter.
     * @param {ScheduledMessageFindUniqueArgs} args - Arguments to find a ScheduledMessage
     * @example
     * // Get one ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduledMessageFindUniqueArgs>(args: SelectSubset<T, ScheduledMessageFindUniqueArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScheduledMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduledMessageFindUniqueOrThrowArgs} args - Arguments to find a ScheduledMessage
     * @example
     * // Get one ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduledMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduledMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduledMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageFindFirstArgs} args - Arguments to find a ScheduledMessage
     * @example
     * // Get one ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduledMessageFindFirstArgs>(args?: SelectSubset<T, ScheduledMessageFindFirstArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScheduledMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageFindFirstOrThrowArgs} args - Arguments to find a ScheduledMessage
     * @example
     * // Get one ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduledMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduledMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScheduledMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduledMessages
     * const scheduledMessages = await prisma.scheduledMessage.findMany()
     * 
     * // Get first 10 ScheduledMessages
     * const scheduledMessages = await prisma.scheduledMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduledMessageWithIdOnly = await prisma.scheduledMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduledMessageFindManyArgs>(args?: SelectSubset<T, ScheduledMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScheduledMessage.
     * @param {ScheduledMessageCreateArgs} args - Arguments to create a ScheduledMessage.
     * @example
     * // Create one ScheduledMessage
     * const ScheduledMessage = await prisma.scheduledMessage.create({
     *   data: {
     *     // ... data to create a ScheduledMessage
     *   }
     * })
     * 
     */
    create<T extends ScheduledMessageCreateArgs>(args: SelectSubset<T, ScheduledMessageCreateArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScheduledMessages.
     * @param {ScheduledMessageCreateManyArgs} args - Arguments to create many ScheduledMessages.
     * @example
     * // Create many ScheduledMessages
     * const scheduledMessage = await prisma.scheduledMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduledMessageCreateManyArgs>(args?: SelectSubset<T, ScheduledMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScheduledMessages and returns the data saved in the database.
     * @param {ScheduledMessageCreateManyAndReturnArgs} args - Arguments to create many ScheduledMessages.
     * @example
     * // Create many ScheduledMessages
     * const scheduledMessage = await prisma.scheduledMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScheduledMessages and only return the `id`
     * const scheduledMessageWithIdOnly = await prisma.scheduledMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduledMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduledMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScheduledMessage.
     * @param {ScheduledMessageDeleteArgs} args - Arguments to delete one ScheduledMessage.
     * @example
     * // Delete one ScheduledMessage
     * const ScheduledMessage = await prisma.scheduledMessage.delete({
     *   where: {
     *     // ... filter to delete one ScheduledMessage
     *   }
     * })
     * 
     */
    delete<T extends ScheduledMessageDeleteArgs>(args: SelectSubset<T, ScheduledMessageDeleteArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScheduledMessage.
     * @param {ScheduledMessageUpdateArgs} args - Arguments to update one ScheduledMessage.
     * @example
     * // Update one ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduledMessageUpdateArgs>(args: SelectSubset<T, ScheduledMessageUpdateArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScheduledMessages.
     * @param {ScheduledMessageDeleteManyArgs} args - Arguments to filter ScheduledMessages to delete.
     * @example
     * // Delete a few ScheduledMessages
     * const { count } = await prisma.scheduledMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduledMessageDeleteManyArgs>(args?: SelectSubset<T, ScheduledMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduledMessages
     * const scheduledMessage = await prisma.scheduledMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduledMessageUpdateManyArgs>(args: SelectSubset<T, ScheduledMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduledMessages and returns the data updated in the database.
     * @param {ScheduledMessageUpdateManyAndReturnArgs} args - Arguments to update many ScheduledMessages.
     * @example
     * // Update many ScheduledMessages
     * const scheduledMessage = await prisma.scheduledMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScheduledMessages and only return the `id`
     * const scheduledMessageWithIdOnly = await prisma.scheduledMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduledMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduledMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScheduledMessage.
     * @param {ScheduledMessageUpsertArgs} args - Arguments to update or create a ScheduledMessage.
     * @example
     * // Update or create a ScheduledMessage
     * const scheduledMessage = await prisma.scheduledMessage.upsert({
     *   create: {
     *     // ... data to create a ScheduledMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduledMessage we want to update
     *   }
     * })
     */
    upsert<T extends ScheduledMessageUpsertArgs>(args: SelectSubset<T, ScheduledMessageUpsertArgs<ExtArgs>>): Prisma__ScheduledMessageClient<$Result.GetResult<Prisma.$ScheduledMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScheduledMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageCountArgs} args - Arguments to filter ScheduledMessages to count.
     * @example
     * // Count the number of ScheduledMessages
     * const count = await prisma.scheduledMessage.count({
     *   where: {
     *     // ... the filter for the ScheduledMessages we want to count
     *   }
     * })
    **/
    count<T extends ScheduledMessageCountArgs>(
      args?: Subset<T, ScheduledMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduledMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduledMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduledMessageAggregateArgs>(args: Subset<T, ScheduledMessageAggregateArgs>): Prisma.PrismaPromise<GetScheduledMessageAggregateType<T>>

    /**
     * Group by ScheduledMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduledMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduledMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduledMessageGroupByArgs['orderBy'] }
        : { orderBy?: ScheduledMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduledMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduledMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduledMessage model
   */
  readonly fields: ScheduledMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduledMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduledMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduledMessage model
   */
  interface ScheduledMessageFieldRefs {
    readonly id: FieldRef<"ScheduledMessage", 'Int'>
    readonly chatRoomId: FieldRef<"ScheduledMessage", 'Int'>
    readonly senderId: FieldRef<"ScheduledMessage", 'Int'>
    readonly content: FieldRef<"ScheduledMessage", 'String'>
    readonly scheduledAt: FieldRef<"ScheduledMessage", 'DateTime'>
    readonly createdAt: FieldRef<"ScheduledMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduledMessage findUnique
   */
  export type ScheduledMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledMessage to fetch.
     */
    where: ScheduledMessageWhereUniqueInput
  }

  /**
   * ScheduledMessage findUniqueOrThrow
   */
  export type ScheduledMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledMessage to fetch.
     */
    where: ScheduledMessageWhereUniqueInput
  }

  /**
   * ScheduledMessage findFirst
   */
  export type ScheduledMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledMessage to fetch.
     */
    where?: ScheduledMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledMessages to fetch.
     */
    orderBy?: ScheduledMessageOrderByWithRelationInput | ScheduledMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledMessages.
     */
    cursor?: ScheduledMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledMessages.
     */
    distinct?: ScheduledMessageScalarFieldEnum | ScheduledMessageScalarFieldEnum[]
  }

  /**
   * ScheduledMessage findFirstOrThrow
   */
  export type ScheduledMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledMessage to fetch.
     */
    where?: ScheduledMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledMessages to fetch.
     */
    orderBy?: ScheduledMessageOrderByWithRelationInput | ScheduledMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduledMessages.
     */
    cursor?: ScheduledMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduledMessages.
     */
    distinct?: ScheduledMessageScalarFieldEnum | ScheduledMessageScalarFieldEnum[]
  }

  /**
   * ScheduledMessage findMany
   */
  export type ScheduledMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter, which ScheduledMessages to fetch.
     */
    where?: ScheduledMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduledMessages to fetch.
     */
    orderBy?: ScheduledMessageOrderByWithRelationInput | ScheduledMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduledMessages.
     */
    cursor?: ScheduledMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduledMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduledMessages.
     */
    skip?: number
    distinct?: ScheduledMessageScalarFieldEnum | ScheduledMessageScalarFieldEnum[]
  }

  /**
   * ScheduledMessage create
   */
  export type ScheduledMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * The data needed to create a ScheduledMessage.
     */
    data: XOR<ScheduledMessageCreateInput, ScheduledMessageUncheckedCreateInput>
  }

  /**
   * ScheduledMessage createMany
   */
  export type ScheduledMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduledMessages.
     */
    data: ScheduledMessageCreateManyInput | ScheduledMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduledMessage createManyAndReturn
   */
  export type ScheduledMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ScheduledMessages.
     */
    data: ScheduledMessageCreateManyInput | ScheduledMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduledMessage update
   */
  export type ScheduledMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * The data needed to update a ScheduledMessage.
     */
    data: XOR<ScheduledMessageUpdateInput, ScheduledMessageUncheckedUpdateInput>
    /**
     * Choose, which ScheduledMessage to update.
     */
    where: ScheduledMessageWhereUniqueInput
  }

  /**
   * ScheduledMessage updateMany
   */
  export type ScheduledMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduledMessages.
     */
    data: XOR<ScheduledMessageUpdateManyMutationInput, ScheduledMessageUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledMessages to update
     */
    where?: ScheduledMessageWhereInput
    /**
     * Limit how many ScheduledMessages to update.
     */
    limit?: number
  }

  /**
   * ScheduledMessage updateManyAndReturn
   */
  export type ScheduledMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * The data used to update ScheduledMessages.
     */
    data: XOR<ScheduledMessageUpdateManyMutationInput, ScheduledMessageUncheckedUpdateManyInput>
    /**
     * Filter which ScheduledMessages to update
     */
    where?: ScheduledMessageWhereInput
    /**
     * Limit how many ScheduledMessages to update.
     */
    limit?: number
  }

  /**
   * ScheduledMessage upsert
   */
  export type ScheduledMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * The filter to search for the ScheduledMessage to update in case it exists.
     */
    where: ScheduledMessageWhereUniqueInput
    /**
     * In case the ScheduledMessage found by the `where` argument doesn't exist, create a new ScheduledMessage with this data.
     */
    create: XOR<ScheduledMessageCreateInput, ScheduledMessageUncheckedCreateInput>
    /**
     * In case the ScheduledMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduledMessageUpdateInput, ScheduledMessageUncheckedUpdateInput>
  }

  /**
   * ScheduledMessage delete
   */
  export type ScheduledMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
    /**
     * Filter which ScheduledMessage to delete.
     */
    where: ScheduledMessageWhereUniqueInput
  }

  /**
   * ScheduledMessage deleteMany
   */
  export type ScheduledMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduledMessages to delete
     */
    where?: ScheduledMessageWhereInput
    /**
     * Limit how many ScheduledMessages to delete.
     */
    limit?: number
  }

  /**
   * ScheduledMessage without action
   */
  export type ScheduledMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduledMessage
     */
    select?: ScheduledMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScheduledMessage
     */
    omit?: ScheduledMessageOmit<ExtArgs> | null
  }


  /**
   * Model MessageKey
   */

  export type AggregateMessageKey = {
    _count: MessageKeyCountAggregateOutputType | null
    _avg: MessageKeyAvgAggregateOutputType | null
    _sum: MessageKeySumAggregateOutputType | null
    _min: MessageKeyMinAggregateOutputType | null
    _max: MessageKeyMaxAggregateOutputType | null
  }

  export type MessageKeyAvgAggregateOutputType = {
    messageId: number | null
    userId: number | null
  }

  export type MessageKeySumAggregateOutputType = {
    messageId: number | null
    userId: number | null
  }

  export type MessageKeyMinAggregateOutputType = {
    messageId: number | null
    userId: number | null
    encryptedKey: string | null
  }

  export type MessageKeyMaxAggregateOutputType = {
    messageId: number | null
    userId: number | null
    encryptedKey: string | null
  }

  export type MessageKeyCountAggregateOutputType = {
    messageId: number
    userId: number
    encryptedKey: number
    _all: number
  }


  export type MessageKeyAvgAggregateInputType = {
    messageId?: true
    userId?: true
  }

  export type MessageKeySumAggregateInputType = {
    messageId?: true
    userId?: true
  }

  export type MessageKeyMinAggregateInputType = {
    messageId?: true
    userId?: true
    encryptedKey?: true
  }

  export type MessageKeyMaxAggregateInputType = {
    messageId?: true
    userId?: true
    encryptedKey?: true
  }

  export type MessageKeyCountAggregateInputType = {
    messageId?: true
    userId?: true
    encryptedKey?: true
    _all?: true
  }

  export type MessageKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageKey to aggregate.
     */
    where?: MessageKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageKeys to fetch.
     */
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageKeys
    **/
    _count?: true | MessageKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageKeyMaxAggregateInputType
  }

  export type GetMessageKeyAggregateType<T extends MessageKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageKey[P]>
      : GetScalarType<T[P], AggregateMessageKey[P]>
  }




  export type MessageKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageKeyWhereInput
    orderBy?: MessageKeyOrderByWithAggregationInput | MessageKeyOrderByWithAggregationInput[]
    by: MessageKeyScalarFieldEnum[] | MessageKeyScalarFieldEnum
    having?: MessageKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageKeyCountAggregateInputType | true
    _avg?: MessageKeyAvgAggregateInputType
    _sum?: MessageKeySumAggregateInputType
    _min?: MessageKeyMinAggregateInputType
    _max?: MessageKeyMaxAggregateInputType
  }

  export type MessageKeyGroupByOutputType = {
    messageId: number
    userId: number
    encryptedKey: string
    _count: MessageKeyCountAggregateOutputType | null
    _avg: MessageKeyAvgAggregateOutputType | null
    _sum: MessageKeySumAggregateOutputType | null
    _min: MessageKeyMinAggregateOutputType | null
    _max: MessageKeyMaxAggregateOutputType | null
  }

  type GetMessageKeyGroupByPayload<T extends MessageKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageKeyGroupByOutputType[P]>
            : GetScalarType<T[P], MessageKeyGroupByOutputType[P]>
        }
      >
    >


  export type MessageKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageKey"]>

  export type MessageKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageKey"]>

  export type MessageKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageKey"]>

  export type MessageKeySelectScalar = {
    messageId?: boolean
    userId?: boolean
    encryptedKey?: boolean
  }

  export type MessageKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"messageId" | "userId" | "encryptedKey", ExtArgs["result"]["messageKey"]>
  export type MessageKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessageKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageKey"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      messageId: number
      userId: number
      encryptedKey: string
    }, ExtArgs["result"]["messageKey"]>
    composites: {}
  }

  type MessageKeyGetPayload<S extends boolean | null | undefined | MessageKeyDefaultArgs> = $Result.GetResult<Prisma.$MessageKeyPayload, S>

  type MessageKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageKeyCountAggregateInputType | true
    }

  export interface MessageKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageKey'], meta: { name: 'MessageKey' } }
    /**
     * Find zero or one MessageKey that matches the filter.
     * @param {MessageKeyFindUniqueArgs} args - Arguments to find a MessageKey
     * @example
     * // Get one MessageKey
     * const messageKey = await prisma.messageKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageKeyFindUniqueArgs>(args: SelectSubset<T, MessageKeyFindUniqueArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageKeyFindUniqueOrThrowArgs} args - Arguments to find a MessageKey
     * @example
     * // Get one MessageKey
     * const messageKey = await prisma.messageKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyFindFirstArgs} args - Arguments to find a MessageKey
     * @example
     * // Get one MessageKey
     * const messageKey = await prisma.messageKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageKeyFindFirstArgs>(args?: SelectSubset<T, MessageKeyFindFirstArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyFindFirstOrThrowArgs} args - Arguments to find a MessageKey
     * @example
     * // Get one MessageKey
     * const messageKey = await prisma.messageKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageKeys
     * const messageKeys = await prisma.messageKey.findMany()
     * 
     * // Get first 10 MessageKeys
     * const messageKeys = await prisma.messageKey.findMany({ take: 10 })
     * 
     * // Only select the `messageId`
     * const messageKeyWithMessageIdOnly = await prisma.messageKey.findMany({ select: { messageId: true } })
     * 
     */
    findMany<T extends MessageKeyFindManyArgs>(args?: SelectSubset<T, MessageKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageKey.
     * @param {MessageKeyCreateArgs} args - Arguments to create a MessageKey.
     * @example
     * // Create one MessageKey
     * const MessageKey = await prisma.messageKey.create({
     *   data: {
     *     // ... data to create a MessageKey
     *   }
     * })
     * 
     */
    create<T extends MessageKeyCreateArgs>(args: SelectSubset<T, MessageKeyCreateArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageKeys.
     * @param {MessageKeyCreateManyArgs} args - Arguments to create many MessageKeys.
     * @example
     * // Create many MessageKeys
     * const messageKey = await prisma.messageKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageKeyCreateManyArgs>(args?: SelectSubset<T, MessageKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageKeys and returns the data saved in the database.
     * @param {MessageKeyCreateManyAndReturnArgs} args - Arguments to create many MessageKeys.
     * @example
     * // Create many MessageKeys
     * const messageKey = await prisma.messageKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageKeys and only return the `messageId`
     * const messageKeyWithMessageIdOnly = await prisma.messageKey.createManyAndReturn({
     *   select: { messageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageKey.
     * @param {MessageKeyDeleteArgs} args - Arguments to delete one MessageKey.
     * @example
     * // Delete one MessageKey
     * const MessageKey = await prisma.messageKey.delete({
     *   where: {
     *     // ... filter to delete one MessageKey
     *   }
     * })
     * 
     */
    delete<T extends MessageKeyDeleteArgs>(args: SelectSubset<T, MessageKeyDeleteArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageKey.
     * @param {MessageKeyUpdateArgs} args - Arguments to update one MessageKey.
     * @example
     * // Update one MessageKey
     * const messageKey = await prisma.messageKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageKeyUpdateArgs>(args: SelectSubset<T, MessageKeyUpdateArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageKeys.
     * @param {MessageKeyDeleteManyArgs} args - Arguments to filter MessageKeys to delete.
     * @example
     * // Delete a few MessageKeys
     * const { count } = await prisma.messageKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageKeyDeleteManyArgs>(args?: SelectSubset<T, MessageKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageKeys
     * const messageKey = await prisma.messageKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageKeyUpdateManyArgs>(args: SelectSubset<T, MessageKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageKeys and returns the data updated in the database.
     * @param {MessageKeyUpdateManyAndReturnArgs} args - Arguments to update many MessageKeys.
     * @example
     * // Update many MessageKeys
     * const messageKey = await prisma.messageKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageKeys and only return the `messageId`
     * const messageKeyWithMessageIdOnly = await prisma.messageKey.updateManyAndReturn({
     *   select: { messageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageKey.
     * @param {MessageKeyUpsertArgs} args - Arguments to update or create a MessageKey.
     * @example
     * // Update or create a MessageKey
     * const messageKey = await prisma.messageKey.upsert({
     *   create: {
     *     // ... data to create a MessageKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageKey we want to update
     *   }
     * })
     */
    upsert<T extends MessageKeyUpsertArgs>(args: SelectSubset<T, MessageKeyUpsertArgs<ExtArgs>>): Prisma__MessageKeyClient<$Result.GetResult<Prisma.$MessageKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyCountArgs} args - Arguments to filter MessageKeys to count.
     * @example
     * // Count the number of MessageKeys
     * const count = await prisma.messageKey.count({
     *   where: {
     *     // ... the filter for the MessageKeys we want to count
     *   }
     * })
    **/
    count<T extends MessageKeyCountArgs>(
      args?: Subset<T, MessageKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageKeyAggregateArgs>(args: Subset<T, MessageKeyAggregateArgs>): Prisma.PrismaPromise<GetMessageKeyAggregateType<T>>

    /**
     * Group by MessageKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageKeyGroupByArgs['orderBy'] }
        : { orderBy?: MessageKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageKey model
   */
  readonly fields: MessageKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageKey model
   */
  interface MessageKeyFieldRefs {
    readonly messageId: FieldRef<"MessageKey", 'Int'>
    readonly userId: FieldRef<"MessageKey", 'Int'>
    readonly encryptedKey: FieldRef<"MessageKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MessageKey findUnique
   */
  export type MessageKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter, which MessageKey to fetch.
     */
    where: MessageKeyWhereUniqueInput
  }

  /**
   * MessageKey findUniqueOrThrow
   */
  export type MessageKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter, which MessageKey to fetch.
     */
    where: MessageKeyWhereUniqueInput
  }

  /**
   * MessageKey findFirst
   */
  export type MessageKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter, which MessageKey to fetch.
     */
    where?: MessageKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageKeys to fetch.
     */
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageKeys.
     */
    cursor?: MessageKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageKeys.
     */
    distinct?: MessageKeyScalarFieldEnum | MessageKeyScalarFieldEnum[]
  }

  /**
   * MessageKey findFirstOrThrow
   */
  export type MessageKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter, which MessageKey to fetch.
     */
    where?: MessageKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageKeys to fetch.
     */
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageKeys.
     */
    cursor?: MessageKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageKeys.
     */
    distinct?: MessageKeyScalarFieldEnum | MessageKeyScalarFieldEnum[]
  }

  /**
   * MessageKey findMany
   */
  export type MessageKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter, which MessageKeys to fetch.
     */
    where?: MessageKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageKeys to fetch.
     */
    orderBy?: MessageKeyOrderByWithRelationInput | MessageKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageKeys.
     */
    cursor?: MessageKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageKeys.
     */
    skip?: number
    distinct?: MessageKeyScalarFieldEnum | MessageKeyScalarFieldEnum[]
  }

  /**
   * MessageKey create
   */
  export type MessageKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageKey.
     */
    data: XOR<MessageKeyCreateInput, MessageKeyUncheckedCreateInput>
  }

  /**
   * MessageKey createMany
   */
  export type MessageKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageKeys.
     */
    data: MessageKeyCreateManyInput | MessageKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageKey createManyAndReturn
   */
  export type MessageKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * The data used to create many MessageKeys.
     */
    data: MessageKeyCreateManyInput | MessageKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageKey update
   */
  export type MessageKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageKey.
     */
    data: XOR<MessageKeyUpdateInput, MessageKeyUncheckedUpdateInput>
    /**
     * Choose, which MessageKey to update.
     */
    where: MessageKeyWhereUniqueInput
  }

  /**
   * MessageKey updateMany
   */
  export type MessageKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageKeys.
     */
    data: XOR<MessageKeyUpdateManyMutationInput, MessageKeyUncheckedUpdateManyInput>
    /**
     * Filter which MessageKeys to update
     */
    where?: MessageKeyWhereInput
    /**
     * Limit how many MessageKeys to update.
     */
    limit?: number
  }

  /**
   * MessageKey updateManyAndReturn
   */
  export type MessageKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * The data used to update MessageKeys.
     */
    data: XOR<MessageKeyUpdateManyMutationInput, MessageKeyUncheckedUpdateManyInput>
    /**
     * Filter which MessageKeys to update
     */
    where?: MessageKeyWhereInput
    /**
     * Limit how many MessageKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageKey upsert
   */
  export type MessageKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageKey to update in case it exists.
     */
    where: MessageKeyWhereUniqueInput
    /**
     * In case the MessageKey found by the `where` argument doesn't exist, create a new MessageKey with this data.
     */
    create: XOR<MessageKeyCreateInput, MessageKeyUncheckedCreateInput>
    /**
     * In case the MessageKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageKeyUpdateInput, MessageKeyUncheckedUpdateInput>
  }

  /**
   * MessageKey delete
   */
  export type MessageKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
    /**
     * Filter which MessageKey to delete.
     */
    where: MessageKeyWhereUniqueInput
  }

  /**
   * MessageKey deleteMany
   */
  export type MessageKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageKeys to delete
     */
    where?: MessageKeyWhereInput
    /**
     * Limit how many MessageKeys to delete.
     */
    limit?: number
  }

  /**
   * MessageKey without action
   */
  export type MessageKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageKey
     */
    select?: MessageKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageKey
     */
    omit?: MessageKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageKeyInclude<ExtArgs> | null
  }


  /**
   * Model MessageAttachment
   */

  export type AggregateMessageAttachment = {
    _count: MessageAttachmentCountAggregateOutputType | null
    _avg: MessageAttachmentAvgAggregateOutputType | null
    _sum: MessageAttachmentSumAggregateOutputType | null
    _min: MessageAttachmentMinAggregateOutputType | null
    _max: MessageAttachmentMaxAggregateOutputType | null
  }

  export type MessageAttachmentAvgAggregateOutputType = {
    id: number | null
    messageId: number | null
    width: number | null
    height: number | null
    durationSec: number | null
  }

  export type MessageAttachmentSumAggregateOutputType = {
    id: number | null
    messageId: number | null
    width: number | null
    height: number | null
    durationSec: number | null
  }

  export type MessageAttachmentMinAggregateOutputType = {
    id: number | null
    messageId: number | null
    kind: $Enums.AttachmentKind | null
    url: string | null
    mimeType: string | null
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date | null
  }

  export type MessageAttachmentMaxAggregateOutputType = {
    id: number | null
    messageId: number | null
    kind: $Enums.AttachmentKind | null
    url: string | null
    mimeType: string | null
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date | null
  }

  export type MessageAttachmentCountAggregateOutputType = {
    id: number
    messageId: number
    kind: number
    url: number
    mimeType: number
    width: number
    height: number
    durationSec: number
    caption: number
    createdAt: number
    _all: number
  }


  export type MessageAttachmentAvgAggregateInputType = {
    id?: true
    messageId?: true
    width?: true
    height?: true
    durationSec?: true
  }

  export type MessageAttachmentSumAggregateInputType = {
    id?: true
    messageId?: true
    width?: true
    height?: true
    durationSec?: true
  }

  export type MessageAttachmentMinAggregateInputType = {
    id?: true
    messageId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
  }

  export type MessageAttachmentMaxAggregateInputType = {
    id?: true
    messageId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
  }

  export type MessageAttachmentCountAggregateInputType = {
    id?: true
    messageId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageAttachment to aggregate.
     */
    where?: MessageAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageAttachments to fetch.
     */
    orderBy?: MessageAttachmentOrderByWithRelationInput | MessageAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageAttachments
    **/
    _count?: true | MessageAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageAttachmentMaxAggregateInputType
  }

  export type GetMessageAttachmentAggregateType<T extends MessageAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageAttachment[P]>
      : GetScalarType<T[P], AggregateMessageAttachment[P]>
  }




  export type MessageAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageAttachmentWhereInput
    orderBy?: MessageAttachmentOrderByWithAggregationInput | MessageAttachmentOrderByWithAggregationInput[]
    by: MessageAttachmentScalarFieldEnum[] | MessageAttachmentScalarFieldEnum
    having?: MessageAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageAttachmentCountAggregateInputType | true
    _avg?: MessageAttachmentAvgAggregateInputType
    _sum?: MessageAttachmentSumAggregateInputType
    _min?: MessageAttachmentMinAggregateInputType
    _max?: MessageAttachmentMaxAggregateInputType
  }

  export type MessageAttachmentGroupByOutputType = {
    id: number
    messageId: number
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date
    _count: MessageAttachmentCountAggregateOutputType | null
    _avg: MessageAttachmentAvgAggregateOutputType | null
    _sum: MessageAttachmentSumAggregateOutputType | null
    _min: MessageAttachmentMinAggregateOutputType | null
    _max: MessageAttachmentMaxAggregateOutputType | null
  }

  type GetMessageAttachmentGroupByPayload<T extends MessageAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], MessageAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type MessageAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageAttachment"]>

  export type MessageAttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageAttachment"]>

  export type MessageAttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageAttachment"]>

  export type MessageAttachmentSelectScalar = {
    id?: boolean
    messageId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
  }

  export type MessageAttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "kind" | "url" | "mimeType" | "width" | "height" | "durationSec" | "caption" | "createdAt", ExtArgs["result"]["messageAttachment"]>
  export type MessageAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageAttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageAttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageAttachment"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messageId: number
      kind: $Enums.AttachmentKind
      url: string
      mimeType: string
      width: number | null
      height: number | null
      durationSec: number | null
      caption: string | null
      createdAt: Date
    }, ExtArgs["result"]["messageAttachment"]>
    composites: {}
  }

  type MessageAttachmentGetPayload<S extends boolean | null | undefined | MessageAttachmentDefaultArgs> = $Result.GetResult<Prisma.$MessageAttachmentPayload, S>

  type MessageAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageAttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageAttachmentCountAggregateInputType | true
    }

  export interface MessageAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageAttachment'], meta: { name: 'MessageAttachment' } }
    /**
     * Find zero or one MessageAttachment that matches the filter.
     * @param {MessageAttachmentFindUniqueArgs} args - Arguments to find a MessageAttachment
     * @example
     * // Get one MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageAttachmentFindUniqueArgs>(args: SelectSubset<T, MessageAttachmentFindUniqueArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageAttachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageAttachmentFindUniqueOrThrowArgs} args - Arguments to find a MessageAttachment
     * @example
     * // Get one MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentFindFirstArgs} args - Arguments to find a MessageAttachment
     * @example
     * // Get one MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageAttachmentFindFirstArgs>(args?: SelectSubset<T, MessageAttachmentFindFirstArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentFindFirstOrThrowArgs} args - Arguments to find a MessageAttachment
     * @example
     * // Get one MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageAttachments
     * const messageAttachments = await prisma.messageAttachment.findMany()
     * 
     * // Get first 10 MessageAttachments
     * const messageAttachments = await prisma.messageAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageAttachmentWithIdOnly = await prisma.messageAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageAttachmentFindManyArgs>(args?: SelectSubset<T, MessageAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageAttachment.
     * @param {MessageAttachmentCreateArgs} args - Arguments to create a MessageAttachment.
     * @example
     * // Create one MessageAttachment
     * const MessageAttachment = await prisma.messageAttachment.create({
     *   data: {
     *     // ... data to create a MessageAttachment
     *   }
     * })
     * 
     */
    create<T extends MessageAttachmentCreateArgs>(args: SelectSubset<T, MessageAttachmentCreateArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageAttachments.
     * @param {MessageAttachmentCreateManyArgs} args - Arguments to create many MessageAttachments.
     * @example
     * // Create many MessageAttachments
     * const messageAttachment = await prisma.messageAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageAttachmentCreateManyArgs>(args?: SelectSubset<T, MessageAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageAttachments and returns the data saved in the database.
     * @param {MessageAttachmentCreateManyAndReturnArgs} args - Arguments to create many MessageAttachments.
     * @example
     * // Create many MessageAttachments
     * const messageAttachment = await prisma.messageAttachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageAttachments and only return the `id`
     * const messageAttachmentWithIdOnly = await prisma.messageAttachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageAttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageAttachment.
     * @param {MessageAttachmentDeleteArgs} args - Arguments to delete one MessageAttachment.
     * @example
     * // Delete one MessageAttachment
     * const MessageAttachment = await prisma.messageAttachment.delete({
     *   where: {
     *     // ... filter to delete one MessageAttachment
     *   }
     * })
     * 
     */
    delete<T extends MessageAttachmentDeleteArgs>(args: SelectSubset<T, MessageAttachmentDeleteArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageAttachment.
     * @param {MessageAttachmentUpdateArgs} args - Arguments to update one MessageAttachment.
     * @example
     * // Update one MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageAttachmentUpdateArgs>(args: SelectSubset<T, MessageAttachmentUpdateArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageAttachments.
     * @param {MessageAttachmentDeleteManyArgs} args - Arguments to filter MessageAttachments to delete.
     * @example
     * // Delete a few MessageAttachments
     * const { count } = await prisma.messageAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageAttachmentDeleteManyArgs>(args?: SelectSubset<T, MessageAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageAttachments
     * const messageAttachment = await prisma.messageAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageAttachmentUpdateManyArgs>(args: SelectSubset<T, MessageAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageAttachments and returns the data updated in the database.
     * @param {MessageAttachmentUpdateManyAndReturnArgs} args - Arguments to update many MessageAttachments.
     * @example
     * // Update many MessageAttachments
     * const messageAttachment = await prisma.messageAttachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageAttachments and only return the `id`
     * const messageAttachmentWithIdOnly = await prisma.messageAttachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageAttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageAttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageAttachment.
     * @param {MessageAttachmentUpsertArgs} args - Arguments to update or create a MessageAttachment.
     * @example
     * // Update or create a MessageAttachment
     * const messageAttachment = await prisma.messageAttachment.upsert({
     *   create: {
     *     // ... data to create a MessageAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageAttachment we want to update
     *   }
     * })
     */
    upsert<T extends MessageAttachmentUpsertArgs>(args: SelectSubset<T, MessageAttachmentUpsertArgs<ExtArgs>>): Prisma__MessageAttachmentClient<$Result.GetResult<Prisma.$MessageAttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentCountArgs} args - Arguments to filter MessageAttachments to count.
     * @example
     * // Count the number of MessageAttachments
     * const count = await prisma.messageAttachment.count({
     *   where: {
     *     // ... the filter for the MessageAttachments we want to count
     *   }
     * })
    **/
    count<T extends MessageAttachmentCountArgs>(
      args?: Subset<T, MessageAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAttachmentAggregateArgs>(args: Subset<T, MessageAttachmentAggregateArgs>): Prisma.PrismaPromise<GetMessageAttachmentAggregateType<T>>

    /**
     * Group by MessageAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: MessageAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageAttachment model
   */
  readonly fields: MessageAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageAttachment model
   */
  interface MessageAttachmentFieldRefs {
    readonly id: FieldRef<"MessageAttachment", 'Int'>
    readonly messageId: FieldRef<"MessageAttachment", 'Int'>
    readonly kind: FieldRef<"MessageAttachment", 'AttachmentKind'>
    readonly url: FieldRef<"MessageAttachment", 'String'>
    readonly mimeType: FieldRef<"MessageAttachment", 'String'>
    readonly width: FieldRef<"MessageAttachment", 'Int'>
    readonly height: FieldRef<"MessageAttachment", 'Int'>
    readonly durationSec: FieldRef<"MessageAttachment", 'Int'>
    readonly caption: FieldRef<"MessageAttachment", 'String'>
    readonly createdAt: FieldRef<"MessageAttachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageAttachment findUnique
   */
  export type MessageAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which MessageAttachment to fetch.
     */
    where: MessageAttachmentWhereUniqueInput
  }

  /**
   * MessageAttachment findUniqueOrThrow
   */
  export type MessageAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which MessageAttachment to fetch.
     */
    where: MessageAttachmentWhereUniqueInput
  }

  /**
   * MessageAttachment findFirst
   */
  export type MessageAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which MessageAttachment to fetch.
     */
    where?: MessageAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageAttachments to fetch.
     */
    orderBy?: MessageAttachmentOrderByWithRelationInput | MessageAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageAttachments.
     */
    cursor?: MessageAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageAttachments.
     */
    distinct?: MessageAttachmentScalarFieldEnum | MessageAttachmentScalarFieldEnum[]
  }

  /**
   * MessageAttachment findFirstOrThrow
   */
  export type MessageAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which MessageAttachment to fetch.
     */
    where?: MessageAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageAttachments to fetch.
     */
    orderBy?: MessageAttachmentOrderByWithRelationInput | MessageAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageAttachments.
     */
    cursor?: MessageAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageAttachments.
     */
    distinct?: MessageAttachmentScalarFieldEnum | MessageAttachmentScalarFieldEnum[]
  }

  /**
   * MessageAttachment findMany
   */
  export type MessageAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which MessageAttachments to fetch.
     */
    where?: MessageAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageAttachments to fetch.
     */
    orderBy?: MessageAttachmentOrderByWithRelationInput | MessageAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageAttachments.
     */
    cursor?: MessageAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageAttachments.
     */
    skip?: number
    distinct?: MessageAttachmentScalarFieldEnum | MessageAttachmentScalarFieldEnum[]
  }

  /**
   * MessageAttachment create
   */
  export type MessageAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageAttachment.
     */
    data: XOR<MessageAttachmentCreateInput, MessageAttachmentUncheckedCreateInput>
  }

  /**
   * MessageAttachment createMany
   */
  export type MessageAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageAttachments.
     */
    data: MessageAttachmentCreateManyInput | MessageAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageAttachment createManyAndReturn
   */
  export type MessageAttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many MessageAttachments.
     */
    data: MessageAttachmentCreateManyInput | MessageAttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageAttachment update
   */
  export type MessageAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageAttachment.
     */
    data: XOR<MessageAttachmentUpdateInput, MessageAttachmentUncheckedUpdateInput>
    /**
     * Choose, which MessageAttachment to update.
     */
    where: MessageAttachmentWhereUniqueInput
  }

  /**
   * MessageAttachment updateMany
   */
  export type MessageAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageAttachments.
     */
    data: XOR<MessageAttachmentUpdateManyMutationInput, MessageAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which MessageAttachments to update
     */
    where?: MessageAttachmentWhereInput
    /**
     * Limit how many MessageAttachments to update.
     */
    limit?: number
  }

  /**
   * MessageAttachment updateManyAndReturn
   */
  export type MessageAttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * The data used to update MessageAttachments.
     */
    data: XOR<MessageAttachmentUpdateManyMutationInput, MessageAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which MessageAttachments to update
     */
    where?: MessageAttachmentWhereInput
    /**
     * Limit how many MessageAttachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageAttachment upsert
   */
  export type MessageAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageAttachment to update in case it exists.
     */
    where: MessageAttachmentWhereUniqueInput
    /**
     * In case the MessageAttachment found by the `where` argument doesn't exist, create a new MessageAttachment with this data.
     */
    create: XOR<MessageAttachmentCreateInput, MessageAttachmentUncheckedCreateInput>
    /**
     * In case the MessageAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageAttachmentUpdateInput, MessageAttachmentUncheckedUpdateInput>
  }

  /**
   * MessageAttachment delete
   */
  export type MessageAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
    /**
     * Filter which MessageAttachment to delete.
     */
    where: MessageAttachmentWhereUniqueInput
  }

  /**
   * MessageAttachment deleteMany
   */
  export type MessageAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageAttachments to delete
     */
    where?: MessageAttachmentWhereInput
    /**
     * Limit how many MessageAttachments to delete.
     */
    limit?: number
  }

  /**
   * MessageAttachment without action
   */
  export type MessageAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageAttachment
     */
    select?: MessageAttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageAttachment
     */
    omit?: MessageAttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model RandomChatRoom
   */

  export type AggregateRandomChatRoom = {
    _count: RandomChatRoomCountAggregateOutputType | null
    _avg: RandomChatRoomAvgAggregateOutputType | null
    _sum: RandomChatRoomSumAggregateOutputType | null
    _min: RandomChatRoomMinAggregateOutputType | null
    _max: RandomChatRoomMaxAggregateOutputType | null
  }

  export type RandomChatRoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RandomChatRoomSumAggregateOutputType = {
    id: number | null
  }

  export type RandomChatRoomMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    aiEnabled: boolean | null
  }

  export type RandomChatRoomMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    aiEnabled: boolean | null
  }

  export type RandomChatRoomCountAggregateOutputType = {
    id: number
    createdAt: number
    aiEnabled: number
    _all: number
  }


  export type RandomChatRoomAvgAggregateInputType = {
    id?: true
  }

  export type RandomChatRoomSumAggregateInputType = {
    id?: true
  }

  export type RandomChatRoomMinAggregateInputType = {
    id?: true
    createdAt?: true
    aiEnabled?: true
  }

  export type RandomChatRoomMaxAggregateInputType = {
    id?: true
    createdAt?: true
    aiEnabled?: true
  }

  export type RandomChatRoomCountAggregateInputType = {
    id?: true
    createdAt?: true
    aiEnabled?: true
    _all?: true
  }

  export type RandomChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RandomChatRoom to aggregate.
     */
    where?: RandomChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RandomChatRooms to fetch.
     */
    orderBy?: RandomChatRoomOrderByWithRelationInput | RandomChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RandomChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RandomChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RandomChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RandomChatRooms
    **/
    _count?: true | RandomChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RandomChatRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RandomChatRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RandomChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RandomChatRoomMaxAggregateInputType
  }

  export type GetRandomChatRoomAggregateType<T extends RandomChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRandomChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRandomChatRoom[P]>
      : GetScalarType<T[P], AggregateRandomChatRoom[P]>
  }




  export type RandomChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RandomChatRoomWhereInput
    orderBy?: RandomChatRoomOrderByWithAggregationInput | RandomChatRoomOrderByWithAggregationInput[]
    by: RandomChatRoomScalarFieldEnum[] | RandomChatRoomScalarFieldEnum
    having?: RandomChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RandomChatRoomCountAggregateInputType | true
    _avg?: RandomChatRoomAvgAggregateInputType
    _sum?: RandomChatRoomSumAggregateInputType
    _min?: RandomChatRoomMinAggregateInputType
    _max?: RandomChatRoomMaxAggregateInputType
  }

  export type RandomChatRoomGroupByOutputType = {
    id: number
    createdAt: Date
    aiEnabled: boolean
    _count: RandomChatRoomCountAggregateOutputType | null
    _avg: RandomChatRoomAvgAggregateOutputType | null
    _sum: RandomChatRoomSumAggregateOutputType | null
    _min: RandomChatRoomMinAggregateOutputType | null
    _max: RandomChatRoomMaxAggregateOutputType | null
  }

  type GetRandomChatRoomGroupByPayload<T extends RandomChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RandomChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RandomChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RandomChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], RandomChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type RandomChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    aiEnabled?: boolean
    participants?: boolean | RandomChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | RandomChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | RandomChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["randomChatRoom"]>

  export type RandomChatRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    aiEnabled?: boolean
  }, ExtArgs["result"]["randomChatRoom"]>

  export type RandomChatRoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    aiEnabled?: boolean
  }, ExtArgs["result"]["randomChatRoom"]>

  export type RandomChatRoomSelectScalar = {
    id?: boolean
    createdAt?: boolean
    aiEnabled?: boolean
  }

  export type RandomChatRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "aiEnabled", ExtArgs["result"]["randomChatRoom"]>
  export type RandomChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | RandomChatRoom$participantsArgs<ExtArgs>
    messages?: boolean | RandomChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | RandomChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RandomChatRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RandomChatRoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RandomChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RandomChatRoom"
    objects: {
      participants: Prisma.$UserPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      aiEnabled: boolean
    }, ExtArgs["result"]["randomChatRoom"]>
    composites: {}
  }

  type RandomChatRoomGetPayload<S extends boolean | null | undefined | RandomChatRoomDefaultArgs> = $Result.GetResult<Prisma.$RandomChatRoomPayload, S>

  type RandomChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RandomChatRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RandomChatRoomCountAggregateInputType | true
    }

  export interface RandomChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RandomChatRoom'], meta: { name: 'RandomChatRoom' } }
    /**
     * Find zero or one RandomChatRoom that matches the filter.
     * @param {RandomChatRoomFindUniqueArgs} args - Arguments to find a RandomChatRoom
     * @example
     * // Get one RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RandomChatRoomFindUniqueArgs>(args: SelectSubset<T, RandomChatRoomFindUniqueArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RandomChatRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RandomChatRoomFindUniqueOrThrowArgs} args - Arguments to find a RandomChatRoom
     * @example
     * // Get one RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RandomChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RandomChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RandomChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomFindFirstArgs} args - Arguments to find a RandomChatRoom
     * @example
     * // Get one RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RandomChatRoomFindFirstArgs>(args?: SelectSubset<T, RandomChatRoomFindFirstArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RandomChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomFindFirstOrThrowArgs} args - Arguments to find a RandomChatRoom
     * @example
     * // Get one RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RandomChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RandomChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RandomChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RandomChatRooms
     * const randomChatRooms = await prisma.randomChatRoom.findMany()
     * 
     * // Get first 10 RandomChatRooms
     * const randomChatRooms = await prisma.randomChatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const randomChatRoomWithIdOnly = await prisma.randomChatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RandomChatRoomFindManyArgs>(args?: SelectSubset<T, RandomChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RandomChatRoom.
     * @param {RandomChatRoomCreateArgs} args - Arguments to create a RandomChatRoom.
     * @example
     * // Create one RandomChatRoom
     * const RandomChatRoom = await prisma.randomChatRoom.create({
     *   data: {
     *     // ... data to create a RandomChatRoom
     *   }
     * })
     * 
     */
    create<T extends RandomChatRoomCreateArgs>(args: SelectSubset<T, RandomChatRoomCreateArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RandomChatRooms.
     * @param {RandomChatRoomCreateManyArgs} args - Arguments to create many RandomChatRooms.
     * @example
     * // Create many RandomChatRooms
     * const randomChatRoom = await prisma.randomChatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RandomChatRoomCreateManyArgs>(args?: SelectSubset<T, RandomChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RandomChatRooms and returns the data saved in the database.
     * @param {RandomChatRoomCreateManyAndReturnArgs} args - Arguments to create many RandomChatRooms.
     * @example
     * // Create many RandomChatRooms
     * const randomChatRoom = await prisma.randomChatRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RandomChatRooms and only return the `id`
     * const randomChatRoomWithIdOnly = await prisma.randomChatRoom.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RandomChatRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RandomChatRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RandomChatRoom.
     * @param {RandomChatRoomDeleteArgs} args - Arguments to delete one RandomChatRoom.
     * @example
     * // Delete one RandomChatRoom
     * const RandomChatRoom = await prisma.randomChatRoom.delete({
     *   where: {
     *     // ... filter to delete one RandomChatRoom
     *   }
     * })
     * 
     */
    delete<T extends RandomChatRoomDeleteArgs>(args: SelectSubset<T, RandomChatRoomDeleteArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RandomChatRoom.
     * @param {RandomChatRoomUpdateArgs} args - Arguments to update one RandomChatRoom.
     * @example
     * // Update one RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RandomChatRoomUpdateArgs>(args: SelectSubset<T, RandomChatRoomUpdateArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RandomChatRooms.
     * @param {RandomChatRoomDeleteManyArgs} args - Arguments to filter RandomChatRooms to delete.
     * @example
     * // Delete a few RandomChatRooms
     * const { count } = await prisma.randomChatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RandomChatRoomDeleteManyArgs>(args?: SelectSubset<T, RandomChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RandomChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RandomChatRooms
     * const randomChatRoom = await prisma.randomChatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RandomChatRoomUpdateManyArgs>(args: SelectSubset<T, RandomChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RandomChatRooms and returns the data updated in the database.
     * @param {RandomChatRoomUpdateManyAndReturnArgs} args - Arguments to update many RandomChatRooms.
     * @example
     * // Update many RandomChatRooms
     * const randomChatRoom = await prisma.randomChatRoom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RandomChatRooms and only return the `id`
     * const randomChatRoomWithIdOnly = await prisma.randomChatRoom.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RandomChatRoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RandomChatRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RandomChatRoom.
     * @param {RandomChatRoomUpsertArgs} args - Arguments to update or create a RandomChatRoom.
     * @example
     * // Update or create a RandomChatRoom
     * const randomChatRoom = await prisma.randomChatRoom.upsert({
     *   create: {
     *     // ... data to create a RandomChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RandomChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends RandomChatRoomUpsertArgs>(args: SelectSubset<T, RandomChatRoomUpsertArgs<ExtArgs>>): Prisma__RandomChatRoomClient<$Result.GetResult<Prisma.$RandomChatRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RandomChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomCountArgs} args - Arguments to filter RandomChatRooms to count.
     * @example
     * // Count the number of RandomChatRooms
     * const count = await prisma.randomChatRoom.count({
     *   where: {
     *     // ... the filter for the RandomChatRooms we want to count
     *   }
     * })
    **/
    count<T extends RandomChatRoomCountArgs>(
      args?: Subset<T, RandomChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RandomChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RandomChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RandomChatRoomAggregateArgs>(args: Subset<T, RandomChatRoomAggregateArgs>): Prisma.PrismaPromise<GetRandomChatRoomAggregateType<T>>

    /**
     * Group by RandomChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RandomChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RandomChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RandomChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: RandomChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RandomChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRandomChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RandomChatRoom model
   */
  readonly fields: RandomChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RandomChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RandomChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends RandomChatRoom$participantsArgs<ExtArgs> = {}>(args?: Subset<T, RandomChatRoom$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends RandomChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, RandomChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RandomChatRoom model
   */
  interface RandomChatRoomFieldRefs {
    readonly id: FieldRef<"RandomChatRoom", 'Int'>
    readonly createdAt: FieldRef<"RandomChatRoom", 'DateTime'>
    readonly aiEnabled: FieldRef<"RandomChatRoom", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RandomChatRoom findUnique
   */
  export type RandomChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which RandomChatRoom to fetch.
     */
    where: RandomChatRoomWhereUniqueInput
  }

  /**
   * RandomChatRoom findUniqueOrThrow
   */
  export type RandomChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which RandomChatRoom to fetch.
     */
    where: RandomChatRoomWhereUniqueInput
  }

  /**
   * RandomChatRoom findFirst
   */
  export type RandomChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which RandomChatRoom to fetch.
     */
    where?: RandomChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RandomChatRooms to fetch.
     */
    orderBy?: RandomChatRoomOrderByWithRelationInput | RandomChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RandomChatRooms.
     */
    cursor?: RandomChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RandomChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RandomChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RandomChatRooms.
     */
    distinct?: RandomChatRoomScalarFieldEnum | RandomChatRoomScalarFieldEnum[]
  }

  /**
   * RandomChatRoom findFirstOrThrow
   */
  export type RandomChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which RandomChatRoom to fetch.
     */
    where?: RandomChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RandomChatRooms to fetch.
     */
    orderBy?: RandomChatRoomOrderByWithRelationInput | RandomChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RandomChatRooms.
     */
    cursor?: RandomChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RandomChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RandomChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RandomChatRooms.
     */
    distinct?: RandomChatRoomScalarFieldEnum | RandomChatRoomScalarFieldEnum[]
  }

  /**
   * RandomChatRoom findMany
   */
  export type RandomChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which RandomChatRooms to fetch.
     */
    where?: RandomChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RandomChatRooms to fetch.
     */
    orderBy?: RandomChatRoomOrderByWithRelationInput | RandomChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RandomChatRooms.
     */
    cursor?: RandomChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RandomChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RandomChatRooms.
     */
    skip?: number
    distinct?: RandomChatRoomScalarFieldEnum | RandomChatRoomScalarFieldEnum[]
  }

  /**
   * RandomChatRoom create
   */
  export type RandomChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a RandomChatRoom.
     */
    data?: XOR<RandomChatRoomCreateInput, RandomChatRoomUncheckedCreateInput>
  }

  /**
   * RandomChatRoom createMany
   */
  export type RandomChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RandomChatRooms.
     */
    data: RandomChatRoomCreateManyInput | RandomChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RandomChatRoom createManyAndReturn
   */
  export type RandomChatRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * The data used to create many RandomChatRooms.
     */
    data: RandomChatRoomCreateManyInput | RandomChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RandomChatRoom update
   */
  export type RandomChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a RandomChatRoom.
     */
    data: XOR<RandomChatRoomUpdateInput, RandomChatRoomUncheckedUpdateInput>
    /**
     * Choose, which RandomChatRoom to update.
     */
    where: RandomChatRoomWhereUniqueInput
  }

  /**
   * RandomChatRoom updateMany
   */
  export type RandomChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RandomChatRooms.
     */
    data: XOR<RandomChatRoomUpdateManyMutationInput, RandomChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which RandomChatRooms to update
     */
    where?: RandomChatRoomWhereInput
    /**
     * Limit how many RandomChatRooms to update.
     */
    limit?: number
  }

  /**
   * RandomChatRoom updateManyAndReturn
   */
  export type RandomChatRoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * The data used to update RandomChatRooms.
     */
    data: XOR<RandomChatRoomUpdateManyMutationInput, RandomChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which RandomChatRooms to update
     */
    where?: RandomChatRoomWhereInput
    /**
     * Limit how many RandomChatRooms to update.
     */
    limit?: number
  }

  /**
   * RandomChatRoom upsert
   */
  export type RandomChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the RandomChatRoom to update in case it exists.
     */
    where: RandomChatRoomWhereUniqueInput
    /**
     * In case the RandomChatRoom found by the `where` argument doesn't exist, create a new RandomChatRoom with this data.
     */
    create: XOR<RandomChatRoomCreateInput, RandomChatRoomUncheckedCreateInput>
    /**
     * In case the RandomChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RandomChatRoomUpdateInput, RandomChatRoomUncheckedUpdateInput>
  }

  /**
   * RandomChatRoom delete
   */
  export type RandomChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
    /**
     * Filter which RandomChatRoom to delete.
     */
    where: RandomChatRoomWhereUniqueInput
  }

  /**
   * RandomChatRoom deleteMany
   */
  export type RandomChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RandomChatRooms to delete
     */
    where?: RandomChatRoomWhereInput
    /**
     * Limit how many RandomChatRooms to delete.
     */
    limit?: number
  }

  /**
   * RandomChatRoom.participants
   */
  export type RandomChatRoom$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * RandomChatRoom.messages
   */
  export type RandomChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * RandomChatRoom without action
   */
  export type RandomChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RandomChatRoom
     */
    select?: RandomChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RandomChatRoom
     */
    omit?: RandomChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RandomChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    externalPhone: string | null
    externalName: string | null
    alias: string | null
    favorite: boolean | null
    createdAt: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    ownerId: number | null
    userId: number | null
    externalPhone: string | null
    externalName: string | null
    alias: string | null
    favorite: boolean | null
    createdAt: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    ownerId: number
    userId: number
    externalPhone: number
    externalName: number
    alias: number
    favorite: number
    createdAt: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    externalPhone?: true
    externalName?: true
    alias?: true
    favorite?: true
    createdAt?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    externalPhone?: true
    externalName?: true
    alias?: true
    favorite?: true
    createdAt?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    ownerId?: true
    userId?: true
    externalPhone?: true
    externalName?: true
    alias?: true
    favorite?: true
    createdAt?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: number
    ownerId: number
    userId: number | null
    externalPhone: string | null
    externalName: string | null
    alias: string | null
    favorite: boolean
    createdAt: Date
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    externalPhone?: boolean
    externalName?: boolean
    alias?: boolean
    favorite?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    externalPhone?: boolean
    externalName?: boolean
    alias?: boolean
    favorite?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    externalPhone?: boolean
    externalName?: boolean
    alias?: boolean
    favorite?: boolean
    createdAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    ownerId?: boolean
    userId?: boolean
    externalPhone?: boolean
    externalName?: boolean
    alias?: boolean
    favorite?: boolean
    createdAt?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "userId" | "externalPhone" | "externalName" | "alias" | "favorite" | "createdAt", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | Contact$userArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ownerId: number
      userId: number | null
      externalPhone: string | null
      externalName: string | null
      alias: string | null
      favorite: boolean
      createdAt: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends Contact$userArgs<ExtArgs> = {}>(args?: Subset<T, Contact$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'Int'>
    readonly ownerId: FieldRef<"Contact", 'Int'>
    readonly userId: FieldRef<"Contact", 'Int'>
    readonly externalPhone: FieldRef<"Contact", 'String'>
    readonly externalName: FieldRef<"Contact", 'String'>
    readonly alias: FieldRef<"Contact", 'String'>
    readonly favorite: FieldRef<"Contact", 'Boolean'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact.user
   */
  export type Contact$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    messageId: number | null
    reporterId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    messageId: number | null
    reporterId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    messageId: number | null
    reporterId: number | null
    decryptedContent: string | null
    createdAt: Date | null
    status: string | null
    resolvedAt: Date | null
    notes: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    messageId: number | null
    reporterId: number | null
    decryptedContent: string | null
    createdAt: Date | null
    status: string | null
    resolvedAt: Date | null
    notes: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    messageId: number
    reporterId: number
    decryptedContent: number
    createdAt: number
    status: number
    resolvedAt: number
    notes: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    messageId?: true
    reporterId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    messageId?: true
    reporterId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    messageId?: true
    reporterId?: true
    decryptedContent?: true
    createdAt?: true
    status?: true
    resolvedAt?: true
    notes?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    messageId?: true
    reporterId?: true
    decryptedContent?: true
    createdAt?: true
    status?: true
    resolvedAt?: true
    notes?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    messageId?: true
    reporterId?: true
    decryptedContent?: true
    createdAt?: true
    status?: true
    resolvedAt?: true
    notes?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    messageId: number
    reporterId: number
    decryptedContent: string
    createdAt: Date
    status: string
    resolvedAt: Date | null
    notes: string | null
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    reporterId?: boolean
    decryptedContent?: boolean
    createdAt?: boolean
    status?: boolean
    resolvedAt?: boolean
    notes?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    reporterId?: boolean
    decryptedContent?: boolean
    createdAt?: boolean
    status?: boolean
    resolvedAt?: boolean
    notes?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    reporterId?: boolean
    decryptedContent?: boolean
    createdAt?: boolean
    status?: boolean
    resolvedAt?: boolean
    notes?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    messageId?: boolean
    reporterId?: boolean
    decryptedContent?: boolean
    createdAt?: boolean
    status?: boolean
    resolvedAt?: boolean
    notes?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "reporterId" | "decryptedContent" | "createdAt" | "status" | "resolvedAt" | "notes", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    reporter?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
      reporter: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messageId: number
      reporterId: number
      decryptedContent: string
      createdAt: Date
      status: string
      resolvedAt: Date | null
      notes: string | null
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reporter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly messageId: FieldRef<"Report", 'Int'>
    readonly reporterId: FieldRef<"Report", 'Int'>
    readonly decryptedContent: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly status: FieldRef<"Report", 'String'>
    readonly resolvedAt: FieldRef<"Report", 'DateTime'>
    readonly notes: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    actorId: number | null
    status: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    actorId: number | null
    status: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    actorId: number | null
    action: string | null
    resource: string | null
    resourceId: string | null
    status: number | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    actorId: number | null
    action: string | null
    resource: string | null
    resourceId: string | null
    status: number | null
    ip: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    actorId: number
    action: number
    resource: number
    resourceId: number
    status: number
    ip: number
    userAgent: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    actorId?: true
    status?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    actorId?: true
    status?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    resource?: true
    resourceId?: true
    status?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    resource?: true
    resourceId?: true
    status?: true
    ip?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    resource?: true
    resourceId?: true
    status?: true
    ip?: true
    userAgent?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    actorId: number
    action: string
    resource: string | null
    resourceId: string | null
    status: number
    ip: string | null
    userAgent: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    status?: boolean
    ip?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    status?: boolean
    ip?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    status?: boolean
    ip?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    actorId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    status?: boolean
    ip?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "actorId" | "action" | "resource" | "resourceId" | "status" | "ip" | "userAgent" | "metadata" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      actor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      actorId: number
      action: string
      resource: string | null
      resourceId: string | null
      status: number
      ip: string | null
      userAgent: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly actorId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly status: FieldRef<"AuditLog", 'Int'>
    readonly ip: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Device
   */

  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceAvgAggregateOutputType = {
    userId: number | null
    revokedById: number | null
  }

  export type DeviceSumAggregateOutputType = {
    userId: number | null
    revokedById: number | null
  }

  export type DeviceMinAggregateOutputType = {
    id: string | null
    userId: number | null
    publicKey: string | null
    name: string | null
    platform: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    lastSeenAt: Date | null
    revokedAt: Date | null
    revokedById: number | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    publicKey: string | null
    name: string | null
    platform: string | null
    isPrimary: boolean | null
    createdAt: Date | null
    lastSeenAt: Date | null
    revokedAt: Date | null
    revokedById: number | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    userId: number
    publicKey: number
    name: number
    platform: number
    isPrimary: number
    createdAt: number
    lastSeenAt: number
    revokedAt: number
    revokedById: number
    _all: number
  }


  export type DeviceAvgAggregateInputType = {
    userId?: true
    revokedById?: true
  }

  export type DeviceSumAggregateInputType = {
    userId?: true
    revokedById?: true
  }

  export type DeviceMinAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    name?: true
    platform?: true
    isPrimary?: true
    createdAt?: true
    lastSeenAt?: true
    revokedAt?: true
    revokedById?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    name?: true
    platform?: true
    isPrimary?: true
    createdAt?: true
    lastSeenAt?: true
    revokedAt?: true
    revokedById?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    userId?: true
    publicKey?: true
    name?: true
    platform?: true
    isPrimary?: true
    createdAt?: true
    lastSeenAt?: true
    revokedAt?: true
    revokedById?: true
    _all?: true
  }

  export type DeviceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Device to aggregate.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceWhereInput
    orderBy?: DeviceOrderByWithAggregationInput | DeviceOrderByWithAggregationInput[]
    by: DeviceScalarFieldEnum[] | DeviceScalarFieldEnum
    having?: DeviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _avg?: DeviceAvgAggregateInputType
    _sum?: DeviceSumAggregateInputType
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }

  export type DeviceGroupByOutputType = {
    id: string
    userId: number
    publicKey: string
    name: string | null
    platform: string | null
    isPrimary: boolean
    createdAt: Date
    lastSeenAt: Date | null
    revokedAt: Date | null
    revokedById: number | null
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type DeviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    name?: boolean
    platform?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    lastSeenAt?: boolean
    revokedAt?: boolean
    revokedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    name?: boolean
    platform?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    lastSeenAt?: boolean
    revokedAt?: boolean
    revokedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    name?: boolean
    platform?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    lastSeenAt?: boolean
    revokedAt?: boolean
    revokedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }, ExtArgs["result"]["device"]>

  export type DeviceSelectScalar = {
    id?: boolean
    userId?: boolean
    publicKey?: boolean
    name?: boolean
    platform?: boolean
    isPrimary?: boolean
    createdAt?: boolean
    lastSeenAt?: boolean
    revokedAt?: boolean
    revokedById?: boolean
  }

  export type DeviceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "publicKey" | "name" | "platform" | "isPrimary" | "createdAt" | "lastSeenAt" | "revokedAt" | "revokedById", ExtArgs["result"]["device"]>
  export type DeviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }
  export type DeviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }
  export type DeviceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    revokedBy?: boolean | Device$revokedByArgs<ExtArgs>
  }

  export type $DevicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Device"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      revokedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      publicKey: string
      name: string | null
      platform: string | null
      isPrimary: boolean
      createdAt: Date
      lastSeenAt: Date | null
      revokedAt: Date | null
      revokedById: number | null
    }, ExtArgs["result"]["device"]>
    composites: {}
  }

  type DeviceGetPayload<S extends boolean | null | undefined | DeviceDefaultArgs> = $Result.GetResult<Prisma.$DevicePayload, S>

  type DeviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceCountAggregateInputType | true
    }

  export interface DeviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Device'], meta: { name: 'Device' } }
    /**
     * Find zero or one Device that matches the filter.
     * @param {DeviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceFindUniqueArgs>(args: SelectSubset<T, DeviceFindUniqueArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Device that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceFindFirstArgs>(args?: SelectSubset<T, DeviceFindFirstArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Device that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeviceFindManyArgs>(args?: SelectSubset<T, DeviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Device.
     * @param {DeviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
     */
    create<T extends DeviceCreateArgs>(args: SelectSubset<T, DeviceCreateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Devices.
     * @param {DeviceCreateManyArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceCreateManyArgs>(args?: SelectSubset<T, DeviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Devices and returns the data saved in the database.
     * @param {DeviceCreateManyAndReturnArgs} args - Arguments to create many Devices.
     * @example
     * // Create many Devices
     * const device = await prisma.device.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Devices and only return the `id`
     * const deviceWithIdOnly = await prisma.device.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Device.
     * @param {DeviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
     */
    delete<T extends DeviceDeleteArgs>(args: SelectSubset<T, DeviceDeleteArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Device.
     * @param {DeviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceUpdateArgs>(args: SelectSubset<T, DeviceUpdateArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Devices.
     * @param {DeviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceDeleteManyArgs>(args?: SelectSubset<T, DeviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceUpdateManyArgs>(args: SelectSubset<T, DeviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices and returns the data updated in the database.
     * @param {DeviceUpdateManyAndReturnArgs} args - Arguments to update many Devices.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Devices and only return the `id`
     * const deviceWithIdOnly = await prisma.device.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Device.
     * @param {DeviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
     */
    upsert<T extends DeviceUpsertArgs>(args: SelectSubset<T, DeviceUpsertArgs<ExtArgs>>): Prisma__DeviceClient<$Result.GetResult<Prisma.$DevicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends DeviceCountArgs>(
      args?: Subset<T, DeviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): Prisma.PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Device model
   */
  readonly fields: DeviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    revokedBy<T extends Device$revokedByArgs<ExtArgs> = {}>(args?: Subset<T, Device$revokedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Device model
   */
  interface DeviceFieldRefs {
    readonly id: FieldRef<"Device", 'String'>
    readonly userId: FieldRef<"Device", 'Int'>
    readonly publicKey: FieldRef<"Device", 'String'>
    readonly name: FieldRef<"Device", 'String'>
    readonly platform: FieldRef<"Device", 'String'>
    readonly isPrimary: FieldRef<"Device", 'Boolean'>
    readonly createdAt: FieldRef<"Device", 'DateTime'>
    readonly lastSeenAt: FieldRef<"Device", 'DateTime'>
    readonly revokedAt: FieldRef<"Device", 'DateTime'>
    readonly revokedById: FieldRef<"Device", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Device findUnique
   */
  export type DeviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findUniqueOrThrow
   */
  export type DeviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device findFirst
   */
  export type DeviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findFirstOrThrow
   */
  export type DeviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Device to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devices.
     */
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device findMany
   */
  export type DeviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter, which Devices to fetch.
     */
    where?: DeviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devices to fetch.
     */
    orderBy?: DeviceOrderByWithRelationInput | DeviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devices.
     */
    cursor?: DeviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devices.
     */
    skip?: number
    distinct?: DeviceScalarFieldEnum | DeviceScalarFieldEnum[]
  }

  /**
   * Device create
   */
  export type DeviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to create a Device.
     */
    data: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
  }

  /**
   * Device createMany
   */
  export type DeviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Device createManyAndReturn
   */
  export type DeviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * The data used to create many Devices.
     */
    data: DeviceCreateManyInput | DeviceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Device update
   */
  export type DeviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The data needed to update a Device.
     */
    data: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
    /**
     * Choose, which Device to update.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device updateMany
   */
  export type DeviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to update.
     */
    limit?: number
  }

  /**
   * Device updateManyAndReturn
   */
  export type DeviceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * The data used to update Devices.
     */
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyInput>
    /**
     * Filter which Devices to update
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Device upsert
   */
  export type DeviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * The filter to search for the Device to update in case it exists.
     */
    where: DeviceWhereUniqueInput
    /**
     * In case the Device found by the `where` argument doesn't exist, create a new Device with this data.
     */
    create: XOR<DeviceCreateInput, DeviceUncheckedCreateInput>
    /**
     * In case the Device was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceUpdateInput, DeviceUncheckedUpdateInput>
  }

  /**
   * Device delete
   */
  export type DeviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
    /**
     * Filter which Device to delete.
     */
    where: DeviceWhereUniqueInput
  }

  /**
   * Device deleteMany
   */
  export type DeviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Devices to delete
     */
    where?: DeviceWhereInput
    /**
     * Limit how many Devices to delete.
     */
    limit?: number
  }

  /**
   * Device.revokedBy
   */
  export type Device$revokedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Device without action
   */
  export type DeviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Device
     */
    select?: DeviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Device
     */
    omit?: DeviceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeviceInclude<ExtArgs> | null
  }


  /**
   * Model ProvisionLink
   */

  export type AggregateProvisionLink = {
    _count: ProvisionLinkCountAggregateOutputType | null
    _min: ProvisionLinkMinAggregateOutputType | null
    _max: ProvisionLinkMaxAggregateOutputType | null
  }

  export type ProvisionLinkMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdById: string | null
    secret: string | null
    expiresAt: Date | null
    usedAt: Date | null
    sasCode: string | null
    createdAt: Date | null
  }

  export type ProvisionLinkMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdById: string | null
    secret: string | null
    expiresAt: Date | null
    usedAt: Date | null
    sasCode: string | null
    createdAt: Date | null
  }

  export type ProvisionLinkCountAggregateOutputType = {
    id: number
    userId: number
    createdById: number
    secret: number
    expiresAt: number
    usedAt: number
    sasCode: number
    createdAt: number
    _all: number
  }


  export type ProvisionLinkMinAggregateInputType = {
    id?: true
    userId?: true
    createdById?: true
    secret?: true
    expiresAt?: true
    usedAt?: true
    sasCode?: true
    createdAt?: true
  }

  export type ProvisionLinkMaxAggregateInputType = {
    id?: true
    userId?: true
    createdById?: true
    secret?: true
    expiresAt?: true
    usedAt?: true
    sasCode?: true
    createdAt?: true
  }

  export type ProvisionLinkCountAggregateInputType = {
    id?: true
    userId?: true
    createdById?: true
    secret?: true
    expiresAt?: true
    usedAt?: true
    sasCode?: true
    createdAt?: true
    _all?: true
  }

  export type ProvisionLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProvisionLink to aggregate.
     */
    where?: ProvisionLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProvisionLinks to fetch.
     */
    orderBy?: ProvisionLinkOrderByWithRelationInput | ProvisionLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProvisionLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProvisionLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProvisionLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProvisionLinks
    **/
    _count?: true | ProvisionLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProvisionLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProvisionLinkMaxAggregateInputType
  }

  export type GetProvisionLinkAggregateType<T extends ProvisionLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateProvisionLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvisionLink[P]>
      : GetScalarType<T[P], AggregateProvisionLink[P]>
  }




  export type ProvisionLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProvisionLinkWhereInput
    orderBy?: ProvisionLinkOrderByWithAggregationInput | ProvisionLinkOrderByWithAggregationInput[]
    by: ProvisionLinkScalarFieldEnum[] | ProvisionLinkScalarFieldEnum
    having?: ProvisionLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProvisionLinkCountAggregateInputType | true
    _min?: ProvisionLinkMinAggregateInputType
    _max?: ProvisionLinkMaxAggregateInputType
  }

  export type ProvisionLinkGroupByOutputType = {
    id: string
    userId: string
    createdById: string
    secret: string
    expiresAt: Date
    usedAt: Date | null
    sasCode: string
    createdAt: Date
    _count: ProvisionLinkCountAggregateOutputType | null
    _min: ProvisionLinkMinAggregateOutputType | null
    _max: ProvisionLinkMaxAggregateOutputType | null
  }

  type GetProvisionLinkGroupByPayload<T extends ProvisionLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProvisionLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProvisionLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProvisionLinkGroupByOutputType[P]>
            : GetScalarType<T[P], ProvisionLinkGroupByOutputType[P]>
        }
      >
    >


  export type ProvisionLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdById?: boolean
    secret?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    sasCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["provisionLink"]>

  export type ProvisionLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdById?: boolean
    secret?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    sasCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["provisionLink"]>

  export type ProvisionLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdById?: boolean
    secret?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    sasCode?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["provisionLink"]>

  export type ProvisionLinkSelectScalar = {
    id?: boolean
    userId?: boolean
    createdById?: boolean
    secret?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    sasCode?: boolean
    createdAt?: boolean
  }

  export type ProvisionLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdById" | "secret" | "expiresAt" | "usedAt" | "sasCode" | "createdAt", ExtArgs["result"]["provisionLink"]>

  export type $ProvisionLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProvisionLink"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      createdById: string
      secret: string
      expiresAt: Date
      usedAt: Date | null
      sasCode: string
      createdAt: Date
    }, ExtArgs["result"]["provisionLink"]>
    composites: {}
  }

  type ProvisionLinkGetPayload<S extends boolean | null | undefined | ProvisionLinkDefaultArgs> = $Result.GetResult<Prisma.$ProvisionLinkPayload, S>

  type ProvisionLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProvisionLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProvisionLinkCountAggregateInputType | true
    }

  export interface ProvisionLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProvisionLink'], meta: { name: 'ProvisionLink' } }
    /**
     * Find zero or one ProvisionLink that matches the filter.
     * @param {ProvisionLinkFindUniqueArgs} args - Arguments to find a ProvisionLink
     * @example
     * // Get one ProvisionLink
     * const provisionLink = await prisma.provisionLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProvisionLinkFindUniqueArgs>(args: SelectSubset<T, ProvisionLinkFindUniqueArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProvisionLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProvisionLinkFindUniqueOrThrowArgs} args - Arguments to find a ProvisionLink
     * @example
     * // Get one ProvisionLink
     * const provisionLink = await prisma.provisionLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProvisionLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, ProvisionLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProvisionLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkFindFirstArgs} args - Arguments to find a ProvisionLink
     * @example
     * // Get one ProvisionLink
     * const provisionLink = await prisma.provisionLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProvisionLinkFindFirstArgs>(args?: SelectSubset<T, ProvisionLinkFindFirstArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProvisionLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkFindFirstOrThrowArgs} args - Arguments to find a ProvisionLink
     * @example
     * // Get one ProvisionLink
     * const provisionLink = await prisma.provisionLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProvisionLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, ProvisionLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProvisionLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProvisionLinks
     * const provisionLinks = await prisma.provisionLink.findMany()
     * 
     * // Get first 10 ProvisionLinks
     * const provisionLinks = await prisma.provisionLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const provisionLinkWithIdOnly = await prisma.provisionLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProvisionLinkFindManyArgs>(args?: SelectSubset<T, ProvisionLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProvisionLink.
     * @param {ProvisionLinkCreateArgs} args - Arguments to create a ProvisionLink.
     * @example
     * // Create one ProvisionLink
     * const ProvisionLink = await prisma.provisionLink.create({
     *   data: {
     *     // ... data to create a ProvisionLink
     *   }
     * })
     * 
     */
    create<T extends ProvisionLinkCreateArgs>(args: SelectSubset<T, ProvisionLinkCreateArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProvisionLinks.
     * @param {ProvisionLinkCreateManyArgs} args - Arguments to create many ProvisionLinks.
     * @example
     * // Create many ProvisionLinks
     * const provisionLink = await prisma.provisionLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProvisionLinkCreateManyArgs>(args?: SelectSubset<T, ProvisionLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProvisionLinks and returns the data saved in the database.
     * @param {ProvisionLinkCreateManyAndReturnArgs} args - Arguments to create many ProvisionLinks.
     * @example
     * // Create many ProvisionLinks
     * const provisionLink = await prisma.provisionLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProvisionLinks and only return the `id`
     * const provisionLinkWithIdOnly = await prisma.provisionLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProvisionLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, ProvisionLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProvisionLink.
     * @param {ProvisionLinkDeleteArgs} args - Arguments to delete one ProvisionLink.
     * @example
     * // Delete one ProvisionLink
     * const ProvisionLink = await prisma.provisionLink.delete({
     *   where: {
     *     // ... filter to delete one ProvisionLink
     *   }
     * })
     * 
     */
    delete<T extends ProvisionLinkDeleteArgs>(args: SelectSubset<T, ProvisionLinkDeleteArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProvisionLink.
     * @param {ProvisionLinkUpdateArgs} args - Arguments to update one ProvisionLink.
     * @example
     * // Update one ProvisionLink
     * const provisionLink = await prisma.provisionLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProvisionLinkUpdateArgs>(args: SelectSubset<T, ProvisionLinkUpdateArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProvisionLinks.
     * @param {ProvisionLinkDeleteManyArgs} args - Arguments to filter ProvisionLinks to delete.
     * @example
     * // Delete a few ProvisionLinks
     * const { count } = await prisma.provisionLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProvisionLinkDeleteManyArgs>(args?: SelectSubset<T, ProvisionLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProvisionLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProvisionLinks
     * const provisionLink = await prisma.provisionLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProvisionLinkUpdateManyArgs>(args: SelectSubset<T, ProvisionLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProvisionLinks and returns the data updated in the database.
     * @param {ProvisionLinkUpdateManyAndReturnArgs} args - Arguments to update many ProvisionLinks.
     * @example
     * // Update many ProvisionLinks
     * const provisionLink = await prisma.provisionLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProvisionLinks and only return the `id`
     * const provisionLinkWithIdOnly = await prisma.provisionLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProvisionLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, ProvisionLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProvisionLink.
     * @param {ProvisionLinkUpsertArgs} args - Arguments to update or create a ProvisionLink.
     * @example
     * // Update or create a ProvisionLink
     * const provisionLink = await prisma.provisionLink.upsert({
     *   create: {
     *     // ... data to create a ProvisionLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProvisionLink we want to update
     *   }
     * })
     */
    upsert<T extends ProvisionLinkUpsertArgs>(args: SelectSubset<T, ProvisionLinkUpsertArgs<ExtArgs>>): Prisma__ProvisionLinkClient<$Result.GetResult<Prisma.$ProvisionLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProvisionLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkCountArgs} args - Arguments to filter ProvisionLinks to count.
     * @example
     * // Count the number of ProvisionLinks
     * const count = await prisma.provisionLink.count({
     *   where: {
     *     // ... the filter for the ProvisionLinks we want to count
     *   }
     * })
    **/
    count<T extends ProvisionLinkCountArgs>(
      args?: Subset<T, ProvisionLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProvisionLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProvisionLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProvisionLinkAggregateArgs>(args: Subset<T, ProvisionLinkAggregateArgs>): Prisma.PrismaPromise<GetProvisionLinkAggregateType<T>>

    /**
     * Group by ProvisionLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvisionLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProvisionLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProvisionLinkGroupByArgs['orderBy'] }
        : { orderBy?: ProvisionLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProvisionLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvisionLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProvisionLink model
   */
  readonly fields: ProvisionLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProvisionLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProvisionLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProvisionLink model
   */
  interface ProvisionLinkFieldRefs {
    readonly id: FieldRef<"ProvisionLink", 'String'>
    readonly userId: FieldRef<"ProvisionLink", 'String'>
    readonly createdById: FieldRef<"ProvisionLink", 'String'>
    readonly secret: FieldRef<"ProvisionLink", 'String'>
    readonly expiresAt: FieldRef<"ProvisionLink", 'DateTime'>
    readonly usedAt: FieldRef<"ProvisionLink", 'DateTime'>
    readonly sasCode: FieldRef<"ProvisionLink", 'String'>
    readonly createdAt: FieldRef<"ProvisionLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProvisionLink findUnique
   */
  export type ProvisionLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter, which ProvisionLink to fetch.
     */
    where: ProvisionLinkWhereUniqueInput
  }

  /**
   * ProvisionLink findUniqueOrThrow
   */
  export type ProvisionLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter, which ProvisionLink to fetch.
     */
    where: ProvisionLinkWhereUniqueInput
  }

  /**
   * ProvisionLink findFirst
   */
  export type ProvisionLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter, which ProvisionLink to fetch.
     */
    where?: ProvisionLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProvisionLinks to fetch.
     */
    orderBy?: ProvisionLinkOrderByWithRelationInput | ProvisionLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProvisionLinks.
     */
    cursor?: ProvisionLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProvisionLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProvisionLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProvisionLinks.
     */
    distinct?: ProvisionLinkScalarFieldEnum | ProvisionLinkScalarFieldEnum[]
  }

  /**
   * ProvisionLink findFirstOrThrow
   */
  export type ProvisionLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter, which ProvisionLink to fetch.
     */
    where?: ProvisionLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProvisionLinks to fetch.
     */
    orderBy?: ProvisionLinkOrderByWithRelationInput | ProvisionLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProvisionLinks.
     */
    cursor?: ProvisionLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProvisionLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProvisionLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProvisionLinks.
     */
    distinct?: ProvisionLinkScalarFieldEnum | ProvisionLinkScalarFieldEnum[]
  }

  /**
   * ProvisionLink findMany
   */
  export type ProvisionLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter, which ProvisionLinks to fetch.
     */
    where?: ProvisionLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProvisionLinks to fetch.
     */
    orderBy?: ProvisionLinkOrderByWithRelationInput | ProvisionLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProvisionLinks.
     */
    cursor?: ProvisionLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProvisionLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProvisionLinks.
     */
    skip?: number
    distinct?: ProvisionLinkScalarFieldEnum | ProvisionLinkScalarFieldEnum[]
  }

  /**
   * ProvisionLink create
   */
  export type ProvisionLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * The data needed to create a ProvisionLink.
     */
    data: XOR<ProvisionLinkCreateInput, ProvisionLinkUncheckedCreateInput>
  }

  /**
   * ProvisionLink createMany
   */
  export type ProvisionLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProvisionLinks.
     */
    data: ProvisionLinkCreateManyInput | ProvisionLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProvisionLink createManyAndReturn
   */
  export type ProvisionLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * The data used to create many ProvisionLinks.
     */
    data: ProvisionLinkCreateManyInput | ProvisionLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProvisionLink update
   */
  export type ProvisionLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * The data needed to update a ProvisionLink.
     */
    data: XOR<ProvisionLinkUpdateInput, ProvisionLinkUncheckedUpdateInput>
    /**
     * Choose, which ProvisionLink to update.
     */
    where: ProvisionLinkWhereUniqueInput
  }

  /**
   * ProvisionLink updateMany
   */
  export type ProvisionLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProvisionLinks.
     */
    data: XOR<ProvisionLinkUpdateManyMutationInput, ProvisionLinkUncheckedUpdateManyInput>
    /**
     * Filter which ProvisionLinks to update
     */
    where?: ProvisionLinkWhereInput
    /**
     * Limit how many ProvisionLinks to update.
     */
    limit?: number
  }

  /**
   * ProvisionLink updateManyAndReturn
   */
  export type ProvisionLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * The data used to update ProvisionLinks.
     */
    data: XOR<ProvisionLinkUpdateManyMutationInput, ProvisionLinkUncheckedUpdateManyInput>
    /**
     * Filter which ProvisionLinks to update
     */
    where?: ProvisionLinkWhereInput
    /**
     * Limit how many ProvisionLinks to update.
     */
    limit?: number
  }

  /**
   * ProvisionLink upsert
   */
  export type ProvisionLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * The filter to search for the ProvisionLink to update in case it exists.
     */
    where: ProvisionLinkWhereUniqueInput
    /**
     * In case the ProvisionLink found by the `where` argument doesn't exist, create a new ProvisionLink with this data.
     */
    create: XOR<ProvisionLinkCreateInput, ProvisionLinkUncheckedCreateInput>
    /**
     * In case the ProvisionLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProvisionLinkUpdateInput, ProvisionLinkUncheckedUpdateInput>
  }

  /**
   * ProvisionLink delete
   */
  export type ProvisionLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
    /**
     * Filter which ProvisionLink to delete.
     */
    where: ProvisionLinkWhereUniqueInput
  }

  /**
   * ProvisionLink deleteMany
   */
  export type ProvisionLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProvisionLinks to delete
     */
    where?: ProvisionLinkWhereInput
    /**
     * Limit how many ProvisionLinks to delete.
     */
    limit?: number
  }

  /**
   * ProvisionLink without action
   */
  export type ProvisionLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProvisionLink
     */
    select?: ProvisionLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProvisionLink
     */
    omit?: ProvisionLinkOmit<ExtArgs> | null
  }


  /**
   * Model MessageSessionKey
   */

  export type AggregateMessageSessionKey = {
    _count: MessageSessionKeyCountAggregateOutputType | null
    _min: MessageSessionKeyMinAggregateOutputType | null
    _max: MessageSessionKeyMaxAggregateOutputType | null
  }

  export type MessageSessionKeyMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    recipientUserId: string | null
    recipientDeviceId: string | null
    encryptedSessionKey: string | null
  }

  export type MessageSessionKeyMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    recipientUserId: string | null
    recipientDeviceId: string | null
    encryptedSessionKey: string | null
  }

  export type MessageSessionKeyCountAggregateOutputType = {
    id: number
    messageId: number
    recipientUserId: number
    recipientDeviceId: number
    encryptedSessionKey: number
    _all: number
  }


  export type MessageSessionKeyMinAggregateInputType = {
    id?: true
    messageId?: true
    recipientUserId?: true
    recipientDeviceId?: true
    encryptedSessionKey?: true
  }

  export type MessageSessionKeyMaxAggregateInputType = {
    id?: true
    messageId?: true
    recipientUserId?: true
    recipientDeviceId?: true
    encryptedSessionKey?: true
  }

  export type MessageSessionKeyCountAggregateInputType = {
    id?: true
    messageId?: true
    recipientUserId?: true
    recipientDeviceId?: true
    encryptedSessionKey?: true
    _all?: true
  }

  export type MessageSessionKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageSessionKey to aggregate.
     */
    where?: MessageSessionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageSessionKeys to fetch.
     */
    orderBy?: MessageSessionKeyOrderByWithRelationInput | MessageSessionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageSessionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageSessionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageSessionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageSessionKeys
    **/
    _count?: true | MessageSessionKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageSessionKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageSessionKeyMaxAggregateInputType
  }

  export type GetMessageSessionKeyAggregateType<T extends MessageSessionKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageSessionKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageSessionKey[P]>
      : GetScalarType<T[P], AggregateMessageSessionKey[P]>
  }




  export type MessageSessionKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageSessionKeyWhereInput
    orderBy?: MessageSessionKeyOrderByWithAggregationInput | MessageSessionKeyOrderByWithAggregationInput[]
    by: MessageSessionKeyScalarFieldEnum[] | MessageSessionKeyScalarFieldEnum
    having?: MessageSessionKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageSessionKeyCountAggregateInputType | true
    _min?: MessageSessionKeyMinAggregateInputType
    _max?: MessageSessionKeyMaxAggregateInputType
  }

  export type MessageSessionKeyGroupByOutputType = {
    id: string
    messageId: string
    recipientUserId: string
    recipientDeviceId: string
    encryptedSessionKey: string
    _count: MessageSessionKeyCountAggregateOutputType | null
    _min: MessageSessionKeyMinAggregateOutputType | null
    _max: MessageSessionKeyMaxAggregateOutputType | null
  }

  type GetMessageSessionKeyGroupByPayload<T extends MessageSessionKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageSessionKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageSessionKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageSessionKeyGroupByOutputType[P]>
            : GetScalarType<T[P], MessageSessionKeyGroupByOutputType[P]>
        }
      >
    >


  export type MessageSessionKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    recipientUserId?: boolean
    recipientDeviceId?: boolean
    encryptedSessionKey?: boolean
  }, ExtArgs["result"]["messageSessionKey"]>

  export type MessageSessionKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    recipientUserId?: boolean
    recipientDeviceId?: boolean
    encryptedSessionKey?: boolean
  }, ExtArgs["result"]["messageSessionKey"]>

  export type MessageSessionKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    recipientUserId?: boolean
    recipientDeviceId?: boolean
    encryptedSessionKey?: boolean
  }, ExtArgs["result"]["messageSessionKey"]>

  export type MessageSessionKeySelectScalar = {
    id?: boolean
    messageId?: boolean
    recipientUserId?: boolean
    recipientDeviceId?: boolean
    encryptedSessionKey?: boolean
  }

  export type MessageSessionKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "recipientUserId" | "recipientDeviceId" | "encryptedSessionKey", ExtArgs["result"]["messageSessionKey"]>

  export type $MessageSessionKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageSessionKey"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      recipientUserId: string
      recipientDeviceId: string
      encryptedSessionKey: string
    }, ExtArgs["result"]["messageSessionKey"]>
    composites: {}
  }

  type MessageSessionKeyGetPayload<S extends boolean | null | undefined | MessageSessionKeyDefaultArgs> = $Result.GetResult<Prisma.$MessageSessionKeyPayload, S>

  type MessageSessionKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageSessionKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageSessionKeyCountAggregateInputType | true
    }

  export interface MessageSessionKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageSessionKey'], meta: { name: 'MessageSessionKey' } }
    /**
     * Find zero or one MessageSessionKey that matches the filter.
     * @param {MessageSessionKeyFindUniqueArgs} args - Arguments to find a MessageSessionKey
     * @example
     * // Get one MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageSessionKeyFindUniqueArgs>(args: SelectSubset<T, MessageSessionKeyFindUniqueArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageSessionKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageSessionKeyFindUniqueOrThrowArgs} args - Arguments to find a MessageSessionKey
     * @example
     * // Get one MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageSessionKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageSessionKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageSessionKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyFindFirstArgs} args - Arguments to find a MessageSessionKey
     * @example
     * // Get one MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageSessionKeyFindFirstArgs>(args?: SelectSubset<T, MessageSessionKeyFindFirstArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageSessionKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyFindFirstOrThrowArgs} args - Arguments to find a MessageSessionKey
     * @example
     * // Get one MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageSessionKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageSessionKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageSessionKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageSessionKeys
     * const messageSessionKeys = await prisma.messageSessionKey.findMany()
     * 
     * // Get first 10 MessageSessionKeys
     * const messageSessionKeys = await prisma.messageSessionKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageSessionKeyWithIdOnly = await prisma.messageSessionKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageSessionKeyFindManyArgs>(args?: SelectSubset<T, MessageSessionKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageSessionKey.
     * @param {MessageSessionKeyCreateArgs} args - Arguments to create a MessageSessionKey.
     * @example
     * // Create one MessageSessionKey
     * const MessageSessionKey = await prisma.messageSessionKey.create({
     *   data: {
     *     // ... data to create a MessageSessionKey
     *   }
     * })
     * 
     */
    create<T extends MessageSessionKeyCreateArgs>(args: SelectSubset<T, MessageSessionKeyCreateArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageSessionKeys.
     * @param {MessageSessionKeyCreateManyArgs} args - Arguments to create many MessageSessionKeys.
     * @example
     * // Create many MessageSessionKeys
     * const messageSessionKey = await prisma.messageSessionKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageSessionKeyCreateManyArgs>(args?: SelectSubset<T, MessageSessionKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageSessionKeys and returns the data saved in the database.
     * @param {MessageSessionKeyCreateManyAndReturnArgs} args - Arguments to create many MessageSessionKeys.
     * @example
     * // Create many MessageSessionKeys
     * const messageSessionKey = await prisma.messageSessionKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageSessionKeys and only return the `id`
     * const messageSessionKeyWithIdOnly = await prisma.messageSessionKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageSessionKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageSessionKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageSessionKey.
     * @param {MessageSessionKeyDeleteArgs} args - Arguments to delete one MessageSessionKey.
     * @example
     * // Delete one MessageSessionKey
     * const MessageSessionKey = await prisma.messageSessionKey.delete({
     *   where: {
     *     // ... filter to delete one MessageSessionKey
     *   }
     * })
     * 
     */
    delete<T extends MessageSessionKeyDeleteArgs>(args: SelectSubset<T, MessageSessionKeyDeleteArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageSessionKey.
     * @param {MessageSessionKeyUpdateArgs} args - Arguments to update one MessageSessionKey.
     * @example
     * // Update one MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageSessionKeyUpdateArgs>(args: SelectSubset<T, MessageSessionKeyUpdateArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageSessionKeys.
     * @param {MessageSessionKeyDeleteManyArgs} args - Arguments to filter MessageSessionKeys to delete.
     * @example
     * // Delete a few MessageSessionKeys
     * const { count } = await prisma.messageSessionKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageSessionKeyDeleteManyArgs>(args?: SelectSubset<T, MessageSessionKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageSessionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageSessionKeys
     * const messageSessionKey = await prisma.messageSessionKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageSessionKeyUpdateManyArgs>(args: SelectSubset<T, MessageSessionKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageSessionKeys and returns the data updated in the database.
     * @param {MessageSessionKeyUpdateManyAndReturnArgs} args - Arguments to update many MessageSessionKeys.
     * @example
     * // Update many MessageSessionKeys
     * const messageSessionKey = await prisma.messageSessionKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageSessionKeys and only return the `id`
     * const messageSessionKeyWithIdOnly = await prisma.messageSessionKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageSessionKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageSessionKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageSessionKey.
     * @param {MessageSessionKeyUpsertArgs} args - Arguments to update or create a MessageSessionKey.
     * @example
     * // Update or create a MessageSessionKey
     * const messageSessionKey = await prisma.messageSessionKey.upsert({
     *   create: {
     *     // ... data to create a MessageSessionKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageSessionKey we want to update
     *   }
     * })
     */
    upsert<T extends MessageSessionKeyUpsertArgs>(args: SelectSubset<T, MessageSessionKeyUpsertArgs<ExtArgs>>): Prisma__MessageSessionKeyClient<$Result.GetResult<Prisma.$MessageSessionKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageSessionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyCountArgs} args - Arguments to filter MessageSessionKeys to count.
     * @example
     * // Count the number of MessageSessionKeys
     * const count = await prisma.messageSessionKey.count({
     *   where: {
     *     // ... the filter for the MessageSessionKeys we want to count
     *   }
     * })
    **/
    count<T extends MessageSessionKeyCountArgs>(
      args?: Subset<T, MessageSessionKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageSessionKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageSessionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageSessionKeyAggregateArgs>(args: Subset<T, MessageSessionKeyAggregateArgs>): Prisma.PrismaPromise<GetMessageSessionKeyAggregateType<T>>

    /**
     * Group by MessageSessionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageSessionKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageSessionKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageSessionKeyGroupByArgs['orderBy'] }
        : { orderBy?: MessageSessionKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageSessionKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageSessionKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageSessionKey model
   */
  readonly fields: MessageSessionKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageSessionKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageSessionKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageSessionKey model
   */
  interface MessageSessionKeyFieldRefs {
    readonly id: FieldRef<"MessageSessionKey", 'String'>
    readonly messageId: FieldRef<"MessageSessionKey", 'String'>
    readonly recipientUserId: FieldRef<"MessageSessionKey", 'String'>
    readonly recipientDeviceId: FieldRef<"MessageSessionKey", 'String'>
    readonly encryptedSessionKey: FieldRef<"MessageSessionKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MessageSessionKey findUnique
   */
  export type MessageSessionKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter, which MessageSessionKey to fetch.
     */
    where: MessageSessionKeyWhereUniqueInput
  }

  /**
   * MessageSessionKey findUniqueOrThrow
   */
  export type MessageSessionKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter, which MessageSessionKey to fetch.
     */
    where: MessageSessionKeyWhereUniqueInput
  }

  /**
   * MessageSessionKey findFirst
   */
  export type MessageSessionKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter, which MessageSessionKey to fetch.
     */
    where?: MessageSessionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageSessionKeys to fetch.
     */
    orderBy?: MessageSessionKeyOrderByWithRelationInput | MessageSessionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageSessionKeys.
     */
    cursor?: MessageSessionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageSessionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageSessionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageSessionKeys.
     */
    distinct?: MessageSessionKeyScalarFieldEnum | MessageSessionKeyScalarFieldEnum[]
  }

  /**
   * MessageSessionKey findFirstOrThrow
   */
  export type MessageSessionKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter, which MessageSessionKey to fetch.
     */
    where?: MessageSessionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageSessionKeys to fetch.
     */
    orderBy?: MessageSessionKeyOrderByWithRelationInput | MessageSessionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageSessionKeys.
     */
    cursor?: MessageSessionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageSessionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageSessionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageSessionKeys.
     */
    distinct?: MessageSessionKeyScalarFieldEnum | MessageSessionKeyScalarFieldEnum[]
  }

  /**
   * MessageSessionKey findMany
   */
  export type MessageSessionKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter, which MessageSessionKeys to fetch.
     */
    where?: MessageSessionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageSessionKeys to fetch.
     */
    orderBy?: MessageSessionKeyOrderByWithRelationInput | MessageSessionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageSessionKeys.
     */
    cursor?: MessageSessionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageSessionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageSessionKeys.
     */
    skip?: number
    distinct?: MessageSessionKeyScalarFieldEnum | MessageSessionKeyScalarFieldEnum[]
  }

  /**
   * MessageSessionKey create
   */
  export type MessageSessionKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * The data needed to create a MessageSessionKey.
     */
    data: XOR<MessageSessionKeyCreateInput, MessageSessionKeyUncheckedCreateInput>
  }

  /**
   * MessageSessionKey createMany
   */
  export type MessageSessionKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageSessionKeys.
     */
    data: MessageSessionKeyCreateManyInput | MessageSessionKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageSessionKey createManyAndReturn
   */
  export type MessageSessionKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * The data used to create many MessageSessionKeys.
     */
    data: MessageSessionKeyCreateManyInput | MessageSessionKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageSessionKey update
   */
  export type MessageSessionKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * The data needed to update a MessageSessionKey.
     */
    data: XOR<MessageSessionKeyUpdateInput, MessageSessionKeyUncheckedUpdateInput>
    /**
     * Choose, which MessageSessionKey to update.
     */
    where: MessageSessionKeyWhereUniqueInput
  }

  /**
   * MessageSessionKey updateMany
   */
  export type MessageSessionKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageSessionKeys.
     */
    data: XOR<MessageSessionKeyUpdateManyMutationInput, MessageSessionKeyUncheckedUpdateManyInput>
    /**
     * Filter which MessageSessionKeys to update
     */
    where?: MessageSessionKeyWhereInput
    /**
     * Limit how many MessageSessionKeys to update.
     */
    limit?: number
  }

  /**
   * MessageSessionKey updateManyAndReturn
   */
  export type MessageSessionKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * The data used to update MessageSessionKeys.
     */
    data: XOR<MessageSessionKeyUpdateManyMutationInput, MessageSessionKeyUncheckedUpdateManyInput>
    /**
     * Filter which MessageSessionKeys to update
     */
    where?: MessageSessionKeyWhereInput
    /**
     * Limit how many MessageSessionKeys to update.
     */
    limit?: number
  }

  /**
   * MessageSessionKey upsert
   */
  export type MessageSessionKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * The filter to search for the MessageSessionKey to update in case it exists.
     */
    where: MessageSessionKeyWhereUniqueInput
    /**
     * In case the MessageSessionKey found by the `where` argument doesn't exist, create a new MessageSessionKey with this data.
     */
    create: XOR<MessageSessionKeyCreateInput, MessageSessionKeyUncheckedCreateInput>
    /**
     * In case the MessageSessionKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageSessionKeyUpdateInput, MessageSessionKeyUncheckedUpdateInput>
  }

  /**
   * MessageSessionKey delete
   */
  export type MessageSessionKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
    /**
     * Filter which MessageSessionKey to delete.
     */
    where: MessageSessionKeyWhereUniqueInput
  }

  /**
   * MessageSessionKey deleteMany
   */
  export type MessageSessionKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageSessionKeys to delete
     */
    where?: MessageSessionKeyWhereInput
    /**
     * Limit how many MessageSessionKeys to delete.
     */
    limit?: number
  }

  /**
   * MessageSessionKey without action
   */
  export type MessageSessionKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageSessionKey
     */
    select?: MessageSessionKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageSessionKey
     */
    omit?: MessageSessionKeyOmit<ExtArgs> | null
  }


  /**
   * Model ChatRoomInvite
   */

  export type AggregateChatRoomInvite = {
    _count: ChatRoomInviteCountAggregateOutputType | null
    _avg: ChatRoomInviteAvgAggregateOutputType | null
    _sum: ChatRoomInviteSumAggregateOutputType | null
    _min: ChatRoomInviteMinAggregateOutputType | null
    _max: ChatRoomInviteMaxAggregateOutputType | null
  }

  export type ChatRoomInviteAvgAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    createdById: number | null
    maxUses: number | null
    uses: number | null
  }

  export type ChatRoomInviteSumAggregateOutputType = {
    id: number | null
    chatRoomId: number | null
    createdById: number | null
    maxUses: number | null
    uses: number | null
  }

  export type ChatRoomInviteMinAggregateOutputType = {
    id: number | null
    code: string | null
    chatRoomId: number | null
    createdById: number | null
    maxUses: number | null
    uses: number | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type ChatRoomInviteMaxAggregateOutputType = {
    id: number | null
    code: string | null
    chatRoomId: number | null
    createdById: number | null
    maxUses: number | null
    uses: number | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type ChatRoomInviteCountAggregateOutputType = {
    id: number
    code: number
    chatRoomId: number
    createdById: number
    maxUses: number
    uses: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type ChatRoomInviteAvgAggregateInputType = {
    id?: true
    chatRoomId?: true
    createdById?: true
    maxUses?: true
    uses?: true
  }

  export type ChatRoomInviteSumAggregateInputType = {
    id?: true
    chatRoomId?: true
    createdById?: true
    maxUses?: true
    uses?: true
  }

  export type ChatRoomInviteMinAggregateInputType = {
    id?: true
    code?: true
    chatRoomId?: true
    createdById?: true
    maxUses?: true
    uses?: true
    expiresAt?: true
    createdAt?: true
  }

  export type ChatRoomInviteMaxAggregateInputType = {
    id?: true
    code?: true
    chatRoomId?: true
    createdById?: true
    maxUses?: true
    uses?: true
    expiresAt?: true
    createdAt?: true
  }

  export type ChatRoomInviteCountAggregateInputType = {
    id?: true
    code?: true
    chatRoomId?: true
    createdById?: true
    maxUses?: true
    uses?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type ChatRoomInviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomInvite to aggregate.
     */
    where?: ChatRoomInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomInvites to fetch.
     */
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRoomInvites
    **/
    _count?: true | ChatRoomInviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatRoomInviteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatRoomInviteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomInviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomInviteMaxAggregateInputType
  }

  export type GetChatRoomInviteAggregateType<T extends ChatRoomInviteAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoomInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoomInvite[P]>
      : GetScalarType<T[P], AggregateChatRoomInvite[P]>
  }




  export type ChatRoomInviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomInviteWhereInput
    orderBy?: ChatRoomInviteOrderByWithAggregationInput | ChatRoomInviteOrderByWithAggregationInput[]
    by: ChatRoomInviteScalarFieldEnum[] | ChatRoomInviteScalarFieldEnum
    having?: ChatRoomInviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomInviteCountAggregateInputType | true
    _avg?: ChatRoomInviteAvgAggregateInputType
    _sum?: ChatRoomInviteSumAggregateInputType
    _min?: ChatRoomInviteMinAggregateInputType
    _max?: ChatRoomInviteMaxAggregateInputType
  }

  export type ChatRoomInviteGroupByOutputType = {
    id: number
    code: string
    chatRoomId: number
    createdById: number
    maxUses: number
    uses: number
    expiresAt: Date | null
    createdAt: Date
    _count: ChatRoomInviteCountAggregateOutputType | null
    _avg: ChatRoomInviteAvgAggregateOutputType | null
    _sum: ChatRoomInviteSumAggregateOutputType | null
    _min: ChatRoomInviteMinAggregateOutputType | null
    _max: ChatRoomInviteMaxAggregateOutputType | null
  }

  type GetChatRoomInviteGroupByPayload<T extends ChatRoomInviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomInviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomInviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomInviteGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomInviteGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomInviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    chatRoomId?: boolean
    createdById?: boolean
    maxUses?: boolean
    uses?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomInvite"]>

  export type ChatRoomInviteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    chatRoomId?: boolean
    createdById?: boolean
    maxUses?: boolean
    uses?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomInvite"]>

  export type ChatRoomInviteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    chatRoomId?: boolean
    createdById?: boolean
    maxUses?: boolean
    uses?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoomInvite"]>

  export type ChatRoomInviteSelectScalar = {
    id?: boolean
    code?: boolean
    chatRoomId?: boolean
    createdById?: boolean
    maxUses?: boolean
    uses?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type ChatRoomInviteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "chatRoomId" | "createdById" | "maxUses" | "uses" | "expiresAt" | "createdAt", ExtArgs["result"]["chatRoomInvite"]>
  export type ChatRoomInviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatRoomInviteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatRoomInviteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatRoomInvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoomInvite"
    objects: {
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      chatRoomId: number
      createdById: number
      maxUses: number
      uses: number
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["chatRoomInvite"]>
    composites: {}
  }

  type ChatRoomInviteGetPayload<S extends boolean | null | undefined | ChatRoomInviteDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomInvitePayload, S>

  type ChatRoomInviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatRoomInviteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatRoomInviteCountAggregateInputType | true
    }

  export interface ChatRoomInviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoomInvite'], meta: { name: 'ChatRoomInvite' } }
    /**
     * Find zero or one ChatRoomInvite that matches the filter.
     * @param {ChatRoomInviteFindUniqueArgs} args - Arguments to find a ChatRoomInvite
     * @example
     * // Get one ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomInviteFindUniqueArgs>(args: SelectSubset<T, ChatRoomInviteFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatRoomInvite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatRoomInviteFindUniqueOrThrowArgs} args - Arguments to find a ChatRoomInvite
     * @example
     * // Get one ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomInviteFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomInviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoomInvite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteFindFirstArgs} args - Arguments to find a ChatRoomInvite
     * @example
     * // Get one ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomInviteFindFirstArgs>(args?: SelectSubset<T, ChatRoomInviteFindFirstArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoomInvite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteFindFirstOrThrowArgs} args - Arguments to find a ChatRoomInvite
     * @example
     * // Get one ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomInviteFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomInviteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatRoomInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRoomInvites
     * const chatRoomInvites = await prisma.chatRoomInvite.findMany()
     * 
     * // Get first 10 ChatRoomInvites
     * const chatRoomInvites = await prisma.chatRoomInvite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomInviteWithIdOnly = await prisma.chatRoomInvite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomInviteFindManyArgs>(args?: SelectSubset<T, ChatRoomInviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatRoomInvite.
     * @param {ChatRoomInviteCreateArgs} args - Arguments to create a ChatRoomInvite.
     * @example
     * // Create one ChatRoomInvite
     * const ChatRoomInvite = await prisma.chatRoomInvite.create({
     *   data: {
     *     // ... data to create a ChatRoomInvite
     *   }
     * })
     * 
     */
    create<T extends ChatRoomInviteCreateArgs>(args: SelectSubset<T, ChatRoomInviteCreateArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatRoomInvites.
     * @param {ChatRoomInviteCreateManyArgs} args - Arguments to create many ChatRoomInvites.
     * @example
     * // Create many ChatRoomInvites
     * const chatRoomInvite = await prisma.chatRoomInvite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomInviteCreateManyArgs>(args?: SelectSubset<T, ChatRoomInviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatRoomInvites and returns the data saved in the database.
     * @param {ChatRoomInviteCreateManyAndReturnArgs} args - Arguments to create many ChatRoomInvites.
     * @example
     * // Create many ChatRoomInvites
     * const chatRoomInvite = await prisma.chatRoomInvite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatRoomInvites and only return the `id`
     * const chatRoomInviteWithIdOnly = await prisma.chatRoomInvite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatRoomInviteCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatRoomInviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatRoomInvite.
     * @param {ChatRoomInviteDeleteArgs} args - Arguments to delete one ChatRoomInvite.
     * @example
     * // Delete one ChatRoomInvite
     * const ChatRoomInvite = await prisma.chatRoomInvite.delete({
     *   where: {
     *     // ... filter to delete one ChatRoomInvite
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomInviteDeleteArgs>(args: SelectSubset<T, ChatRoomInviteDeleteArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatRoomInvite.
     * @param {ChatRoomInviteUpdateArgs} args - Arguments to update one ChatRoomInvite.
     * @example
     * // Update one ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomInviteUpdateArgs>(args: SelectSubset<T, ChatRoomInviteUpdateArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatRoomInvites.
     * @param {ChatRoomInviteDeleteManyArgs} args - Arguments to filter ChatRoomInvites to delete.
     * @example
     * // Delete a few ChatRoomInvites
     * const { count } = await prisma.chatRoomInvite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomInviteDeleteManyArgs>(args?: SelectSubset<T, ChatRoomInviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRoomInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRoomInvites
     * const chatRoomInvite = await prisma.chatRoomInvite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomInviteUpdateManyArgs>(args: SelectSubset<T, ChatRoomInviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRoomInvites and returns the data updated in the database.
     * @param {ChatRoomInviteUpdateManyAndReturnArgs} args - Arguments to update many ChatRoomInvites.
     * @example
     * // Update many ChatRoomInvites
     * const chatRoomInvite = await prisma.chatRoomInvite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatRoomInvites and only return the `id`
     * const chatRoomInviteWithIdOnly = await prisma.chatRoomInvite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatRoomInviteUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatRoomInviteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatRoomInvite.
     * @param {ChatRoomInviteUpsertArgs} args - Arguments to update or create a ChatRoomInvite.
     * @example
     * // Update or create a ChatRoomInvite
     * const chatRoomInvite = await prisma.chatRoomInvite.upsert({
     *   create: {
     *     // ... data to create a ChatRoomInvite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoomInvite we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomInviteUpsertArgs>(args: SelectSubset<T, ChatRoomInviteUpsertArgs<ExtArgs>>): Prisma__ChatRoomInviteClient<$Result.GetResult<Prisma.$ChatRoomInvitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatRoomInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteCountArgs} args - Arguments to filter ChatRoomInvites to count.
     * @example
     * // Count the number of ChatRoomInvites
     * const count = await prisma.chatRoomInvite.count({
     *   where: {
     *     // ... the filter for the ChatRoomInvites we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomInviteCountArgs>(
      args?: Subset<T, ChatRoomInviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomInviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoomInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomInviteAggregateArgs>(args: Subset<T, ChatRoomInviteAggregateArgs>): Prisma.PrismaPromise<GetChatRoomInviteAggregateType<T>>

    /**
     * Group by ChatRoomInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomInviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomInviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomInviteGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomInviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomInviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoomInvite model
   */
  readonly fields: ChatRoomInviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoomInvite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomInviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoomInvite model
   */
  interface ChatRoomInviteFieldRefs {
    readonly id: FieldRef<"ChatRoomInvite", 'Int'>
    readonly code: FieldRef<"ChatRoomInvite", 'String'>
    readonly chatRoomId: FieldRef<"ChatRoomInvite", 'Int'>
    readonly createdById: FieldRef<"ChatRoomInvite", 'Int'>
    readonly maxUses: FieldRef<"ChatRoomInvite", 'Int'>
    readonly uses: FieldRef<"ChatRoomInvite", 'Int'>
    readonly expiresAt: FieldRef<"ChatRoomInvite", 'DateTime'>
    readonly createdAt: FieldRef<"ChatRoomInvite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoomInvite findUnique
   */
  export type ChatRoomInviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomInvite to fetch.
     */
    where: ChatRoomInviteWhereUniqueInput
  }

  /**
   * ChatRoomInvite findUniqueOrThrow
   */
  export type ChatRoomInviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomInvite to fetch.
     */
    where: ChatRoomInviteWhereUniqueInput
  }

  /**
   * ChatRoomInvite findFirst
   */
  export type ChatRoomInviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomInvite to fetch.
     */
    where?: ChatRoomInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomInvites to fetch.
     */
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomInvites.
     */
    cursor?: ChatRoomInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomInvites.
     */
    distinct?: ChatRoomInviteScalarFieldEnum | ChatRoomInviteScalarFieldEnum[]
  }

  /**
   * ChatRoomInvite findFirstOrThrow
   */
  export type ChatRoomInviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomInvite to fetch.
     */
    where?: ChatRoomInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomInvites to fetch.
     */
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRoomInvites.
     */
    cursor?: ChatRoomInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRoomInvites.
     */
    distinct?: ChatRoomInviteScalarFieldEnum | ChatRoomInviteScalarFieldEnum[]
  }

  /**
   * ChatRoomInvite findMany
   */
  export type ChatRoomInviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoomInvites to fetch.
     */
    where?: ChatRoomInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRoomInvites to fetch.
     */
    orderBy?: ChatRoomInviteOrderByWithRelationInput | ChatRoomInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRoomInvites.
     */
    cursor?: ChatRoomInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRoomInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRoomInvites.
     */
    skip?: number
    distinct?: ChatRoomInviteScalarFieldEnum | ChatRoomInviteScalarFieldEnum[]
  }

  /**
   * ChatRoomInvite create
   */
  export type ChatRoomInviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoomInvite.
     */
    data: XOR<ChatRoomInviteCreateInput, ChatRoomInviteUncheckedCreateInput>
  }

  /**
   * ChatRoomInvite createMany
   */
  export type ChatRoomInviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRoomInvites.
     */
    data: ChatRoomInviteCreateManyInput | ChatRoomInviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoomInvite createManyAndReturn
   */
  export type ChatRoomInviteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * The data used to create many ChatRoomInvites.
     */
    data: ChatRoomInviteCreateManyInput | ChatRoomInviteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoomInvite update
   */
  export type ChatRoomInviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoomInvite.
     */
    data: XOR<ChatRoomInviteUpdateInput, ChatRoomInviteUncheckedUpdateInput>
    /**
     * Choose, which ChatRoomInvite to update.
     */
    where: ChatRoomInviteWhereUniqueInput
  }

  /**
   * ChatRoomInvite updateMany
   */
  export type ChatRoomInviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRoomInvites.
     */
    data: XOR<ChatRoomInviteUpdateManyMutationInput, ChatRoomInviteUncheckedUpdateManyInput>
    /**
     * Filter which ChatRoomInvites to update
     */
    where?: ChatRoomInviteWhereInput
    /**
     * Limit how many ChatRoomInvites to update.
     */
    limit?: number
  }

  /**
   * ChatRoomInvite updateManyAndReturn
   */
  export type ChatRoomInviteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * The data used to update ChatRoomInvites.
     */
    data: XOR<ChatRoomInviteUpdateManyMutationInput, ChatRoomInviteUncheckedUpdateManyInput>
    /**
     * Filter which ChatRoomInvites to update
     */
    where?: ChatRoomInviteWhereInput
    /**
     * Limit how many ChatRoomInvites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatRoomInvite upsert
   */
  export type ChatRoomInviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoomInvite to update in case it exists.
     */
    where: ChatRoomInviteWhereUniqueInput
    /**
     * In case the ChatRoomInvite found by the `where` argument doesn't exist, create a new ChatRoomInvite with this data.
     */
    create: XOR<ChatRoomInviteCreateInput, ChatRoomInviteUncheckedCreateInput>
    /**
     * In case the ChatRoomInvite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomInviteUpdateInput, ChatRoomInviteUncheckedUpdateInput>
  }

  /**
   * ChatRoomInvite delete
   */
  export type ChatRoomInviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
    /**
     * Filter which ChatRoomInvite to delete.
     */
    where: ChatRoomInviteWhereUniqueInput
  }

  /**
   * ChatRoomInvite deleteMany
   */
  export type ChatRoomInviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoomInvites to delete
     */
    where?: ChatRoomInviteWhereInput
    /**
     * Limit how many ChatRoomInvites to delete.
     */
    limit?: number
  }

  /**
   * ChatRoomInvite without action
   */
  export type ChatRoomInviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomInvite
     */
    select?: ChatRoomInviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoomInvite
     */
    omit?: ChatRoomInviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInviteInclude<ExtArgs> | null
  }


  /**
   * Model MessageReaction
   */

  export type AggregateMessageReaction = {
    _count: MessageReactionCountAggregateOutputType | null
    _avg: MessageReactionAvgAggregateOutputType | null
    _sum: MessageReactionSumAggregateOutputType | null
    _min: MessageReactionMinAggregateOutputType | null
    _max: MessageReactionMaxAggregateOutputType | null
  }

  export type MessageReactionAvgAggregateOutputType = {
    messageId: number | null
    userId: number | null
  }

  export type MessageReactionSumAggregateOutputType = {
    messageId: number | null
    userId: number | null
  }

  export type MessageReactionMinAggregateOutputType = {
    messageId: number | null
    userId: number | null
    emoji: string | null
    createdAt: Date | null
  }

  export type MessageReactionMaxAggregateOutputType = {
    messageId: number | null
    userId: number | null
    emoji: string | null
    createdAt: Date | null
  }

  export type MessageReactionCountAggregateOutputType = {
    messageId: number
    userId: number
    emoji: number
    createdAt: number
    _all: number
  }


  export type MessageReactionAvgAggregateInputType = {
    messageId?: true
    userId?: true
  }

  export type MessageReactionSumAggregateInputType = {
    messageId?: true
    userId?: true
  }

  export type MessageReactionMinAggregateInputType = {
    messageId?: true
    userId?: true
    emoji?: true
    createdAt?: true
  }

  export type MessageReactionMaxAggregateInputType = {
    messageId?: true
    userId?: true
    emoji?: true
    createdAt?: true
  }

  export type MessageReactionCountAggregateInputType = {
    messageId?: true
    userId?: true
    emoji?: true
    createdAt?: true
    _all?: true
  }

  export type MessageReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageReaction to aggregate.
     */
    where?: MessageReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReactions to fetch.
     */
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageReactions
    **/
    _count?: true | MessageReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageReactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageReactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageReactionMaxAggregateInputType
  }

  export type GetMessageReactionAggregateType<T extends MessageReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageReaction[P]>
      : GetScalarType<T[P], AggregateMessageReaction[P]>
  }




  export type MessageReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageReactionWhereInput
    orderBy?: MessageReactionOrderByWithAggregationInput | MessageReactionOrderByWithAggregationInput[]
    by: MessageReactionScalarFieldEnum[] | MessageReactionScalarFieldEnum
    having?: MessageReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageReactionCountAggregateInputType | true
    _avg?: MessageReactionAvgAggregateInputType
    _sum?: MessageReactionSumAggregateInputType
    _min?: MessageReactionMinAggregateInputType
    _max?: MessageReactionMaxAggregateInputType
  }

  export type MessageReactionGroupByOutputType = {
    messageId: number
    userId: number
    emoji: string
    createdAt: Date
    _count: MessageReactionCountAggregateOutputType | null
    _avg: MessageReactionAvgAggregateOutputType | null
    _sum: MessageReactionSumAggregateOutputType | null
    _min: MessageReactionMinAggregateOutputType | null
    _max: MessageReactionMaxAggregateOutputType | null
  }

  type GetMessageReactionGroupByPayload<T extends MessageReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageReactionGroupByOutputType[P]>
            : GetScalarType<T[P], MessageReactionGroupByOutputType[P]>
        }
      >
    >


  export type MessageReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageReaction"]>

  export type MessageReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageReaction"]>

  export type MessageReactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    messageId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageReaction"]>

  export type MessageReactionSelectScalar = {
    messageId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
  }

  export type MessageReactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"messageId" | "userId" | "emoji" | "createdAt", ExtArgs["result"]["messageReaction"]>
  export type MessageReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageReactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageReactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessageReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageReaction"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      messageId: number
      userId: number
      emoji: string
      createdAt: Date
    }, ExtArgs["result"]["messageReaction"]>
    composites: {}
  }

  type MessageReactionGetPayload<S extends boolean | null | undefined | MessageReactionDefaultArgs> = $Result.GetResult<Prisma.$MessageReactionPayload, S>

  type MessageReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageReactionCountAggregateInputType | true
    }

  export interface MessageReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageReaction'], meta: { name: 'MessageReaction' } }
    /**
     * Find zero or one MessageReaction that matches the filter.
     * @param {MessageReactionFindUniqueArgs} args - Arguments to find a MessageReaction
     * @example
     * // Get one MessageReaction
     * const messageReaction = await prisma.messageReaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageReactionFindUniqueArgs>(args: SelectSubset<T, MessageReactionFindUniqueArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageReaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageReactionFindUniqueOrThrowArgs} args - Arguments to find a MessageReaction
     * @example
     * // Get one MessageReaction
     * const messageReaction = await prisma.messageReaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageReaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionFindFirstArgs} args - Arguments to find a MessageReaction
     * @example
     * // Get one MessageReaction
     * const messageReaction = await prisma.messageReaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageReactionFindFirstArgs>(args?: SelectSubset<T, MessageReactionFindFirstArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageReaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionFindFirstOrThrowArgs} args - Arguments to find a MessageReaction
     * @example
     * // Get one MessageReaction
     * const messageReaction = await prisma.messageReaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageReactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageReactions
     * const messageReactions = await prisma.messageReaction.findMany()
     * 
     * // Get first 10 MessageReactions
     * const messageReactions = await prisma.messageReaction.findMany({ take: 10 })
     * 
     * // Only select the `messageId`
     * const messageReactionWithMessageIdOnly = await prisma.messageReaction.findMany({ select: { messageId: true } })
     * 
     */
    findMany<T extends MessageReactionFindManyArgs>(args?: SelectSubset<T, MessageReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageReaction.
     * @param {MessageReactionCreateArgs} args - Arguments to create a MessageReaction.
     * @example
     * // Create one MessageReaction
     * const MessageReaction = await prisma.messageReaction.create({
     *   data: {
     *     // ... data to create a MessageReaction
     *   }
     * })
     * 
     */
    create<T extends MessageReactionCreateArgs>(args: SelectSubset<T, MessageReactionCreateArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageReactions.
     * @param {MessageReactionCreateManyArgs} args - Arguments to create many MessageReactions.
     * @example
     * // Create many MessageReactions
     * const messageReaction = await prisma.messageReaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageReactionCreateManyArgs>(args?: SelectSubset<T, MessageReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageReactions and returns the data saved in the database.
     * @param {MessageReactionCreateManyAndReturnArgs} args - Arguments to create many MessageReactions.
     * @example
     * // Create many MessageReactions
     * const messageReaction = await prisma.messageReaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageReactions and only return the `messageId`
     * const messageReactionWithMessageIdOnly = await prisma.messageReaction.createManyAndReturn({
     *   select: { messageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageReaction.
     * @param {MessageReactionDeleteArgs} args - Arguments to delete one MessageReaction.
     * @example
     * // Delete one MessageReaction
     * const MessageReaction = await prisma.messageReaction.delete({
     *   where: {
     *     // ... filter to delete one MessageReaction
     *   }
     * })
     * 
     */
    delete<T extends MessageReactionDeleteArgs>(args: SelectSubset<T, MessageReactionDeleteArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageReaction.
     * @param {MessageReactionUpdateArgs} args - Arguments to update one MessageReaction.
     * @example
     * // Update one MessageReaction
     * const messageReaction = await prisma.messageReaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageReactionUpdateArgs>(args: SelectSubset<T, MessageReactionUpdateArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageReactions.
     * @param {MessageReactionDeleteManyArgs} args - Arguments to filter MessageReactions to delete.
     * @example
     * // Delete a few MessageReactions
     * const { count } = await prisma.messageReaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageReactionDeleteManyArgs>(args?: SelectSubset<T, MessageReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageReactions
     * const messageReaction = await prisma.messageReaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageReactionUpdateManyArgs>(args: SelectSubset<T, MessageReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageReactions and returns the data updated in the database.
     * @param {MessageReactionUpdateManyAndReturnArgs} args - Arguments to update many MessageReactions.
     * @example
     * // Update many MessageReactions
     * const messageReaction = await prisma.messageReaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageReactions and only return the `messageId`
     * const messageReactionWithMessageIdOnly = await prisma.messageReaction.updateManyAndReturn({
     *   select: { messageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageReactionUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageReaction.
     * @param {MessageReactionUpsertArgs} args - Arguments to update or create a MessageReaction.
     * @example
     * // Update or create a MessageReaction
     * const messageReaction = await prisma.messageReaction.upsert({
     *   create: {
     *     // ... data to create a MessageReaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageReaction we want to update
     *   }
     * })
     */
    upsert<T extends MessageReactionUpsertArgs>(args: SelectSubset<T, MessageReactionUpsertArgs<ExtArgs>>): Prisma__MessageReactionClient<$Result.GetResult<Prisma.$MessageReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionCountArgs} args - Arguments to filter MessageReactions to count.
     * @example
     * // Count the number of MessageReactions
     * const count = await prisma.messageReaction.count({
     *   where: {
     *     // ... the filter for the MessageReactions we want to count
     *   }
     * })
    **/
    count<T extends MessageReactionCountArgs>(
      args?: Subset<T, MessageReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageReactionAggregateArgs>(args: Subset<T, MessageReactionAggregateArgs>): Prisma.PrismaPromise<GetMessageReactionAggregateType<T>>

    /**
     * Group by MessageReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageReactionGroupByArgs['orderBy'] }
        : { orderBy?: MessageReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageReaction model
   */
  readonly fields: MessageReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageReaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageReaction model
   */
  interface MessageReactionFieldRefs {
    readonly messageId: FieldRef<"MessageReaction", 'Int'>
    readonly userId: FieldRef<"MessageReaction", 'Int'>
    readonly emoji: FieldRef<"MessageReaction", 'String'>
    readonly createdAt: FieldRef<"MessageReaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageReaction findUnique
   */
  export type MessageReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter, which MessageReaction to fetch.
     */
    where: MessageReactionWhereUniqueInput
  }

  /**
   * MessageReaction findUniqueOrThrow
   */
  export type MessageReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter, which MessageReaction to fetch.
     */
    where: MessageReactionWhereUniqueInput
  }

  /**
   * MessageReaction findFirst
   */
  export type MessageReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter, which MessageReaction to fetch.
     */
    where?: MessageReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReactions to fetch.
     */
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReactions.
     */
    cursor?: MessageReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReactions.
     */
    distinct?: MessageReactionScalarFieldEnum | MessageReactionScalarFieldEnum[]
  }

  /**
   * MessageReaction findFirstOrThrow
   */
  export type MessageReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter, which MessageReaction to fetch.
     */
    where?: MessageReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReactions to fetch.
     */
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageReactions.
     */
    cursor?: MessageReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageReactions.
     */
    distinct?: MessageReactionScalarFieldEnum | MessageReactionScalarFieldEnum[]
  }

  /**
   * MessageReaction findMany
   */
  export type MessageReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter, which MessageReactions to fetch.
     */
    where?: MessageReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageReactions to fetch.
     */
    orderBy?: MessageReactionOrderByWithRelationInput | MessageReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageReactions.
     */
    cursor?: MessageReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageReactions.
     */
    skip?: number
    distinct?: MessageReactionScalarFieldEnum | MessageReactionScalarFieldEnum[]
  }

  /**
   * MessageReaction create
   */
  export type MessageReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageReaction.
     */
    data: XOR<MessageReactionCreateInput, MessageReactionUncheckedCreateInput>
  }

  /**
   * MessageReaction createMany
   */
  export type MessageReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageReactions.
     */
    data: MessageReactionCreateManyInput | MessageReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageReaction createManyAndReturn
   */
  export type MessageReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * The data used to create many MessageReactions.
     */
    data: MessageReactionCreateManyInput | MessageReactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageReaction update
   */
  export type MessageReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageReaction.
     */
    data: XOR<MessageReactionUpdateInput, MessageReactionUncheckedUpdateInput>
    /**
     * Choose, which MessageReaction to update.
     */
    where: MessageReactionWhereUniqueInput
  }

  /**
   * MessageReaction updateMany
   */
  export type MessageReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageReactions.
     */
    data: XOR<MessageReactionUpdateManyMutationInput, MessageReactionUncheckedUpdateManyInput>
    /**
     * Filter which MessageReactions to update
     */
    where?: MessageReactionWhereInput
    /**
     * Limit how many MessageReactions to update.
     */
    limit?: number
  }

  /**
   * MessageReaction updateManyAndReturn
   */
  export type MessageReactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * The data used to update MessageReactions.
     */
    data: XOR<MessageReactionUpdateManyMutationInput, MessageReactionUncheckedUpdateManyInput>
    /**
     * Filter which MessageReactions to update
     */
    where?: MessageReactionWhereInput
    /**
     * Limit how many MessageReactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageReaction upsert
   */
  export type MessageReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageReaction to update in case it exists.
     */
    where: MessageReactionWhereUniqueInput
    /**
     * In case the MessageReaction found by the `where` argument doesn't exist, create a new MessageReaction with this data.
     */
    create: XOR<MessageReactionCreateInput, MessageReactionUncheckedCreateInput>
    /**
     * In case the MessageReaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageReactionUpdateInput, MessageReactionUncheckedUpdateInput>
  }

  /**
   * MessageReaction delete
   */
  export type MessageReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
    /**
     * Filter which MessageReaction to delete.
     */
    where: MessageReactionWhereUniqueInput
  }

  /**
   * MessageReaction deleteMany
   */
  export type MessageReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageReactions to delete
     */
    where?: MessageReactionWhereInput
    /**
     * Limit how many MessageReactions to delete.
     */
    limit?: number
  }

  /**
   * MessageReaction without action
   */
  export type MessageReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageReaction
     */
    select?: MessageReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageReaction
     */
    omit?: MessageReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageReactionInclude<ExtArgs> | null
  }


  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    captionCiphertext: string | null
    translatedFrom: string | null
    isExplicit: boolean | null
    audience: $Enums.StatusAudience | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    captionCiphertext: string | null
    translatedFrom: string | null
    isExplicit: boolean | null
    audience: $Enums.StatusAudience | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    authorId: number
    captionCiphertext: number
    encryptedKeys: number
    translatedFrom: number
    translations: number
    isExplicit: number
    audience: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    authorId?: true
    captionCiphertext?: true
    translatedFrom?: true
    isExplicit?: true
    audience?: true
    expiresAt?: true
    createdAt?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    authorId?: true
    captionCiphertext?: true
    translatedFrom?: true
    isExplicit?: true
    audience?: true
    expiresAt?: true
    createdAt?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    authorId?: true
    captionCiphertext?: true
    encryptedKeys?: true
    translatedFrom?: true
    translations?: true
    isExplicit?: true
    audience?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: number
    authorId: number
    captionCiphertext: string | null
    encryptedKeys: JsonValue | null
    translatedFrom: string | null
    translations: JsonValue | null
    isExplicit: boolean
    audience: $Enums.StatusAudience
    expiresAt: Date
    createdAt: Date
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    captionCiphertext?: boolean
    encryptedKeys?: boolean
    translatedFrom?: boolean
    translations?: boolean
    isExplicit?: boolean
    audience?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    assets?: boolean | Status$assetsArgs<ExtArgs>
    keys?: boolean | Status$keysArgs<ExtArgs>
    views?: boolean | Status$viewsArgs<ExtArgs>
    reactions?: boolean | Status$reactionsArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    captionCiphertext?: boolean
    encryptedKeys?: boolean
    translatedFrom?: boolean
    translations?: boolean
    isExplicit?: boolean
    audience?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    captionCiphertext?: boolean
    encryptedKeys?: boolean
    translatedFrom?: boolean
    translations?: boolean
    isExplicit?: boolean
    audience?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    id?: boolean
    authorId?: boolean
    captionCiphertext?: boolean
    encryptedKeys?: boolean
    translatedFrom?: boolean
    translations?: boolean
    isExplicit?: boolean
    audience?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type StatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "authorId" | "captionCiphertext" | "encryptedKeys" | "translatedFrom" | "translations" | "isExplicit" | "audience" | "expiresAt" | "createdAt", ExtArgs["result"]["status"]>
  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    assets?: boolean | Status$assetsArgs<ExtArgs>
    keys?: boolean | Status$keysArgs<ExtArgs>
    views?: boolean | Status$viewsArgs<ExtArgs>
    reactions?: boolean | Status$reactionsArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      assets: Prisma.$StatusAssetPayload<ExtArgs>[]
      keys: Prisma.$StatusKeyPayload<ExtArgs>[]
      views: Prisma.$StatusViewPayload<ExtArgs>[]
      reactions: Prisma.$StatusReactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      authorId: number
      captionCiphertext: string | null
      encryptedKeys: Prisma.JsonValue | null
      translatedFrom: string | null
      translations: Prisma.JsonValue | null
      isExplicit: boolean
      audience: $Enums.StatusAudience
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusFindUniqueArgs>(args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusFindFirstArgs>(args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusFindManyArgs>(args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
     */
    create<T extends StatusCreateArgs>(args: SelectSubset<T, StatusCreateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Statuses.
     * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusCreateManyArgs>(args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Statuses and returns the data saved in the database.
     * @param {StatusCreateManyAndReturnArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Statuses and only return the `id`
     * const statusWithIdOnly = await prisma.status.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
     */
    delete<T extends StatusDeleteArgs>(args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusUpdateArgs>(args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusDeleteManyArgs>(args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusUpdateManyArgs>(args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses and returns the data updated in the database.
     * @param {StatusUpdateManyAndReturnArgs} args - Arguments to update many Statuses.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Statuses and only return the `id`
     * const statusWithIdOnly = await prisma.status.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
     */
    upsert<T extends StatusUpsertArgs>(args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assets<T extends Status$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Status$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    keys<T extends Status$keysArgs<ExtArgs> = {}>(args?: Subset<T, Status$keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    views<T extends Status$viewsArgs<ExtArgs> = {}>(args?: Subset<T, Status$viewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactions<T extends Status$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, Status$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Status model
   */
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'Int'>
    readonly authorId: FieldRef<"Status", 'Int'>
    readonly captionCiphertext: FieldRef<"Status", 'String'>
    readonly encryptedKeys: FieldRef<"Status", 'Json'>
    readonly translatedFrom: FieldRef<"Status", 'String'>
    readonly translations: FieldRef<"Status", 'Json'>
    readonly isExplicit: FieldRef<"Status", 'Boolean'>
    readonly audience: FieldRef<"Status", 'StatusAudience'>
    readonly expiresAt: FieldRef<"Status", 'DateTime'>
    readonly createdAt: FieldRef<"Status", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }

  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status createManyAndReturn
   */
  export type StatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to update.
     */
    limit?: number
  }

  /**
   * Status updateManyAndReturn
   */
  export type StatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }

  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to delete.
     */
    limit?: number
  }

  /**
   * Status.assets
   */
  export type Status$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    where?: StatusAssetWhereInput
    orderBy?: StatusAssetOrderByWithRelationInput | StatusAssetOrderByWithRelationInput[]
    cursor?: StatusAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusAssetScalarFieldEnum | StatusAssetScalarFieldEnum[]
  }

  /**
   * Status.keys
   */
  export type Status$keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    where?: StatusKeyWhereInput
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    cursor?: StatusKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusKeyScalarFieldEnum | StatusKeyScalarFieldEnum[]
  }

  /**
   * Status.views
   */
  export type Status$viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    where?: StatusViewWhereInput
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    cursor?: StatusViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusViewScalarFieldEnum | StatusViewScalarFieldEnum[]
  }

  /**
   * Status.reactions
   */
  export type Status$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    where?: StatusReactionWhereInput
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    cursor?: StatusReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusReactionScalarFieldEnum | StatusReactionScalarFieldEnum[]
  }

  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusInclude<ExtArgs> | null
  }


  /**
   * Model StatusAsset
   */

  export type AggregateStatusAsset = {
    _count: StatusAssetCountAggregateOutputType | null
    _avg: StatusAssetAvgAggregateOutputType | null
    _sum: StatusAssetSumAggregateOutputType | null
    _min: StatusAssetMinAggregateOutputType | null
    _max: StatusAssetMaxAggregateOutputType | null
  }

  export type StatusAssetAvgAggregateOutputType = {
    id: number | null
    statusId: number | null
    width: number | null
    height: number | null
    durationSec: number | null
  }

  export type StatusAssetSumAggregateOutputType = {
    id: number | null
    statusId: number | null
    width: number | null
    height: number | null
    durationSec: number | null
  }

  export type StatusAssetMinAggregateOutputType = {
    id: number | null
    statusId: number | null
    kind: $Enums.StatusAssetKind | null
    url: string | null
    mimeType: string | null
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date | null
  }

  export type StatusAssetMaxAggregateOutputType = {
    id: number | null
    statusId: number | null
    kind: $Enums.StatusAssetKind | null
    url: string | null
    mimeType: string | null
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date | null
  }

  export type StatusAssetCountAggregateOutputType = {
    id: number
    statusId: number
    kind: number
    url: number
    mimeType: number
    width: number
    height: number
    durationSec: number
    caption: number
    createdAt: number
    _all: number
  }


  export type StatusAssetAvgAggregateInputType = {
    id?: true
    statusId?: true
    width?: true
    height?: true
    durationSec?: true
  }

  export type StatusAssetSumAggregateInputType = {
    id?: true
    statusId?: true
    width?: true
    height?: true
    durationSec?: true
  }

  export type StatusAssetMinAggregateInputType = {
    id?: true
    statusId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
  }

  export type StatusAssetMaxAggregateInputType = {
    id?: true
    statusId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
  }

  export type StatusAssetCountAggregateInputType = {
    id?: true
    statusId?: true
    kind?: true
    url?: true
    mimeType?: true
    width?: true
    height?: true
    durationSec?: true
    caption?: true
    createdAt?: true
    _all?: true
  }

  export type StatusAssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusAsset to aggregate.
     */
    where?: StatusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusAssets to fetch.
     */
    orderBy?: StatusAssetOrderByWithRelationInput | StatusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusAssets
    **/
    _count?: true | StatusAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusAssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusAssetMaxAggregateInputType
  }

  export type GetStatusAssetAggregateType<T extends StatusAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusAsset[P]>
      : GetScalarType<T[P], AggregateStatusAsset[P]>
  }




  export type StatusAssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusAssetWhereInput
    orderBy?: StatusAssetOrderByWithAggregationInput | StatusAssetOrderByWithAggregationInput[]
    by: StatusAssetScalarFieldEnum[] | StatusAssetScalarFieldEnum
    having?: StatusAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusAssetCountAggregateInputType | true
    _avg?: StatusAssetAvgAggregateInputType
    _sum?: StatusAssetSumAggregateInputType
    _min?: StatusAssetMinAggregateInputType
    _max?: StatusAssetMaxAggregateInputType
  }

  export type StatusAssetGroupByOutputType = {
    id: number
    statusId: number
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width: number | null
    height: number | null
    durationSec: number | null
    caption: string | null
    createdAt: Date
    _count: StatusAssetCountAggregateOutputType | null
    _avg: StatusAssetAvgAggregateOutputType | null
    _sum: StatusAssetSumAggregateOutputType | null
    _min: StatusAssetMinAggregateOutputType | null
    _max: StatusAssetMaxAggregateOutputType | null
  }

  type GetStatusAssetGroupByPayload<T extends StatusAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusAssetGroupByOutputType[P]>
            : GetScalarType<T[P], StatusAssetGroupByOutputType[P]>
        }
      >
    >


  export type StatusAssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusAsset"]>

  export type StatusAssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusAsset"]>

  export type StatusAssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusAsset"]>

  export type StatusAssetSelectScalar = {
    id?: boolean
    statusId?: boolean
    kind?: boolean
    url?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    durationSec?: boolean
    caption?: boolean
    createdAt?: boolean
  }

  export type StatusAssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statusId" | "kind" | "url" | "mimeType" | "width" | "height" | "durationSec" | "caption" | "createdAt", ExtArgs["result"]["statusAsset"]>
  export type StatusAssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }
  export type StatusAssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }
  export type StatusAssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
  }

  export type $StatusAssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusAsset"
    objects: {
      status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      statusId: number
      kind: $Enums.StatusAssetKind
      url: string
      mimeType: string
      width: number | null
      height: number | null
      durationSec: number | null
      caption: string | null
      createdAt: Date
    }, ExtArgs["result"]["statusAsset"]>
    composites: {}
  }

  type StatusAssetGetPayload<S extends boolean | null | undefined | StatusAssetDefaultArgs> = $Result.GetResult<Prisma.$StatusAssetPayload, S>

  type StatusAssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusAssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusAssetCountAggregateInputType | true
    }

  export interface StatusAssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusAsset'], meta: { name: 'StatusAsset' } }
    /**
     * Find zero or one StatusAsset that matches the filter.
     * @param {StatusAssetFindUniqueArgs} args - Arguments to find a StatusAsset
     * @example
     * // Get one StatusAsset
     * const statusAsset = await prisma.statusAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusAssetFindUniqueArgs>(args: SelectSubset<T, StatusAssetFindUniqueArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusAsset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusAssetFindUniqueOrThrowArgs} args - Arguments to find a StatusAsset
     * @example
     * // Get one StatusAsset
     * const statusAsset = await prisma.statusAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusAssetFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusAssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetFindFirstArgs} args - Arguments to find a StatusAsset
     * @example
     * // Get one StatusAsset
     * const statusAsset = await prisma.statusAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusAssetFindFirstArgs>(args?: SelectSubset<T, StatusAssetFindFirstArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusAsset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetFindFirstOrThrowArgs} args - Arguments to find a StatusAsset
     * @example
     * // Get one StatusAsset
     * const statusAsset = await prisma.statusAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusAssetFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusAssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusAssets
     * const statusAssets = await prisma.statusAsset.findMany()
     * 
     * // Get first 10 StatusAssets
     * const statusAssets = await prisma.statusAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusAssetWithIdOnly = await prisma.statusAsset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusAssetFindManyArgs>(args?: SelectSubset<T, StatusAssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusAsset.
     * @param {StatusAssetCreateArgs} args - Arguments to create a StatusAsset.
     * @example
     * // Create one StatusAsset
     * const StatusAsset = await prisma.statusAsset.create({
     *   data: {
     *     // ... data to create a StatusAsset
     *   }
     * })
     * 
     */
    create<T extends StatusAssetCreateArgs>(args: SelectSubset<T, StatusAssetCreateArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusAssets.
     * @param {StatusAssetCreateManyArgs} args - Arguments to create many StatusAssets.
     * @example
     * // Create many StatusAssets
     * const statusAsset = await prisma.statusAsset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusAssetCreateManyArgs>(args?: SelectSubset<T, StatusAssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusAssets and returns the data saved in the database.
     * @param {StatusAssetCreateManyAndReturnArgs} args - Arguments to create many StatusAssets.
     * @example
     * // Create many StatusAssets
     * const statusAsset = await prisma.statusAsset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusAssets and only return the `id`
     * const statusAssetWithIdOnly = await prisma.statusAsset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusAssetCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusAssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusAsset.
     * @param {StatusAssetDeleteArgs} args - Arguments to delete one StatusAsset.
     * @example
     * // Delete one StatusAsset
     * const StatusAsset = await prisma.statusAsset.delete({
     *   where: {
     *     // ... filter to delete one StatusAsset
     *   }
     * })
     * 
     */
    delete<T extends StatusAssetDeleteArgs>(args: SelectSubset<T, StatusAssetDeleteArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusAsset.
     * @param {StatusAssetUpdateArgs} args - Arguments to update one StatusAsset.
     * @example
     * // Update one StatusAsset
     * const statusAsset = await prisma.statusAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusAssetUpdateArgs>(args: SelectSubset<T, StatusAssetUpdateArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusAssets.
     * @param {StatusAssetDeleteManyArgs} args - Arguments to filter StatusAssets to delete.
     * @example
     * // Delete a few StatusAssets
     * const { count } = await prisma.statusAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusAssetDeleteManyArgs>(args?: SelectSubset<T, StatusAssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusAssets
     * const statusAsset = await prisma.statusAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusAssetUpdateManyArgs>(args: SelectSubset<T, StatusAssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusAssets and returns the data updated in the database.
     * @param {StatusAssetUpdateManyAndReturnArgs} args - Arguments to update many StatusAssets.
     * @example
     * // Update many StatusAssets
     * const statusAsset = await prisma.statusAsset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusAssets and only return the `id`
     * const statusAssetWithIdOnly = await prisma.statusAsset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusAssetUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusAssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusAsset.
     * @param {StatusAssetUpsertArgs} args - Arguments to update or create a StatusAsset.
     * @example
     * // Update or create a StatusAsset
     * const statusAsset = await prisma.statusAsset.upsert({
     *   create: {
     *     // ... data to create a StatusAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusAsset we want to update
     *   }
     * })
     */
    upsert<T extends StatusAssetUpsertArgs>(args: SelectSubset<T, StatusAssetUpsertArgs<ExtArgs>>): Prisma__StatusAssetClient<$Result.GetResult<Prisma.$StatusAssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetCountArgs} args - Arguments to filter StatusAssets to count.
     * @example
     * // Count the number of StatusAssets
     * const count = await prisma.statusAsset.count({
     *   where: {
     *     // ... the filter for the StatusAssets we want to count
     *   }
     * })
    **/
    count<T extends StatusAssetCountArgs>(
      args?: Subset<T, StatusAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAssetAggregateArgs>(args: Subset<T, StatusAssetAggregateArgs>): Prisma.PrismaPromise<GetStatusAssetAggregateType<T>>

    /**
     * Group by StatusAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusAssetGroupByArgs['orderBy'] }
        : { orderBy?: StatusAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusAsset model
   */
  readonly fields: StatusAssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusAssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusAsset model
   */
  interface StatusAssetFieldRefs {
    readonly id: FieldRef<"StatusAsset", 'Int'>
    readonly statusId: FieldRef<"StatusAsset", 'Int'>
    readonly kind: FieldRef<"StatusAsset", 'StatusAssetKind'>
    readonly url: FieldRef<"StatusAsset", 'String'>
    readonly mimeType: FieldRef<"StatusAsset", 'String'>
    readonly width: FieldRef<"StatusAsset", 'Int'>
    readonly height: FieldRef<"StatusAsset", 'Int'>
    readonly durationSec: FieldRef<"StatusAsset", 'Int'>
    readonly caption: FieldRef<"StatusAsset", 'String'>
    readonly createdAt: FieldRef<"StatusAsset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StatusAsset findUnique
   */
  export type StatusAssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StatusAsset to fetch.
     */
    where: StatusAssetWhereUniqueInput
  }

  /**
   * StatusAsset findUniqueOrThrow
   */
  export type StatusAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StatusAsset to fetch.
     */
    where: StatusAssetWhereUniqueInput
  }

  /**
   * StatusAsset findFirst
   */
  export type StatusAssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StatusAsset to fetch.
     */
    where?: StatusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusAssets to fetch.
     */
    orderBy?: StatusAssetOrderByWithRelationInput | StatusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusAssets.
     */
    cursor?: StatusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusAssets.
     */
    distinct?: StatusAssetScalarFieldEnum | StatusAssetScalarFieldEnum[]
  }

  /**
   * StatusAsset findFirstOrThrow
   */
  export type StatusAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StatusAsset to fetch.
     */
    where?: StatusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusAssets to fetch.
     */
    orderBy?: StatusAssetOrderByWithRelationInput | StatusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusAssets.
     */
    cursor?: StatusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusAssets.
     */
    distinct?: StatusAssetScalarFieldEnum | StatusAssetScalarFieldEnum[]
  }

  /**
   * StatusAsset findMany
   */
  export type StatusAssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StatusAssets to fetch.
     */
    where?: StatusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusAssets to fetch.
     */
    orderBy?: StatusAssetOrderByWithRelationInput | StatusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusAssets.
     */
    cursor?: StatusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusAssets.
     */
    skip?: number
    distinct?: StatusAssetScalarFieldEnum | StatusAssetScalarFieldEnum[]
  }

  /**
   * StatusAsset create
   */
  export type StatusAssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusAsset.
     */
    data: XOR<StatusAssetCreateInput, StatusAssetUncheckedCreateInput>
  }

  /**
   * StatusAsset createMany
   */
  export type StatusAssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusAssets.
     */
    data: StatusAssetCreateManyInput | StatusAssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusAsset createManyAndReturn
   */
  export type StatusAssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * The data used to create many StatusAssets.
     */
    data: StatusAssetCreateManyInput | StatusAssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusAsset update
   */
  export type StatusAssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusAsset.
     */
    data: XOR<StatusAssetUpdateInput, StatusAssetUncheckedUpdateInput>
    /**
     * Choose, which StatusAsset to update.
     */
    where: StatusAssetWhereUniqueInput
  }

  /**
   * StatusAsset updateMany
   */
  export type StatusAssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusAssets.
     */
    data: XOR<StatusAssetUpdateManyMutationInput, StatusAssetUncheckedUpdateManyInput>
    /**
     * Filter which StatusAssets to update
     */
    where?: StatusAssetWhereInput
    /**
     * Limit how many StatusAssets to update.
     */
    limit?: number
  }

  /**
   * StatusAsset updateManyAndReturn
   */
  export type StatusAssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * The data used to update StatusAssets.
     */
    data: XOR<StatusAssetUpdateManyMutationInput, StatusAssetUncheckedUpdateManyInput>
    /**
     * Filter which StatusAssets to update
     */
    where?: StatusAssetWhereInput
    /**
     * Limit how many StatusAssets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusAsset upsert
   */
  export type StatusAssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusAsset to update in case it exists.
     */
    where: StatusAssetWhereUniqueInput
    /**
     * In case the StatusAsset found by the `where` argument doesn't exist, create a new StatusAsset with this data.
     */
    create: XOR<StatusAssetCreateInput, StatusAssetUncheckedCreateInput>
    /**
     * In case the StatusAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusAssetUpdateInput, StatusAssetUncheckedUpdateInput>
  }

  /**
   * StatusAsset delete
   */
  export type StatusAssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
    /**
     * Filter which StatusAsset to delete.
     */
    where: StatusAssetWhereUniqueInput
  }

  /**
   * StatusAsset deleteMany
   */
  export type StatusAssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusAssets to delete
     */
    where?: StatusAssetWhereInput
    /**
     * Limit how many StatusAssets to delete.
     */
    limit?: number
  }

  /**
   * StatusAsset without action
   */
  export type StatusAssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusAsset
     */
    select?: StatusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusAsset
     */
    omit?: StatusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusAssetInclude<ExtArgs> | null
  }


  /**
   * Model StatusKey
   */

  export type AggregateStatusKey = {
    _count: StatusKeyCountAggregateOutputType | null
    _avg: StatusKeyAvgAggregateOutputType | null
    _sum: StatusKeySumAggregateOutputType | null
    _min: StatusKeyMinAggregateOutputType | null
    _max: StatusKeyMaxAggregateOutputType | null
  }

  export type StatusKeyAvgAggregateOutputType = {
    statusId: number | null
    userId: number | null
  }

  export type StatusKeySumAggregateOutputType = {
    statusId: number | null
    userId: number | null
  }

  export type StatusKeyMinAggregateOutputType = {
    statusId: number | null
    userId: number | null
    encryptedKey: string | null
  }

  export type StatusKeyMaxAggregateOutputType = {
    statusId: number | null
    userId: number | null
    encryptedKey: string | null
  }

  export type StatusKeyCountAggregateOutputType = {
    statusId: number
    userId: number
    encryptedKey: number
    _all: number
  }


  export type StatusKeyAvgAggregateInputType = {
    statusId?: true
    userId?: true
  }

  export type StatusKeySumAggregateInputType = {
    statusId?: true
    userId?: true
  }

  export type StatusKeyMinAggregateInputType = {
    statusId?: true
    userId?: true
    encryptedKey?: true
  }

  export type StatusKeyMaxAggregateInputType = {
    statusId?: true
    userId?: true
    encryptedKey?: true
  }

  export type StatusKeyCountAggregateInputType = {
    statusId?: true
    userId?: true
    encryptedKey?: true
    _all?: true
  }

  export type StatusKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusKey to aggregate.
     */
    where?: StatusKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusKeys to fetch.
     */
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusKeys
    **/
    _count?: true | StatusKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusKeyMaxAggregateInputType
  }

  export type GetStatusKeyAggregateType<T extends StatusKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusKey[P]>
      : GetScalarType<T[P], AggregateStatusKey[P]>
  }




  export type StatusKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusKeyWhereInput
    orderBy?: StatusKeyOrderByWithAggregationInput | StatusKeyOrderByWithAggregationInput[]
    by: StatusKeyScalarFieldEnum[] | StatusKeyScalarFieldEnum
    having?: StatusKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusKeyCountAggregateInputType | true
    _avg?: StatusKeyAvgAggregateInputType
    _sum?: StatusKeySumAggregateInputType
    _min?: StatusKeyMinAggregateInputType
    _max?: StatusKeyMaxAggregateInputType
  }

  export type StatusKeyGroupByOutputType = {
    statusId: number
    userId: number
    encryptedKey: string
    _count: StatusKeyCountAggregateOutputType | null
    _avg: StatusKeyAvgAggregateOutputType | null
    _sum: StatusKeySumAggregateOutputType | null
    _min: StatusKeyMinAggregateOutputType | null
    _max: StatusKeyMaxAggregateOutputType | null
  }

  type GetStatusKeyGroupByPayload<T extends StatusKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusKeyGroupByOutputType[P]>
            : GetScalarType<T[P], StatusKeyGroupByOutputType[P]>
        }
      >
    >


  export type StatusKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusKey"]>

  export type StatusKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusKey"]>

  export type StatusKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    encryptedKey?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusKey"]>

  export type StatusKeySelectScalar = {
    statusId?: boolean
    userId?: boolean
    encryptedKey?: boolean
  }

  export type StatusKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"statusId" | "userId" | "encryptedKey", ExtArgs["result"]["statusKey"]>
  export type StatusKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusKeyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StatusKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusKey"
    objects: {
      status: Prisma.$StatusPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      statusId: number
      userId: number
      encryptedKey: string
    }, ExtArgs["result"]["statusKey"]>
    composites: {}
  }

  type StatusKeyGetPayload<S extends boolean | null | undefined | StatusKeyDefaultArgs> = $Result.GetResult<Prisma.$StatusKeyPayload, S>

  type StatusKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusKeyCountAggregateInputType | true
    }

  export interface StatusKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusKey'], meta: { name: 'StatusKey' } }
    /**
     * Find zero or one StatusKey that matches the filter.
     * @param {StatusKeyFindUniqueArgs} args - Arguments to find a StatusKey
     * @example
     * // Get one StatusKey
     * const statusKey = await prisma.statusKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusKeyFindUniqueArgs>(args: SelectSubset<T, StatusKeyFindUniqueArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusKeyFindUniqueOrThrowArgs} args - Arguments to find a StatusKey
     * @example
     * // Get one StatusKey
     * const statusKey = await prisma.statusKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyFindFirstArgs} args - Arguments to find a StatusKey
     * @example
     * // Get one StatusKey
     * const statusKey = await prisma.statusKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusKeyFindFirstArgs>(args?: SelectSubset<T, StatusKeyFindFirstArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyFindFirstOrThrowArgs} args - Arguments to find a StatusKey
     * @example
     * // Get one StatusKey
     * const statusKey = await prisma.statusKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusKeys
     * const statusKeys = await prisma.statusKey.findMany()
     * 
     * // Get first 10 StatusKeys
     * const statusKeys = await prisma.statusKey.findMany({ take: 10 })
     * 
     * // Only select the `statusId`
     * const statusKeyWithStatusIdOnly = await prisma.statusKey.findMany({ select: { statusId: true } })
     * 
     */
    findMany<T extends StatusKeyFindManyArgs>(args?: SelectSubset<T, StatusKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusKey.
     * @param {StatusKeyCreateArgs} args - Arguments to create a StatusKey.
     * @example
     * // Create one StatusKey
     * const StatusKey = await prisma.statusKey.create({
     *   data: {
     *     // ... data to create a StatusKey
     *   }
     * })
     * 
     */
    create<T extends StatusKeyCreateArgs>(args: SelectSubset<T, StatusKeyCreateArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusKeys.
     * @param {StatusKeyCreateManyArgs} args - Arguments to create many StatusKeys.
     * @example
     * // Create many StatusKeys
     * const statusKey = await prisma.statusKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusKeyCreateManyArgs>(args?: SelectSubset<T, StatusKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusKeys and returns the data saved in the database.
     * @param {StatusKeyCreateManyAndReturnArgs} args - Arguments to create many StatusKeys.
     * @example
     * // Create many StatusKeys
     * const statusKey = await prisma.statusKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusKeys and only return the `statusId`
     * const statusKeyWithStatusIdOnly = await prisma.statusKey.createManyAndReturn({
     *   select: { statusId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusKey.
     * @param {StatusKeyDeleteArgs} args - Arguments to delete one StatusKey.
     * @example
     * // Delete one StatusKey
     * const StatusKey = await prisma.statusKey.delete({
     *   where: {
     *     // ... filter to delete one StatusKey
     *   }
     * })
     * 
     */
    delete<T extends StatusKeyDeleteArgs>(args: SelectSubset<T, StatusKeyDeleteArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusKey.
     * @param {StatusKeyUpdateArgs} args - Arguments to update one StatusKey.
     * @example
     * // Update one StatusKey
     * const statusKey = await prisma.statusKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusKeyUpdateArgs>(args: SelectSubset<T, StatusKeyUpdateArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusKeys.
     * @param {StatusKeyDeleteManyArgs} args - Arguments to filter StatusKeys to delete.
     * @example
     * // Delete a few StatusKeys
     * const { count } = await prisma.statusKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusKeyDeleteManyArgs>(args?: SelectSubset<T, StatusKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusKeys
     * const statusKey = await prisma.statusKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusKeyUpdateManyArgs>(args: SelectSubset<T, StatusKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusKeys and returns the data updated in the database.
     * @param {StatusKeyUpdateManyAndReturnArgs} args - Arguments to update many StatusKeys.
     * @example
     * // Update many StatusKeys
     * const statusKey = await prisma.statusKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusKeys and only return the `statusId`
     * const statusKeyWithStatusIdOnly = await prisma.statusKey.updateManyAndReturn({
     *   select: { statusId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusKey.
     * @param {StatusKeyUpsertArgs} args - Arguments to update or create a StatusKey.
     * @example
     * // Update or create a StatusKey
     * const statusKey = await prisma.statusKey.upsert({
     *   create: {
     *     // ... data to create a StatusKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusKey we want to update
     *   }
     * })
     */
    upsert<T extends StatusKeyUpsertArgs>(args: SelectSubset<T, StatusKeyUpsertArgs<ExtArgs>>): Prisma__StatusKeyClient<$Result.GetResult<Prisma.$StatusKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyCountArgs} args - Arguments to filter StatusKeys to count.
     * @example
     * // Count the number of StatusKeys
     * const count = await prisma.statusKey.count({
     *   where: {
     *     // ... the filter for the StatusKeys we want to count
     *   }
     * })
    **/
    count<T extends StatusKeyCountArgs>(
      args?: Subset<T, StatusKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusKeyAggregateArgs>(args: Subset<T, StatusKeyAggregateArgs>): Prisma.PrismaPromise<GetStatusKeyAggregateType<T>>

    /**
     * Group by StatusKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusKeyGroupByArgs['orderBy'] }
        : { orderBy?: StatusKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusKey model
   */
  readonly fields: StatusKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusKey model
   */
  interface StatusKeyFieldRefs {
    readonly statusId: FieldRef<"StatusKey", 'Int'>
    readonly userId: FieldRef<"StatusKey", 'Int'>
    readonly encryptedKey: FieldRef<"StatusKey", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StatusKey findUnique
   */
  export type StatusKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter, which StatusKey to fetch.
     */
    where: StatusKeyWhereUniqueInput
  }

  /**
   * StatusKey findUniqueOrThrow
   */
  export type StatusKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter, which StatusKey to fetch.
     */
    where: StatusKeyWhereUniqueInput
  }

  /**
   * StatusKey findFirst
   */
  export type StatusKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter, which StatusKey to fetch.
     */
    where?: StatusKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusKeys to fetch.
     */
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusKeys.
     */
    cursor?: StatusKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusKeys.
     */
    distinct?: StatusKeyScalarFieldEnum | StatusKeyScalarFieldEnum[]
  }

  /**
   * StatusKey findFirstOrThrow
   */
  export type StatusKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter, which StatusKey to fetch.
     */
    where?: StatusKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusKeys to fetch.
     */
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusKeys.
     */
    cursor?: StatusKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusKeys.
     */
    distinct?: StatusKeyScalarFieldEnum | StatusKeyScalarFieldEnum[]
  }

  /**
   * StatusKey findMany
   */
  export type StatusKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter, which StatusKeys to fetch.
     */
    where?: StatusKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusKeys to fetch.
     */
    orderBy?: StatusKeyOrderByWithRelationInput | StatusKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusKeys.
     */
    cursor?: StatusKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusKeys.
     */
    skip?: number
    distinct?: StatusKeyScalarFieldEnum | StatusKeyScalarFieldEnum[]
  }

  /**
   * StatusKey create
   */
  export type StatusKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusKey.
     */
    data: XOR<StatusKeyCreateInput, StatusKeyUncheckedCreateInput>
  }

  /**
   * StatusKey createMany
   */
  export type StatusKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusKeys.
     */
    data: StatusKeyCreateManyInput | StatusKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusKey createManyAndReturn
   */
  export type StatusKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * The data used to create many StatusKeys.
     */
    data: StatusKeyCreateManyInput | StatusKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusKey update
   */
  export type StatusKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusKey.
     */
    data: XOR<StatusKeyUpdateInput, StatusKeyUncheckedUpdateInput>
    /**
     * Choose, which StatusKey to update.
     */
    where: StatusKeyWhereUniqueInput
  }

  /**
   * StatusKey updateMany
   */
  export type StatusKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusKeys.
     */
    data: XOR<StatusKeyUpdateManyMutationInput, StatusKeyUncheckedUpdateManyInput>
    /**
     * Filter which StatusKeys to update
     */
    where?: StatusKeyWhereInput
    /**
     * Limit how many StatusKeys to update.
     */
    limit?: number
  }

  /**
   * StatusKey updateManyAndReturn
   */
  export type StatusKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * The data used to update StatusKeys.
     */
    data: XOR<StatusKeyUpdateManyMutationInput, StatusKeyUncheckedUpdateManyInput>
    /**
     * Filter which StatusKeys to update
     */
    where?: StatusKeyWhereInput
    /**
     * Limit how many StatusKeys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusKey upsert
   */
  export type StatusKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusKey to update in case it exists.
     */
    where: StatusKeyWhereUniqueInput
    /**
     * In case the StatusKey found by the `where` argument doesn't exist, create a new StatusKey with this data.
     */
    create: XOR<StatusKeyCreateInput, StatusKeyUncheckedCreateInput>
    /**
     * In case the StatusKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusKeyUpdateInput, StatusKeyUncheckedUpdateInput>
  }

  /**
   * StatusKey delete
   */
  export type StatusKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
    /**
     * Filter which StatusKey to delete.
     */
    where: StatusKeyWhereUniqueInput
  }

  /**
   * StatusKey deleteMany
   */
  export type StatusKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusKeys to delete
     */
    where?: StatusKeyWhereInput
    /**
     * Limit how many StatusKeys to delete.
     */
    limit?: number
  }

  /**
   * StatusKey without action
   */
  export type StatusKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusKey
     */
    select?: StatusKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusKey
     */
    omit?: StatusKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusKeyInclude<ExtArgs> | null
  }


  /**
   * Model StatusView
   */

  export type AggregateStatusView = {
    _count: StatusViewCountAggregateOutputType | null
    _avg: StatusViewAvgAggregateOutputType | null
    _sum: StatusViewSumAggregateOutputType | null
    _min: StatusViewMinAggregateOutputType | null
    _max: StatusViewMaxAggregateOutputType | null
  }

  export type StatusViewAvgAggregateOutputType = {
    id: number | null
    statusId: number | null
    viewerId: number | null
  }

  export type StatusViewSumAggregateOutputType = {
    id: number | null
    statusId: number | null
    viewerId: number | null
  }

  export type StatusViewMinAggregateOutputType = {
    id: number | null
    statusId: number | null
    viewerId: number | null
    viewedAt: Date | null
  }

  export type StatusViewMaxAggregateOutputType = {
    id: number | null
    statusId: number | null
    viewerId: number | null
    viewedAt: Date | null
  }

  export type StatusViewCountAggregateOutputType = {
    id: number
    statusId: number
    viewerId: number
    viewedAt: number
    _all: number
  }


  export type StatusViewAvgAggregateInputType = {
    id?: true
    statusId?: true
    viewerId?: true
  }

  export type StatusViewSumAggregateInputType = {
    id?: true
    statusId?: true
    viewerId?: true
  }

  export type StatusViewMinAggregateInputType = {
    id?: true
    statusId?: true
    viewerId?: true
    viewedAt?: true
  }

  export type StatusViewMaxAggregateInputType = {
    id?: true
    statusId?: true
    viewerId?: true
    viewedAt?: true
  }

  export type StatusViewCountAggregateInputType = {
    id?: true
    statusId?: true
    viewerId?: true
    viewedAt?: true
    _all?: true
  }

  export type StatusViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusView to aggregate.
     */
    where?: StatusViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusViews to fetch.
     */
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusViews
    **/
    _count?: true | StatusViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusViewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusViewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusViewMaxAggregateInputType
  }

  export type GetStatusViewAggregateType<T extends StatusViewAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusView[P]>
      : GetScalarType<T[P], AggregateStatusView[P]>
  }




  export type StatusViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusViewWhereInput
    orderBy?: StatusViewOrderByWithAggregationInput | StatusViewOrderByWithAggregationInput[]
    by: StatusViewScalarFieldEnum[] | StatusViewScalarFieldEnum
    having?: StatusViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusViewCountAggregateInputType | true
    _avg?: StatusViewAvgAggregateInputType
    _sum?: StatusViewSumAggregateInputType
    _min?: StatusViewMinAggregateInputType
    _max?: StatusViewMaxAggregateInputType
  }

  export type StatusViewGroupByOutputType = {
    id: number
    statusId: number
    viewerId: number
    viewedAt: Date
    _count: StatusViewCountAggregateOutputType | null
    _avg: StatusViewAvgAggregateOutputType | null
    _sum: StatusViewSumAggregateOutputType | null
    _min: StatusViewMinAggregateOutputType | null
    _max: StatusViewMaxAggregateOutputType | null
  }

  type GetStatusViewGroupByPayload<T extends StatusViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusViewGroupByOutputType[P]>
            : GetScalarType<T[P], StatusViewGroupByOutputType[P]>
        }
      >
    >


  export type StatusViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    viewerId?: boolean
    viewedAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusView"]>

  export type StatusViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    viewerId?: boolean
    viewedAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusView"]>

  export type StatusViewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusId?: boolean
    viewerId?: boolean
    viewedAt?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusView"]>

  export type StatusViewSelectScalar = {
    id?: boolean
    statusId?: boolean
    viewerId?: boolean
    viewedAt?: boolean
  }

  export type StatusViewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statusId" | "viewerId" | "viewedAt", ExtArgs["result"]["statusView"]>
  export type StatusViewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusViewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusViewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    viewer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StatusViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusView"
    objects: {
      status: Prisma.$StatusPayload<ExtArgs>
      viewer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      statusId: number
      viewerId: number
      viewedAt: Date
    }, ExtArgs["result"]["statusView"]>
    composites: {}
  }

  type StatusViewGetPayload<S extends boolean | null | undefined | StatusViewDefaultArgs> = $Result.GetResult<Prisma.$StatusViewPayload, S>

  type StatusViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusViewCountAggregateInputType | true
    }

  export interface StatusViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusView'], meta: { name: 'StatusView' } }
    /**
     * Find zero or one StatusView that matches the filter.
     * @param {StatusViewFindUniqueArgs} args - Arguments to find a StatusView
     * @example
     * // Get one StatusView
     * const statusView = await prisma.statusView.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusViewFindUniqueArgs>(args: SelectSubset<T, StatusViewFindUniqueArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusView that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusViewFindUniqueOrThrowArgs} args - Arguments to find a StatusView
     * @example
     * // Get one StatusView
     * const statusView = await prisma.statusView.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusViewFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusView that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewFindFirstArgs} args - Arguments to find a StatusView
     * @example
     * // Get one StatusView
     * const statusView = await prisma.statusView.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusViewFindFirstArgs>(args?: SelectSubset<T, StatusViewFindFirstArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusView that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewFindFirstOrThrowArgs} args - Arguments to find a StatusView
     * @example
     * // Get one StatusView
     * const statusView = await prisma.statusView.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusViewFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusViewFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusViews
     * const statusViews = await prisma.statusView.findMany()
     * 
     * // Get first 10 StatusViews
     * const statusViews = await prisma.statusView.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusViewWithIdOnly = await prisma.statusView.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusViewFindManyArgs>(args?: SelectSubset<T, StatusViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusView.
     * @param {StatusViewCreateArgs} args - Arguments to create a StatusView.
     * @example
     * // Create one StatusView
     * const StatusView = await prisma.statusView.create({
     *   data: {
     *     // ... data to create a StatusView
     *   }
     * })
     * 
     */
    create<T extends StatusViewCreateArgs>(args: SelectSubset<T, StatusViewCreateArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusViews.
     * @param {StatusViewCreateManyArgs} args - Arguments to create many StatusViews.
     * @example
     * // Create many StatusViews
     * const statusView = await prisma.statusView.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusViewCreateManyArgs>(args?: SelectSubset<T, StatusViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusViews and returns the data saved in the database.
     * @param {StatusViewCreateManyAndReturnArgs} args - Arguments to create many StatusViews.
     * @example
     * // Create many StatusViews
     * const statusView = await prisma.statusView.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusViews and only return the `id`
     * const statusViewWithIdOnly = await prisma.statusView.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusViewCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusView.
     * @param {StatusViewDeleteArgs} args - Arguments to delete one StatusView.
     * @example
     * // Delete one StatusView
     * const StatusView = await prisma.statusView.delete({
     *   where: {
     *     // ... filter to delete one StatusView
     *   }
     * })
     * 
     */
    delete<T extends StatusViewDeleteArgs>(args: SelectSubset<T, StatusViewDeleteArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusView.
     * @param {StatusViewUpdateArgs} args - Arguments to update one StatusView.
     * @example
     * // Update one StatusView
     * const statusView = await prisma.statusView.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusViewUpdateArgs>(args: SelectSubset<T, StatusViewUpdateArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusViews.
     * @param {StatusViewDeleteManyArgs} args - Arguments to filter StatusViews to delete.
     * @example
     * // Delete a few StatusViews
     * const { count } = await prisma.statusView.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusViewDeleteManyArgs>(args?: SelectSubset<T, StatusViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusViews
     * const statusView = await prisma.statusView.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusViewUpdateManyArgs>(args: SelectSubset<T, StatusViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusViews and returns the data updated in the database.
     * @param {StatusViewUpdateManyAndReturnArgs} args - Arguments to update many StatusViews.
     * @example
     * // Update many StatusViews
     * const statusView = await prisma.statusView.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusViews and only return the `id`
     * const statusViewWithIdOnly = await prisma.statusView.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusViewUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusView.
     * @param {StatusViewUpsertArgs} args - Arguments to update or create a StatusView.
     * @example
     * // Update or create a StatusView
     * const statusView = await prisma.statusView.upsert({
     *   create: {
     *     // ... data to create a StatusView
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusView we want to update
     *   }
     * })
     */
    upsert<T extends StatusViewUpsertArgs>(args: SelectSubset<T, StatusViewUpsertArgs<ExtArgs>>): Prisma__StatusViewClient<$Result.GetResult<Prisma.$StatusViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewCountArgs} args - Arguments to filter StatusViews to count.
     * @example
     * // Count the number of StatusViews
     * const count = await prisma.statusView.count({
     *   where: {
     *     // ... the filter for the StatusViews we want to count
     *   }
     * })
    **/
    count<T extends StatusViewCountArgs>(
      args?: Subset<T, StatusViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusViewAggregateArgs>(args: Subset<T, StatusViewAggregateArgs>): Prisma.PrismaPromise<GetStatusViewAggregateType<T>>

    /**
     * Group by StatusView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusViewGroupByArgs['orderBy'] }
        : { orderBy?: StatusViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusView model
   */
  readonly fields: StatusViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusView.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    viewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusView model
   */
  interface StatusViewFieldRefs {
    readonly id: FieldRef<"StatusView", 'Int'>
    readonly statusId: FieldRef<"StatusView", 'Int'>
    readonly viewerId: FieldRef<"StatusView", 'Int'>
    readonly viewedAt: FieldRef<"StatusView", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StatusView findUnique
   */
  export type StatusViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter, which StatusView to fetch.
     */
    where: StatusViewWhereUniqueInput
  }

  /**
   * StatusView findUniqueOrThrow
   */
  export type StatusViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter, which StatusView to fetch.
     */
    where: StatusViewWhereUniqueInput
  }

  /**
   * StatusView findFirst
   */
  export type StatusViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter, which StatusView to fetch.
     */
    where?: StatusViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusViews to fetch.
     */
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusViews.
     */
    cursor?: StatusViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusViews.
     */
    distinct?: StatusViewScalarFieldEnum | StatusViewScalarFieldEnum[]
  }

  /**
   * StatusView findFirstOrThrow
   */
  export type StatusViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter, which StatusView to fetch.
     */
    where?: StatusViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusViews to fetch.
     */
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusViews.
     */
    cursor?: StatusViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusViews.
     */
    distinct?: StatusViewScalarFieldEnum | StatusViewScalarFieldEnum[]
  }

  /**
   * StatusView findMany
   */
  export type StatusViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter, which StatusViews to fetch.
     */
    where?: StatusViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusViews to fetch.
     */
    orderBy?: StatusViewOrderByWithRelationInput | StatusViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusViews.
     */
    cursor?: StatusViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusViews.
     */
    skip?: number
    distinct?: StatusViewScalarFieldEnum | StatusViewScalarFieldEnum[]
  }

  /**
   * StatusView create
   */
  export type StatusViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusView.
     */
    data: XOR<StatusViewCreateInput, StatusViewUncheckedCreateInput>
  }

  /**
   * StatusView createMany
   */
  export type StatusViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusViews.
     */
    data: StatusViewCreateManyInput | StatusViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusView createManyAndReturn
   */
  export type StatusViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * The data used to create many StatusViews.
     */
    data: StatusViewCreateManyInput | StatusViewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusView update
   */
  export type StatusViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusView.
     */
    data: XOR<StatusViewUpdateInput, StatusViewUncheckedUpdateInput>
    /**
     * Choose, which StatusView to update.
     */
    where: StatusViewWhereUniqueInput
  }

  /**
   * StatusView updateMany
   */
  export type StatusViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusViews.
     */
    data: XOR<StatusViewUpdateManyMutationInput, StatusViewUncheckedUpdateManyInput>
    /**
     * Filter which StatusViews to update
     */
    where?: StatusViewWhereInput
    /**
     * Limit how many StatusViews to update.
     */
    limit?: number
  }

  /**
   * StatusView updateManyAndReturn
   */
  export type StatusViewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * The data used to update StatusViews.
     */
    data: XOR<StatusViewUpdateManyMutationInput, StatusViewUncheckedUpdateManyInput>
    /**
     * Filter which StatusViews to update
     */
    where?: StatusViewWhereInput
    /**
     * Limit how many StatusViews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusView upsert
   */
  export type StatusViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusView to update in case it exists.
     */
    where: StatusViewWhereUniqueInput
    /**
     * In case the StatusView found by the `where` argument doesn't exist, create a new StatusView with this data.
     */
    create: XOR<StatusViewCreateInput, StatusViewUncheckedCreateInput>
    /**
     * In case the StatusView was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusViewUpdateInput, StatusViewUncheckedUpdateInput>
  }

  /**
   * StatusView delete
   */
  export type StatusViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
    /**
     * Filter which StatusView to delete.
     */
    where: StatusViewWhereUniqueInput
  }

  /**
   * StatusView deleteMany
   */
  export type StatusViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusViews to delete
     */
    where?: StatusViewWhereInput
    /**
     * Limit how many StatusViews to delete.
     */
    limit?: number
  }

  /**
   * StatusView without action
   */
  export type StatusViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusView
     */
    select?: StatusViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusView
     */
    omit?: StatusViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusViewInclude<ExtArgs> | null
  }


  /**
   * Model StatusReaction
   */

  export type AggregateStatusReaction = {
    _count: StatusReactionCountAggregateOutputType | null
    _avg: StatusReactionAvgAggregateOutputType | null
    _sum: StatusReactionSumAggregateOutputType | null
    _min: StatusReactionMinAggregateOutputType | null
    _max: StatusReactionMaxAggregateOutputType | null
  }

  export type StatusReactionAvgAggregateOutputType = {
    statusId: number | null
    userId: number | null
  }

  export type StatusReactionSumAggregateOutputType = {
    statusId: number | null
    userId: number | null
  }

  export type StatusReactionMinAggregateOutputType = {
    statusId: number | null
    userId: number | null
    emoji: string | null
  }

  export type StatusReactionMaxAggregateOutputType = {
    statusId: number | null
    userId: number | null
    emoji: string | null
  }

  export type StatusReactionCountAggregateOutputType = {
    statusId: number
    userId: number
    emoji: number
    _all: number
  }


  export type StatusReactionAvgAggregateInputType = {
    statusId?: true
    userId?: true
  }

  export type StatusReactionSumAggregateInputType = {
    statusId?: true
    userId?: true
  }

  export type StatusReactionMinAggregateInputType = {
    statusId?: true
    userId?: true
    emoji?: true
  }

  export type StatusReactionMaxAggregateInputType = {
    statusId?: true
    userId?: true
    emoji?: true
  }

  export type StatusReactionCountAggregateInputType = {
    statusId?: true
    userId?: true
    emoji?: true
    _all?: true
  }

  export type StatusReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusReaction to aggregate.
     */
    where?: StatusReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusReactions to fetch.
     */
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusReactions
    **/
    _count?: true | StatusReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusReactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusReactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusReactionMaxAggregateInputType
  }

  export type GetStatusReactionAggregateType<T extends StatusReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusReaction[P]>
      : GetScalarType<T[P], AggregateStatusReaction[P]>
  }




  export type StatusReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusReactionWhereInput
    orderBy?: StatusReactionOrderByWithAggregationInput | StatusReactionOrderByWithAggregationInput[]
    by: StatusReactionScalarFieldEnum[] | StatusReactionScalarFieldEnum
    having?: StatusReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusReactionCountAggregateInputType | true
    _avg?: StatusReactionAvgAggregateInputType
    _sum?: StatusReactionSumAggregateInputType
    _min?: StatusReactionMinAggregateInputType
    _max?: StatusReactionMaxAggregateInputType
  }

  export type StatusReactionGroupByOutputType = {
    statusId: number
    userId: number
    emoji: string
    _count: StatusReactionCountAggregateOutputType | null
    _avg: StatusReactionAvgAggregateOutputType | null
    _sum: StatusReactionSumAggregateOutputType | null
    _min: StatusReactionMinAggregateOutputType | null
    _max: StatusReactionMaxAggregateOutputType | null
  }

  type GetStatusReactionGroupByPayload<T extends StatusReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusReactionGroupByOutputType[P]>
            : GetScalarType<T[P], StatusReactionGroupByOutputType[P]>
        }
      >
    >


  export type StatusReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    emoji?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusReaction"]>

  export type StatusReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    emoji?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusReaction"]>

  export type StatusReactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statusId?: boolean
    userId?: boolean
    emoji?: boolean
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusReaction"]>

  export type StatusReactionSelectScalar = {
    statusId?: boolean
    userId?: boolean
    emoji?: boolean
  }

  export type StatusReactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"statusId" | "userId" | "emoji", ExtArgs["result"]["statusReaction"]>
  export type StatusReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusReactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StatusReactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | StatusDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StatusReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusReaction"
    objects: {
      status: Prisma.$StatusPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      statusId: number
      userId: number
      emoji: string
    }, ExtArgs["result"]["statusReaction"]>
    composites: {}
  }

  type StatusReactionGetPayload<S extends boolean | null | undefined | StatusReactionDefaultArgs> = $Result.GetResult<Prisma.$StatusReactionPayload, S>

  type StatusReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusReactionCountAggregateInputType | true
    }

  export interface StatusReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusReaction'], meta: { name: 'StatusReaction' } }
    /**
     * Find zero or one StatusReaction that matches the filter.
     * @param {StatusReactionFindUniqueArgs} args - Arguments to find a StatusReaction
     * @example
     * // Get one StatusReaction
     * const statusReaction = await prisma.statusReaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusReactionFindUniqueArgs>(args: SelectSubset<T, StatusReactionFindUniqueArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusReaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusReactionFindUniqueOrThrowArgs} args - Arguments to find a StatusReaction
     * @example
     * // Get one StatusReaction
     * const statusReaction = await prisma.statusReaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusReaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionFindFirstArgs} args - Arguments to find a StatusReaction
     * @example
     * // Get one StatusReaction
     * const statusReaction = await prisma.statusReaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusReactionFindFirstArgs>(args?: SelectSubset<T, StatusReactionFindFirstArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusReaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionFindFirstOrThrowArgs} args - Arguments to find a StatusReaction
     * @example
     * // Get one StatusReaction
     * const statusReaction = await prisma.statusReaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusReactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusReactions
     * const statusReactions = await prisma.statusReaction.findMany()
     * 
     * // Get first 10 StatusReactions
     * const statusReactions = await prisma.statusReaction.findMany({ take: 10 })
     * 
     * // Only select the `statusId`
     * const statusReactionWithStatusIdOnly = await prisma.statusReaction.findMany({ select: { statusId: true } })
     * 
     */
    findMany<T extends StatusReactionFindManyArgs>(args?: SelectSubset<T, StatusReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusReaction.
     * @param {StatusReactionCreateArgs} args - Arguments to create a StatusReaction.
     * @example
     * // Create one StatusReaction
     * const StatusReaction = await prisma.statusReaction.create({
     *   data: {
     *     // ... data to create a StatusReaction
     *   }
     * })
     * 
     */
    create<T extends StatusReactionCreateArgs>(args: SelectSubset<T, StatusReactionCreateArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusReactions.
     * @param {StatusReactionCreateManyArgs} args - Arguments to create many StatusReactions.
     * @example
     * // Create many StatusReactions
     * const statusReaction = await prisma.statusReaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusReactionCreateManyArgs>(args?: SelectSubset<T, StatusReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusReactions and returns the data saved in the database.
     * @param {StatusReactionCreateManyAndReturnArgs} args - Arguments to create many StatusReactions.
     * @example
     * // Create many StatusReactions
     * const statusReaction = await prisma.statusReaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusReactions and only return the `statusId`
     * const statusReactionWithStatusIdOnly = await prisma.statusReaction.createManyAndReturn({
     *   select: { statusId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StatusReaction.
     * @param {StatusReactionDeleteArgs} args - Arguments to delete one StatusReaction.
     * @example
     * // Delete one StatusReaction
     * const StatusReaction = await prisma.statusReaction.delete({
     *   where: {
     *     // ... filter to delete one StatusReaction
     *   }
     * })
     * 
     */
    delete<T extends StatusReactionDeleteArgs>(args: SelectSubset<T, StatusReactionDeleteArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusReaction.
     * @param {StatusReactionUpdateArgs} args - Arguments to update one StatusReaction.
     * @example
     * // Update one StatusReaction
     * const statusReaction = await prisma.statusReaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusReactionUpdateArgs>(args: SelectSubset<T, StatusReactionUpdateArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusReactions.
     * @param {StatusReactionDeleteManyArgs} args - Arguments to filter StatusReactions to delete.
     * @example
     * // Delete a few StatusReactions
     * const { count } = await prisma.statusReaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusReactionDeleteManyArgs>(args?: SelectSubset<T, StatusReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusReactions
     * const statusReaction = await prisma.statusReaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusReactionUpdateManyArgs>(args: SelectSubset<T, StatusReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusReactions and returns the data updated in the database.
     * @param {StatusReactionUpdateManyAndReturnArgs} args - Arguments to update many StatusReactions.
     * @example
     * // Update many StatusReactions
     * const statusReaction = await prisma.statusReaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StatusReactions and only return the `statusId`
     * const statusReactionWithStatusIdOnly = await prisma.statusReaction.updateManyAndReturn({
     *   select: { statusId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StatusReactionUpdateManyAndReturnArgs>(args: SelectSubset<T, StatusReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StatusReaction.
     * @param {StatusReactionUpsertArgs} args - Arguments to update or create a StatusReaction.
     * @example
     * // Update or create a StatusReaction
     * const statusReaction = await prisma.statusReaction.upsert({
     *   create: {
     *     // ... data to create a StatusReaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusReaction we want to update
     *   }
     * })
     */
    upsert<T extends StatusReactionUpsertArgs>(args: SelectSubset<T, StatusReactionUpsertArgs<ExtArgs>>): Prisma__StatusReactionClient<$Result.GetResult<Prisma.$StatusReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionCountArgs} args - Arguments to filter StatusReactions to count.
     * @example
     * // Count the number of StatusReactions
     * const count = await prisma.statusReaction.count({
     *   where: {
     *     // ... the filter for the StatusReactions we want to count
     *   }
     * })
    **/
    count<T extends StatusReactionCountArgs>(
      args?: Subset<T, StatusReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusReactionAggregateArgs>(args: Subset<T, StatusReactionAggregateArgs>): Prisma.PrismaPromise<GetStatusReactionAggregateType<T>>

    /**
     * Group by StatusReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusReactionGroupByArgs['orderBy'] }
        : { orderBy?: StatusReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusReaction model
   */
  readonly fields: StatusReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusReaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusReaction model
   */
  interface StatusReactionFieldRefs {
    readonly statusId: FieldRef<"StatusReaction", 'Int'>
    readonly userId: FieldRef<"StatusReaction", 'Int'>
    readonly emoji: FieldRef<"StatusReaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StatusReaction findUnique
   */
  export type StatusReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter, which StatusReaction to fetch.
     */
    where: StatusReactionWhereUniqueInput
  }

  /**
   * StatusReaction findUniqueOrThrow
   */
  export type StatusReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter, which StatusReaction to fetch.
     */
    where: StatusReactionWhereUniqueInput
  }

  /**
   * StatusReaction findFirst
   */
  export type StatusReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter, which StatusReaction to fetch.
     */
    where?: StatusReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusReactions to fetch.
     */
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusReactions.
     */
    cursor?: StatusReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusReactions.
     */
    distinct?: StatusReactionScalarFieldEnum | StatusReactionScalarFieldEnum[]
  }

  /**
   * StatusReaction findFirstOrThrow
   */
  export type StatusReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter, which StatusReaction to fetch.
     */
    where?: StatusReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusReactions to fetch.
     */
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusReactions.
     */
    cursor?: StatusReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusReactions.
     */
    distinct?: StatusReactionScalarFieldEnum | StatusReactionScalarFieldEnum[]
  }

  /**
   * StatusReaction findMany
   */
  export type StatusReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter, which StatusReactions to fetch.
     */
    where?: StatusReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusReactions to fetch.
     */
    orderBy?: StatusReactionOrderByWithRelationInput | StatusReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusReactions.
     */
    cursor?: StatusReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusReactions.
     */
    skip?: number
    distinct?: StatusReactionScalarFieldEnum | StatusReactionScalarFieldEnum[]
  }

  /**
   * StatusReaction create
   */
  export type StatusReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusReaction.
     */
    data: XOR<StatusReactionCreateInput, StatusReactionUncheckedCreateInput>
  }

  /**
   * StatusReaction createMany
   */
  export type StatusReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusReactions.
     */
    data: StatusReactionCreateManyInput | StatusReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusReaction createManyAndReturn
   */
  export type StatusReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * The data used to create many StatusReactions.
     */
    data: StatusReactionCreateManyInput | StatusReactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusReaction update
   */
  export type StatusReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusReaction.
     */
    data: XOR<StatusReactionUpdateInput, StatusReactionUncheckedUpdateInput>
    /**
     * Choose, which StatusReaction to update.
     */
    where: StatusReactionWhereUniqueInput
  }

  /**
   * StatusReaction updateMany
   */
  export type StatusReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusReactions.
     */
    data: XOR<StatusReactionUpdateManyMutationInput, StatusReactionUncheckedUpdateManyInput>
    /**
     * Filter which StatusReactions to update
     */
    where?: StatusReactionWhereInput
    /**
     * Limit how many StatusReactions to update.
     */
    limit?: number
  }

  /**
   * StatusReaction updateManyAndReturn
   */
  export type StatusReactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * The data used to update StatusReactions.
     */
    data: XOR<StatusReactionUpdateManyMutationInput, StatusReactionUncheckedUpdateManyInput>
    /**
     * Filter which StatusReactions to update
     */
    where?: StatusReactionWhereInput
    /**
     * Limit how many StatusReactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StatusReaction upsert
   */
  export type StatusReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusReaction to update in case it exists.
     */
    where: StatusReactionWhereUniqueInput
    /**
     * In case the StatusReaction found by the `where` argument doesn't exist, create a new StatusReaction with this data.
     */
    create: XOR<StatusReactionCreateInput, StatusReactionUncheckedCreateInput>
    /**
     * In case the StatusReaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusReactionUpdateInput, StatusReactionUncheckedUpdateInput>
  }

  /**
   * StatusReaction delete
   */
  export type StatusReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
    /**
     * Filter which StatusReaction to delete.
     */
    where: StatusReactionWhereUniqueInput
  }

  /**
   * StatusReaction deleteMany
   */
  export type StatusReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusReactions to delete
     */
    where?: StatusReactionWhereInput
    /**
     * Limit how many StatusReactions to delete.
     */
    limit?: number
  }

  /**
   * StatusReaction without action
   */
  export type StatusReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusReaction
     */
    select?: StatusReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusReaction
     */
    omit?: StatusReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusReactionInclude<ExtArgs> | null
  }


  /**
   * Model Bot
   */

  export type AggregateBot = {
    _count: BotCountAggregateOutputType | null
    _avg: BotAvgAggregateOutputType | null
    _sum: BotSumAggregateOutputType | null
    _min: BotMinAggregateOutputType | null
    _max: BotMaxAggregateOutputType | null
  }

  export type BotAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    serviceUserId: number | null
  }

  export type BotSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    serviceUserId: number | null
  }

  export type BotMinAggregateOutputType = {
    id: number | null
    ownerId: number | null
    name: string | null
    url: string | null
    secret: string | null
    serviceUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotMaxAggregateOutputType = {
    id: number | null
    ownerId: number | null
    name: string | null
    url: string | null
    secret: string | null
    serviceUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotCountAggregateOutputType = {
    id: number
    ownerId: number
    name: number
    url: number
    secret: number
    serviceUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BotAvgAggregateInputType = {
    id?: true
    ownerId?: true
    serviceUserId?: true
  }

  export type BotSumAggregateInputType = {
    id?: true
    ownerId?: true
    serviceUserId?: true
  }

  export type BotMinAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    url?: true
    secret?: true
    serviceUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotMaxAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    url?: true
    secret?: true
    serviceUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotCountAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    url?: true
    secret?: true
    serviceUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bot to aggregate.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bots
    **/
    _count?: true | BotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotMaxAggregateInputType
  }

  export type GetBotAggregateType<T extends BotAggregateArgs> = {
        [P in keyof T & keyof AggregateBot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBot[P]>
      : GetScalarType<T[P], AggregateBot[P]>
  }




  export type BotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotWhereInput
    orderBy?: BotOrderByWithAggregationInput | BotOrderByWithAggregationInput[]
    by: BotScalarFieldEnum[] | BotScalarFieldEnum
    having?: BotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotCountAggregateInputType | true
    _avg?: BotAvgAggregateInputType
    _sum?: BotSumAggregateInputType
    _min?: BotMinAggregateInputType
    _max?: BotMaxAggregateInputType
  }

  export type BotGroupByOutputType = {
    id: number
    ownerId: number
    name: string
    url: string
    secret: string
    serviceUserId: number | null
    createdAt: Date
    updatedAt: Date
    _count: BotCountAggregateOutputType | null
    _avg: BotAvgAggregateOutputType | null
    _sum: BotSumAggregateOutputType | null
    _min: BotMinAggregateOutputType | null
    _max: BotMaxAggregateOutputType | null
  }

  type GetBotGroupByPayload<T extends BotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BotGroupByOutputType[P]>
            : GetScalarType<T[P], BotGroupByOutputType[P]>
        }
      >
    >


  export type BotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    name?: boolean
    url?: boolean
    secret?: boolean
    serviceUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
    installs?: boolean | Bot$installsArgs<ExtArgs>
    _count?: boolean | BotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bot"]>

  export type BotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    name?: boolean
    url?: boolean
    secret?: boolean
    serviceUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
  }, ExtArgs["result"]["bot"]>

  export type BotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    name?: boolean
    url?: boolean
    secret?: boolean
    serviceUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
  }, ExtArgs["result"]["bot"]>

  export type BotSelectScalar = {
    id?: boolean
    ownerId?: boolean
    name?: boolean
    url?: boolean
    secret?: boolean
    serviceUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "name" | "url" | "secret" | "serviceUserId" | "createdAt" | "updatedAt", ExtArgs["result"]["bot"]>
  export type BotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
    installs?: boolean | Bot$installsArgs<ExtArgs>
    _count?: boolean | BotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
  }
  export type BotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    serviceUser?: boolean | Bot$serviceUserArgs<ExtArgs>
  }

  export type $BotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bot"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      serviceUser: Prisma.$UserPayload<ExtArgs> | null
      installs: Prisma.$BotInstallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ownerId: number
      name: string
      url: string
      secret: string
      serviceUserId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bot"]>
    composites: {}
  }

  type BotGetPayload<S extends boolean | null | undefined | BotDefaultArgs> = $Result.GetResult<Prisma.$BotPayload, S>

  type BotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BotCountAggregateInputType | true
    }

  export interface BotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bot'], meta: { name: 'Bot' } }
    /**
     * Find zero or one Bot that matches the filter.
     * @param {BotFindUniqueArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BotFindUniqueArgs>(args: SelectSubset<T, BotFindUniqueArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BotFindUniqueOrThrowArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BotFindUniqueOrThrowArgs>(args: SelectSubset<T, BotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindFirstArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BotFindFirstArgs>(args?: SelectSubset<T, BotFindFirstArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindFirstOrThrowArgs} args - Arguments to find a Bot
     * @example
     * // Get one Bot
     * const bot = await prisma.bot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BotFindFirstOrThrowArgs>(args?: SelectSubset<T, BotFindFirstOrThrowArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bots
     * const bots = await prisma.bot.findMany()
     * 
     * // Get first 10 Bots
     * const bots = await prisma.bot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botWithIdOnly = await prisma.bot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BotFindManyArgs>(args?: SelectSubset<T, BotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bot.
     * @param {BotCreateArgs} args - Arguments to create a Bot.
     * @example
     * // Create one Bot
     * const Bot = await prisma.bot.create({
     *   data: {
     *     // ... data to create a Bot
     *   }
     * })
     * 
     */
    create<T extends BotCreateArgs>(args: SelectSubset<T, BotCreateArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bots.
     * @param {BotCreateManyArgs} args - Arguments to create many Bots.
     * @example
     * // Create many Bots
     * const bot = await prisma.bot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BotCreateManyArgs>(args?: SelectSubset<T, BotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bots and returns the data saved in the database.
     * @param {BotCreateManyAndReturnArgs} args - Arguments to create many Bots.
     * @example
     * // Create many Bots
     * const bot = await prisma.bot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bots and only return the `id`
     * const botWithIdOnly = await prisma.bot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BotCreateManyAndReturnArgs>(args?: SelectSubset<T, BotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bot.
     * @param {BotDeleteArgs} args - Arguments to delete one Bot.
     * @example
     * // Delete one Bot
     * const Bot = await prisma.bot.delete({
     *   where: {
     *     // ... filter to delete one Bot
     *   }
     * })
     * 
     */
    delete<T extends BotDeleteArgs>(args: SelectSubset<T, BotDeleteArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bot.
     * @param {BotUpdateArgs} args - Arguments to update one Bot.
     * @example
     * // Update one Bot
     * const bot = await prisma.bot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BotUpdateArgs>(args: SelectSubset<T, BotUpdateArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bots.
     * @param {BotDeleteManyArgs} args - Arguments to filter Bots to delete.
     * @example
     * // Delete a few Bots
     * const { count } = await prisma.bot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BotDeleteManyArgs>(args?: SelectSubset<T, BotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bots
     * const bot = await prisma.bot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BotUpdateManyArgs>(args: SelectSubset<T, BotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bots and returns the data updated in the database.
     * @param {BotUpdateManyAndReturnArgs} args - Arguments to update many Bots.
     * @example
     * // Update many Bots
     * const bot = await prisma.bot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bots and only return the `id`
     * const botWithIdOnly = await prisma.bot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BotUpdateManyAndReturnArgs>(args: SelectSubset<T, BotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bot.
     * @param {BotUpsertArgs} args - Arguments to update or create a Bot.
     * @example
     * // Update or create a Bot
     * const bot = await prisma.bot.upsert({
     *   create: {
     *     // ... data to create a Bot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bot we want to update
     *   }
     * })
     */
    upsert<T extends BotUpsertArgs>(args: SelectSubset<T, BotUpsertArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotCountArgs} args - Arguments to filter Bots to count.
     * @example
     * // Count the number of Bots
     * const count = await prisma.bot.count({
     *   where: {
     *     // ... the filter for the Bots we want to count
     *   }
     * })
    **/
    count<T extends BotCountArgs>(
      args?: Subset<T, BotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotAggregateArgs>(args: Subset<T, BotAggregateArgs>): Prisma.PrismaPromise<GetBotAggregateType<T>>

    /**
     * Group by Bot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotGroupByArgs['orderBy'] }
        : { orderBy?: BotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bot model
   */
  readonly fields: BotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    serviceUser<T extends Bot$serviceUserArgs<ExtArgs> = {}>(args?: Subset<T, Bot$serviceUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    installs<T extends Bot$installsArgs<ExtArgs> = {}>(args?: Subset<T, Bot$installsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bot model
   */
  interface BotFieldRefs {
    readonly id: FieldRef<"Bot", 'Int'>
    readonly ownerId: FieldRef<"Bot", 'Int'>
    readonly name: FieldRef<"Bot", 'String'>
    readonly url: FieldRef<"Bot", 'String'>
    readonly secret: FieldRef<"Bot", 'String'>
    readonly serviceUserId: FieldRef<"Bot", 'Int'>
    readonly createdAt: FieldRef<"Bot", 'DateTime'>
    readonly updatedAt: FieldRef<"Bot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bot findUnique
   */
  export type BotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where: BotWhereUniqueInput
  }

  /**
   * Bot findUniqueOrThrow
   */
  export type BotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where: BotWhereUniqueInput
  }

  /**
   * Bot findFirst
   */
  export type BotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bots.
     */
    distinct?: BotScalarFieldEnum | BotScalarFieldEnum[]
  }

  /**
   * Bot findFirstOrThrow
   */
  export type BotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bot to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bots.
     */
    distinct?: BotScalarFieldEnum | BotScalarFieldEnum[]
  }

  /**
   * Bot findMany
   */
  export type BotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter, which Bots to fetch.
     */
    where?: BotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bots to fetch.
     */
    orderBy?: BotOrderByWithRelationInput | BotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bots.
     */
    cursor?: BotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bots.
     */
    skip?: number
    distinct?: BotScalarFieldEnum | BotScalarFieldEnum[]
  }

  /**
   * Bot create
   */
  export type BotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The data needed to create a Bot.
     */
    data: XOR<BotCreateInput, BotUncheckedCreateInput>
  }

  /**
   * Bot createMany
   */
  export type BotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bots.
     */
    data: BotCreateManyInput | BotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bot createManyAndReturn
   */
  export type BotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * The data used to create many Bots.
     */
    data: BotCreateManyInput | BotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bot update
   */
  export type BotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The data needed to update a Bot.
     */
    data: XOR<BotUpdateInput, BotUncheckedUpdateInput>
    /**
     * Choose, which Bot to update.
     */
    where: BotWhereUniqueInput
  }

  /**
   * Bot updateMany
   */
  export type BotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bots.
     */
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyInput>
    /**
     * Filter which Bots to update
     */
    where?: BotWhereInput
    /**
     * Limit how many Bots to update.
     */
    limit?: number
  }

  /**
   * Bot updateManyAndReturn
   */
  export type BotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * The data used to update Bots.
     */
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyInput>
    /**
     * Filter which Bots to update
     */
    where?: BotWhereInput
    /**
     * Limit how many Bots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bot upsert
   */
  export type BotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * The filter to search for the Bot to update in case it exists.
     */
    where: BotWhereUniqueInput
    /**
     * In case the Bot found by the `where` argument doesn't exist, create a new Bot with this data.
     */
    create: XOR<BotCreateInput, BotUncheckedCreateInput>
    /**
     * In case the Bot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BotUpdateInput, BotUncheckedUpdateInput>
  }

  /**
   * Bot delete
   */
  export type BotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
    /**
     * Filter which Bot to delete.
     */
    where: BotWhereUniqueInput
  }

  /**
   * Bot deleteMany
   */
  export type BotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bots to delete
     */
    where?: BotWhereInput
    /**
     * Limit how many Bots to delete.
     */
    limit?: number
  }

  /**
   * Bot.serviceUser
   */
  export type Bot$serviceUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Bot.installs
   */
  export type Bot$installsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    where?: BotInstallWhereInput
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    cursor?: BotInstallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BotInstallScalarFieldEnum | BotInstallScalarFieldEnum[]
  }

  /**
   * Bot without action
   */
  export type BotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bot
     */
    select?: BotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bot
     */
    omit?: BotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInclude<ExtArgs> | null
  }


  /**
   * Model BotInstall
   */

  export type AggregateBotInstall = {
    _count: BotInstallCountAggregateOutputType | null
    _avg: BotInstallAvgAggregateOutputType | null
    _sum: BotInstallSumAggregateOutputType | null
    _min: BotInstallMinAggregateOutputType | null
    _max: BotInstallMaxAggregateOutputType | null
  }

  export type BotInstallAvgAggregateOutputType = {
    id: number | null
    botId: number | null
    chatRoomId: number | null
  }

  export type BotInstallSumAggregateOutputType = {
    id: number | null
    botId: number | null
    chatRoomId: number | null
  }

  export type BotInstallMinAggregateOutputType = {
    id: number | null
    botId: number | null
    chatRoomId: number | null
    contentScope: $Enums.ContentScope | null
    isEnabled: boolean | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotInstallMaxAggregateOutputType = {
    id: number | null
    botId: number | null
    chatRoomId: number | null
    contentScope: $Enums.ContentScope | null
    isEnabled: boolean | null
    scopes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotInstallCountAggregateOutputType = {
    id: number
    botId: number
    chatRoomId: number
    contentScope: number
    isEnabled: number
    scopes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BotInstallAvgAggregateInputType = {
    id?: true
    botId?: true
    chatRoomId?: true
  }

  export type BotInstallSumAggregateInputType = {
    id?: true
    botId?: true
    chatRoomId?: true
  }

  export type BotInstallMinAggregateInputType = {
    id?: true
    botId?: true
    chatRoomId?: true
    contentScope?: true
    isEnabled?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotInstallMaxAggregateInputType = {
    id?: true
    botId?: true
    chatRoomId?: true
    contentScope?: true
    isEnabled?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotInstallCountAggregateInputType = {
    id?: true
    botId?: true
    chatRoomId?: true
    contentScope?: true
    isEnabled?: true
    scopes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BotInstallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BotInstall to aggregate.
     */
    where?: BotInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotInstalls to fetch.
     */
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BotInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BotInstalls
    **/
    _count?: true | BotInstallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BotInstallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BotInstallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotInstallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotInstallMaxAggregateInputType
  }

  export type GetBotInstallAggregateType<T extends BotInstallAggregateArgs> = {
        [P in keyof T & keyof AggregateBotInstall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBotInstall[P]>
      : GetScalarType<T[P], AggregateBotInstall[P]>
  }




  export type BotInstallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotInstallWhereInput
    orderBy?: BotInstallOrderByWithAggregationInput | BotInstallOrderByWithAggregationInput[]
    by: BotInstallScalarFieldEnum[] | BotInstallScalarFieldEnum
    having?: BotInstallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotInstallCountAggregateInputType | true
    _avg?: BotInstallAvgAggregateInputType
    _sum?: BotInstallSumAggregateInputType
    _min?: BotInstallMinAggregateInputType
    _max?: BotInstallMaxAggregateInputType
  }

  export type BotInstallGroupByOutputType = {
    id: number
    botId: number
    chatRoomId: number
    contentScope: $Enums.ContentScope
    isEnabled: boolean
    scopes: string | null
    createdAt: Date
    updatedAt: Date
    _count: BotInstallCountAggregateOutputType | null
    _avg: BotInstallAvgAggregateOutputType | null
    _sum: BotInstallSumAggregateOutputType | null
    _min: BotInstallMinAggregateOutputType | null
    _max: BotInstallMaxAggregateOutputType | null
  }

  type GetBotInstallGroupByPayload<T extends BotInstallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BotInstallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BotInstallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BotInstallGroupByOutputType[P]>
            : GetScalarType<T[P], BotInstallGroupByOutputType[P]>
        }
      >
    >


  export type BotInstallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    botId?: boolean
    chatRoomId?: boolean
    contentScope?: boolean
    isEnabled?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    events?: boolean | BotInstall$eventsArgs<ExtArgs>
    _count?: boolean | BotInstallCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botInstall"]>

  export type BotInstallSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    botId?: boolean
    chatRoomId?: boolean
    contentScope?: boolean
    isEnabled?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botInstall"]>

  export type BotInstallSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    botId?: boolean
    chatRoomId?: boolean
    contentScope?: boolean
    isEnabled?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botInstall"]>

  export type BotInstallSelectScalar = {
    id?: boolean
    botId?: boolean
    chatRoomId?: boolean
    contentScope?: boolean
    isEnabled?: boolean
    scopes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BotInstallOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "botId" | "chatRoomId" | "contentScope" | "isEnabled" | "scopes" | "createdAt" | "updatedAt", ExtArgs["result"]["botInstall"]>
  export type BotInstallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
    events?: boolean | BotInstall$eventsArgs<ExtArgs>
    _count?: boolean | BotInstallCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BotInstallIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }
  export type BotInstallIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bot?: boolean | BotDefaultArgs<ExtArgs>
    chatRoom?: boolean | ChatRoomDefaultArgs<ExtArgs>
  }

  export type $BotInstallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BotInstall"
    objects: {
      bot: Prisma.$BotPayload<ExtArgs>
      chatRoom: Prisma.$ChatRoomPayload<ExtArgs>
      events: Prisma.$BotEventLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      botId: number
      chatRoomId: number
      contentScope: $Enums.ContentScope
      isEnabled: boolean
      scopes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["botInstall"]>
    composites: {}
  }

  type BotInstallGetPayload<S extends boolean | null | undefined | BotInstallDefaultArgs> = $Result.GetResult<Prisma.$BotInstallPayload, S>

  type BotInstallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BotInstallFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BotInstallCountAggregateInputType | true
    }

  export interface BotInstallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BotInstall'], meta: { name: 'BotInstall' } }
    /**
     * Find zero or one BotInstall that matches the filter.
     * @param {BotInstallFindUniqueArgs} args - Arguments to find a BotInstall
     * @example
     * // Get one BotInstall
     * const botInstall = await prisma.botInstall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BotInstallFindUniqueArgs>(args: SelectSubset<T, BotInstallFindUniqueArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BotInstall that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BotInstallFindUniqueOrThrowArgs} args - Arguments to find a BotInstall
     * @example
     * // Get one BotInstall
     * const botInstall = await prisma.botInstall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BotInstallFindUniqueOrThrowArgs>(args: SelectSubset<T, BotInstallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BotInstall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallFindFirstArgs} args - Arguments to find a BotInstall
     * @example
     * // Get one BotInstall
     * const botInstall = await prisma.botInstall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BotInstallFindFirstArgs>(args?: SelectSubset<T, BotInstallFindFirstArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BotInstall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallFindFirstOrThrowArgs} args - Arguments to find a BotInstall
     * @example
     * // Get one BotInstall
     * const botInstall = await prisma.botInstall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BotInstallFindFirstOrThrowArgs>(args?: SelectSubset<T, BotInstallFindFirstOrThrowArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BotInstalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BotInstalls
     * const botInstalls = await prisma.botInstall.findMany()
     * 
     * // Get first 10 BotInstalls
     * const botInstalls = await prisma.botInstall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botInstallWithIdOnly = await prisma.botInstall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BotInstallFindManyArgs>(args?: SelectSubset<T, BotInstallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BotInstall.
     * @param {BotInstallCreateArgs} args - Arguments to create a BotInstall.
     * @example
     * // Create one BotInstall
     * const BotInstall = await prisma.botInstall.create({
     *   data: {
     *     // ... data to create a BotInstall
     *   }
     * })
     * 
     */
    create<T extends BotInstallCreateArgs>(args: SelectSubset<T, BotInstallCreateArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BotInstalls.
     * @param {BotInstallCreateManyArgs} args - Arguments to create many BotInstalls.
     * @example
     * // Create many BotInstalls
     * const botInstall = await prisma.botInstall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BotInstallCreateManyArgs>(args?: SelectSubset<T, BotInstallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BotInstalls and returns the data saved in the database.
     * @param {BotInstallCreateManyAndReturnArgs} args - Arguments to create many BotInstalls.
     * @example
     * // Create many BotInstalls
     * const botInstall = await prisma.botInstall.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BotInstalls and only return the `id`
     * const botInstallWithIdOnly = await prisma.botInstall.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BotInstallCreateManyAndReturnArgs>(args?: SelectSubset<T, BotInstallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BotInstall.
     * @param {BotInstallDeleteArgs} args - Arguments to delete one BotInstall.
     * @example
     * // Delete one BotInstall
     * const BotInstall = await prisma.botInstall.delete({
     *   where: {
     *     // ... filter to delete one BotInstall
     *   }
     * })
     * 
     */
    delete<T extends BotInstallDeleteArgs>(args: SelectSubset<T, BotInstallDeleteArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BotInstall.
     * @param {BotInstallUpdateArgs} args - Arguments to update one BotInstall.
     * @example
     * // Update one BotInstall
     * const botInstall = await prisma.botInstall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BotInstallUpdateArgs>(args: SelectSubset<T, BotInstallUpdateArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BotInstalls.
     * @param {BotInstallDeleteManyArgs} args - Arguments to filter BotInstalls to delete.
     * @example
     * // Delete a few BotInstalls
     * const { count } = await prisma.botInstall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BotInstallDeleteManyArgs>(args?: SelectSubset<T, BotInstallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BotInstalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BotInstalls
     * const botInstall = await prisma.botInstall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BotInstallUpdateManyArgs>(args: SelectSubset<T, BotInstallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BotInstalls and returns the data updated in the database.
     * @param {BotInstallUpdateManyAndReturnArgs} args - Arguments to update many BotInstalls.
     * @example
     * // Update many BotInstalls
     * const botInstall = await prisma.botInstall.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BotInstalls and only return the `id`
     * const botInstallWithIdOnly = await prisma.botInstall.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BotInstallUpdateManyAndReturnArgs>(args: SelectSubset<T, BotInstallUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BotInstall.
     * @param {BotInstallUpsertArgs} args - Arguments to update or create a BotInstall.
     * @example
     * // Update or create a BotInstall
     * const botInstall = await prisma.botInstall.upsert({
     *   create: {
     *     // ... data to create a BotInstall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BotInstall we want to update
     *   }
     * })
     */
    upsert<T extends BotInstallUpsertArgs>(args: SelectSubset<T, BotInstallUpsertArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BotInstalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallCountArgs} args - Arguments to filter BotInstalls to count.
     * @example
     * // Count the number of BotInstalls
     * const count = await prisma.botInstall.count({
     *   where: {
     *     // ... the filter for the BotInstalls we want to count
     *   }
     * })
    **/
    count<T extends BotInstallCountArgs>(
      args?: Subset<T, BotInstallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotInstallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BotInstall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotInstallAggregateArgs>(args: Subset<T, BotInstallAggregateArgs>): Prisma.PrismaPromise<GetBotInstallAggregateType<T>>

    /**
     * Group by BotInstall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotInstallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotInstallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotInstallGroupByArgs['orderBy'] }
        : { orderBy?: BotInstallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotInstallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotInstallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BotInstall model
   */
  readonly fields: BotInstallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BotInstall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BotInstallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bot<T extends BotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BotDefaultArgs<ExtArgs>>): Prisma__BotClient<$Result.GetResult<Prisma.$BotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chatRoom<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    events<T extends BotInstall$eventsArgs<ExtArgs> = {}>(args?: Subset<T, BotInstall$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BotInstall model
   */
  interface BotInstallFieldRefs {
    readonly id: FieldRef<"BotInstall", 'Int'>
    readonly botId: FieldRef<"BotInstall", 'Int'>
    readonly chatRoomId: FieldRef<"BotInstall", 'Int'>
    readonly contentScope: FieldRef<"BotInstall", 'ContentScope'>
    readonly isEnabled: FieldRef<"BotInstall", 'Boolean'>
    readonly scopes: FieldRef<"BotInstall", 'String'>
    readonly createdAt: FieldRef<"BotInstall", 'DateTime'>
    readonly updatedAt: FieldRef<"BotInstall", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BotInstall findUnique
   */
  export type BotInstallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter, which BotInstall to fetch.
     */
    where: BotInstallWhereUniqueInput
  }

  /**
   * BotInstall findUniqueOrThrow
   */
  export type BotInstallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter, which BotInstall to fetch.
     */
    where: BotInstallWhereUniqueInput
  }

  /**
   * BotInstall findFirst
   */
  export type BotInstallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter, which BotInstall to fetch.
     */
    where?: BotInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotInstalls to fetch.
     */
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BotInstalls.
     */
    cursor?: BotInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BotInstalls.
     */
    distinct?: BotInstallScalarFieldEnum | BotInstallScalarFieldEnum[]
  }

  /**
   * BotInstall findFirstOrThrow
   */
  export type BotInstallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter, which BotInstall to fetch.
     */
    where?: BotInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotInstalls to fetch.
     */
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BotInstalls.
     */
    cursor?: BotInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BotInstalls.
     */
    distinct?: BotInstallScalarFieldEnum | BotInstallScalarFieldEnum[]
  }

  /**
   * BotInstall findMany
   */
  export type BotInstallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter, which BotInstalls to fetch.
     */
    where?: BotInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotInstalls to fetch.
     */
    orderBy?: BotInstallOrderByWithRelationInput | BotInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BotInstalls.
     */
    cursor?: BotInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotInstalls.
     */
    skip?: number
    distinct?: BotInstallScalarFieldEnum | BotInstallScalarFieldEnum[]
  }

  /**
   * BotInstall create
   */
  export type BotInstallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * The data needed to create a BotInstall.
     */
    data: XOR<BotInstallCreateInput, BotInstallUncheckedCreateInput>
  }

  /**
   * BotInstall createMany
   */
  export type BotInstallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BotInstalls.
     */
    data: BotInstallCreateManyInput | BotInstallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BotInstall createManyAndReturn
   */
  export type BotInstallCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * The data used to create many BotInstalls.
     */
    data: BotInstallCreateManyInput | BotInstallCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BotInstall update
   */
  export type BotInstallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * The data needed to update a BotInstall.
     */
    data: XOR<BotInstallUpdateInput, BotInstallUncheckedUpdateInput>
    /**
     * Choose, which BotInstall to update.
     */
    where: BotInstallWhereUniqueInput
  }

  /**
   * BotInstall updateMany
   */
  export type BotInstallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BotInstalls.
     */
    data: XOR<BotInstallUpdateManyMutationInput, BotInstallUncheckedUpdateManyInput>
    /**
     * Filter which BotInstalls to update
     */
    where?: BotInstallWhereInput
    /**
     * Limit how many BotInstalls to update.
     */
    limit?: number
  }

  /**
   * BotInstall updateManyAndReturn
   */
  export type BotInstallUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * The data used to update BotInstalls.
     */
    data: XOR<BotInstallUpdateManyMutationInput, BotInstallUncheckedUpdateManyInput>
    /**
     * Filter which BotInstalls to update
     */
    where?: BotInstallWhereInput
    /**
     * Limit how many BotInstalls to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BotInstall upsert
   */
  export type BotInstallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * The filter to search for the BotInstall to update in case it exists.
     */
    where: BotInstallWhereUniqueInput
    /**
     * In case the BotInstall found by the `where` argument doesn't exist, create a new BotInstall with this data.
     */
    create: XOR<BotInstallCreateInput, BotInstallUncheckedCreateInput>
    /**
     * In case the BotInstall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BotInstallUpdateInput, BotInstallUncheckedUpdateInput>
  }

  /**
   * BotInstall delete
   */
  export type BotInstallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
    /**
     * Filter which BotInstall to delete.
     */
    where: BotInstallWhereUniqueInput
  }

  /**
   * BotInstall deleteMany
   */
  export type BotInstallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BotInstalls to delete
     */
    where?: BotInstallWhereInput
    /**
     * Limit how many BotInstalls to delete.
     */
    limit?: number
  }

  /**
   * BotInstall.events
   */
  export type BotInstall$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    where?: BotEventLogWhereInput
    orderBy?: BotEventLogOrderByWithRelationInput | BotEventLogOrderByWithRelationInput[]
    cursor?: BotEventLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BotEventLogScalarFieldEnum | BotEventLogScalarFieldEnum[]
  }

  /**
   * BotInstall without action
   */
  export type BotInstallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotInstall
     */
    select?: BotInstallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotInstall
     */
    omit?: BotInstallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotInstallInclude<ExtArgs> | null
  }


  /**
   * Model BotEventLog
   */

  export type AggregateBotEventLog = {
    _count: BotEventLogCountAggregateOutputType | null
    _avg: BotEventLogAvgAggregateOutputType | null
    _sum: BotEventLogSumAggregateOutputType | null
    _min: BotEventLogMinAggregateOutputType | null
    _max: BotEventLogMaxAggregateOutputType | null
  }

  export type BotEventLogAvgAggregateOutputType = {
    id: number | null
    installId: number | null
    attempts: number | null
  }

  export type BotEventLogSumAggregateOutputType = {
    id: number | null
    installId: number | null
    attempts: number | null
  }

  export type BotEventLogMinAggregateOutputType = {
    id: number | null
    installId: number | null
    eventId: string | null
    type: string | null
    status: string | null
    attempts: number | null
    nextAttemptAt: Date | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotEventLogMaxAggregateOutputType = {
    id: number | null
    installId: number | null
    eventId: string | null
    type: string | null
    status: string | null
    attempts: number | null
    nextAttemptAt: Date | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BotEventLogCountAggregateOutputType = {
    id: number
    installId: number
    eventId: number
    type: number
    payload: number
    status: number
    attempts: number
    nextAttemptAt: number
    lastError: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BotEventLogAvgAggregateInputType = {
    id?: true
    installId?: true
    attempts?: true
  }

  export type BotEventLogSumAggregateInputType = {
    id?: true
    installId?: true
    attempts?: true
  }

  export type BotEventLogMinAggregateInputType = {
    id?: true
    installId?: true
    eventId?: true
    type?: true
    status?: true
    attempts?: true
    nextAttemptAt?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotEventLogMaxAggregateInputType = {
    id?: true
    installId?: true
    eventId?: true
    type?: true
    status?: true
    attempts?: true
    nextAttemptAt?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BotEventLogCountAggregateInputType = {
    id?: true
    installId?: true
    eventId?: true
    type?: true
    payload?: true
    status?: true
    attempts?: true
    nextAttemptAt?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BotEventLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BotEventLog to aggregate.
     */
    where?: BotEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotEventLogs to fetch.
     */
    orderBy?: BotEventLogOrderByWithRelationInput | BotEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BotEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BotEventLogs
    **/
    _count?: true | BotEventLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BotEventLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BotEventLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotEventLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotEventLogMaxAggregateInputType
  }

  export type GetBotEventLogAggregateType<T extends BotEventLogAggregateArgs> = {
        [P in keyof T & keyof AggregateBotEventLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBotEventLog[P]>
      : GetScalarType<T[P], AggregateBotEventLog[P]>
  }




  export type BotEventLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BotEventLogWhereInput
    orderBy?: BotEventLogOrderByWithAggregationInput | BotEventLogOrderByWithAggregationInput[]
    by: BotEventLogScalarFieldEnum[] | BotEventLogScalarFieldEnum
    having?: BotEventLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotEventLogCountAggregateInputType | true
    _avg?: BotEventLogAvgAggregateInputType
    _sum?: BotEventLogSumAggregateInputType
    _min?: BotEventLogMinAggregateInputType
    _max?: BotEventLogMaxAggregateInputType
  }

  export type BotEventLogGroupByOutputType = {
    id: number
    installId: number
    eventId: string
    type: string
    payload: JsonValue
    status: string
    attempts: number
    nextAttemptAt: Date | null
    lastError: string | null
    createdAt: Date
    updatedAt: Date
    _count: BotEventLogCountAggregateOutputType | null
    _avg: BotEventLogAvgAggregateOutputType | null
    _sum: BotEventLogSumAggregateOutputType | null
    _min: BotEventLogMinAggregateOutputType | null
    _max: BotEventLogMaxAggregateOutputType | null
  }

  type GetBotEventLogGroupByPayload<T extends BotEventLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BotEventLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BotEventLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BotEventLogGroupByOutputType[P]>
            : GetScalarType<T[P], BotEventLogGroupByOutputType[P]>
        }
      >
    >


  export type BotEventLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    installId?: boolean
    eventId?: boolean
    type?: boolean
    payload?: boolean
    status?: boolean
    attempts?: boolean
    nextAttemptAt?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botEventLog"]>

  export type BotEventLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    installId?: boolean
    eventId?: boolean
    type?: boolean
    payload?: boolean
    status?: boolean
    attempts?: boolean
    nextAttemptAt?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botEventLog"]>

  export type BotEventLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    installId?: boolean
    eventId?: boolean
    type?: boolean
    payload?: boolean
    status?: boolean
    attempts?: boolean
    nextAttemptAt?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["botEventLog"]>

  export type BotEventLogSelectScalar = {
    id?: boolean
    installId?: boolean
    eventId?: boolean
    type?: boolean
    payload?: boolean
    status?: boolean
    attempts?: boolean
    nextAttemptAt?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BotEventLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "installId" | "eventId" | "type" | "payload" | "status" | "attempts" | "nextAttemptAt" | "lastError" | "createdAt" | "updatedAt", ExtArgs["result"]["botEventLog"]>
  export type BotEventLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }
  export type BotEventLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }
  export type BotEventLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    install?: boolean | BotInstallDefaultArgs<ExtArgs>
  }

  export type $BotEventLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BotEventLog"
    objects: {
      install: Prisma.$BotInstallPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      installId: number
      eventId: string
      type: string
      payload: Prisma.JsonValue
      status: string
      attempts: number
      nextAttemptAt: Date | null
      lastError: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["botEventLog"]>
    composites: {}
  }

  type BotEventLogGetPayload<S extends boolean | null | undefined | BotEventLogDefaultArgs> = $Result.GetResult<Prisma.$BotEventLogPayload, S>

  type BotEventLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BotEventLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BotEventLogCountAggregateInputType | true
    }

  export interface BotEventLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BotEventLog'], meta: { name: 'BotEventLog' } }
    /**
     * Find zero or one BotEventLog that matches the filter.
     * @param {BotEventLogFindUniqueArgs} args - Arguments to find a BotEventLog
     * @example
     * // Get one BotEventLog
     * const botEventLog = await prisma.botEventLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BotEventLogFindUniqueArgs>(args: SelectSubset<T, BotEventLogFindUniqueArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BotEventLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BotEventLogFindUniqueOrThrowArgs} args - Arguments to find a BotEventLog
     * @example
     * // Get one BotEventLog
     * const botEventLog = await prisma.botEventLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BotEventLogFindUniqueOrThrowArgs>(args: SelectSubset<T, BotEventLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BotEventLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogFindFirstArgs} args - Arguments to find a BotEventLog
     * @example
     * // Get one BotEventLog
     * const botEventLog = await prisma.botEventLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BotEventLogFindFirstArgs>(args?: SelectSubset<T, BotEventLogFindFirstArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BotEventLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogFindFirstOrThrowArgs} args - Arguments to find a BotEventLog
     * @example
     * // Get one BotEventLog
     * const botEventLog = await prisma.botEventLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BotEventLogFindFirstOrThrowArgs>(args?: SelectSubset<T, BotEventLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BotEventLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BotEventLogs
     * const botEventLogs = await prisma.botEventLog.findMany()
     * 
     * // Get first 10 BotEventLogs
     * const botEventLogs = await prisma.botEventLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botEventLogWithIdOnly = await prisma.botEventLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BotEventLogFindManyArgs>(args?: SelectSubset<T, BotEventLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BotEventLog.
     * @param {BotEventLogCreateArgs} args - Arguments to create a BotEventLog.
     * @example
     * // Create one BotEventLog
     * const BotEventLog = await prisma.botEventLog.create({
     *   data: {
     *     // ... data to create a BotEventLog
     *   }
     * })
     * 
     */
    create<T extends BotEventLogCreateArgs>(args: SelectSubset<T, BotEventLogCreateArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BotEventLogs.
     * @param {BotEventLogCreateManyArgs} args - Arguments to create many BotEventLogs.
     * @example
     * // Create many BotEventLogs
     * const botEventLog = await prisma.botEventLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BotEventLogCreateManyArgs>(args?: SelectSubset<T, BotEventLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BotEventLogs and returns the data saved in the database.
     * @param {BotEventLogCreateManyAndReturnArgs} args - Arguments to create many BotEventLogs.
     * @example
     * // Create many BotEventLogs
     * const botEventLog = await prisma.botEventLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BotEventLogs and only return the `id`
     * const botEventLogWithIdOnly = await prisma.botEventLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BotEventLogCreateManyAndReturnArgs>(args?: SelectSubset<T, BotEventLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BotEventLog.
     * @param {BotEventLogDeleteArgs} args - Arguments to delete one BotEventLog.
     * @example
     * // Delete one BotEventLog
     * const BotEventLog = await prisma.botEventLog.delete({
     *   where: {
     *     // ... filter to delete one BotEventLog
     *   }
     * })
     * 
     */
    delete<T extends BotEventLogDeleteArgs>(args: SelectSubset<T, BotEventLogDeleteArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BotEventLog.
     * @param {BotEventLogUpdateArgs} args - Arguments to update one BotEventLog.
     * @example
     * // Update one BotEventLog
     * const botEventLog = await prisma.botEventLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BotEventLogUpdateArgs>(args: SelectSubset<T, BotEventLogUpdateArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BotEventLogs.
     * @param {BotEventLogDeleteManyArgs} args - Arguments to filter BotEventLogs to delete.
     * @example
     * // Delete a few BotEventLogs
     * const { count } = await prisma.botEventLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BotEventLogDeleteManyArgs>(args?: SelectSubset<T, BotEventLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BotEventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BotEventLogs
     * const botEventLog = await prisma.botEventLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BotEventLogUpdateManyArgs>(args: SelectSubset<T, BotEventLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BotEventLogs and returns the data updated in the database.
     * @param {BotEventLogUpdateManyAndReturnArgs} args - Arguments to update many BotEventLogs.
     * @example
     * // Update many BotEventLogs
     * const botEventLog = await prisma.botEventLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BotEventLogs and only return the `id`
     * const botEventLogWithIdOnly = await prisma.botEventLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BotEventLogUpdateManyAndReturnArgs>(args: SelectSubset<T, BotEventLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BotEventLog.
     * @param {BotEventLogUpsertArgs} args - Arguments to update or create a BotEventLog.
     * @example
     * // Update or create a BotEventLog
     * const botEventLog = await prisma.botEventLog.upsert({
     *   create: {
     *     // ... data to create a BotEventLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BotEventLog we want to update
     *   }
     * })
     */
    upsert<T extends BotEventLogUpsertArgs>(args: SelectSubset<T, BotEventLogUpsertArgs<ExtArgs>>): Prisma__BotEventLogClient<$Result.GetResult<Prisma.$BotEventLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BotEventLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogCountArgs} args - Arguments to filter BotEventLogs to count.
     * @example
     * // Count the number of BotEventLogs
     * const count = await prisma.botEventLog.count({
     *   where: {
     *     // ... the filter for the BotEventLogs we want to count
     *   }
     * })
    **/
    count<T extends BotEventLogCountArgs>(
      args?: Subset<T, BotEventLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotEventLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BotEventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotEventLogAggregateArgs>(args: Subset<T, BotEventLogAggregateArgs>): Prisma.PrismaPromise<GetBotEventLogAggregateType<T>>

    /**
     * Group by BotEventLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotEventLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotEventLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotEventLogGroupByArgs['orderBy'] }
        : { orderBy?: BotEventLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotEventLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotEventLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BotEventLog model
   */
  readonly fields: BotEventLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BotEventLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BotEventLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    install<T extends BotInstallDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BotInstallDefaultArgs<ExtArgs>>): Prisma__BotInstallClient<$Result.GetResult<Prisma.$BotInstallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BotEventLog model
   */
  interface BotEventLogFieldRefs {
    readonly id: FieldRef<"BotEventLog", 'Int'>
    readonly installId: FieldRef<"BotEventLog", 'Int'>
    readonly eventId: FieldRef<"BotEventLog", 'String'>
    readonly type: FieldRef<"BotEventLog", 'String'>
    readonly payload: FieldRef<"BotEventLog", 'Json'>
    readonly status: FieldRef<"BotEventLog", 'String'>
    readonly attempts: FieldRef<"BotEventLog", 'Int'>
    readonly nextAttemptAt: FieldRef<"BotEventLog", 'DateTime'>
    readonly lastError: FieldRef<"BotEventLog", 'String'>
    readonly createdAt: FieldRef<"BotEventLog", 'DateTime'>
    readonly updatedAt: FieldRef<"BotEventLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BotEventLog findUnique
   */
  export type BotEventLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter, which BotEventLog to fetch.
     */
    where: BotEventLogWhereUniqueInput
  }

  /**
   * BotEventLog findUniqueOrThrow
   */
  export type BotEventLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter, which BotEventLog to fetch.
     */
    where: BotEventLogWhereUniqueInput
  }

  /**
   * BotEventLog findFirst
   */
  export type BotEventLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter, which BotEventLog to fetch.
     */
    where?: BotEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotEventLogs to fetch.
     */
    orderBy?: BotEventLogOrderByWithRelationInput | BotEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BotEventLogs.
     */
    cursor?: BotEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BotEventLogs.
     */
    distinct?: BotEventLogScalarFieldEnum | BotEventLogScalarFieldEnum[]
  }

  /**
   * BotEventLog findFirstOrThrow
   */
  export type BotEventLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter, which BotEventLog to fetch.
     */
    where?: BotEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotEventLogs to fetch.
     */
    orderBy?: BotEventLogOrderByWithRelationInput | BotEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BotEventLogs.
     */
    cursor?: BotEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotEventLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BotEventLogs.
     */
    distinct?: BotEventLogScalarFieldEnum | BotEventLogScalarFieldEnum[]
  }

  /**
   * BotEventLog findMany
   */
  export type BotEventLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter, which BotEventLogs to fetch.
     */
    where?: BotEventLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotEventLogs to fetch.
     */
    orderBy?: BotEventLogOrderByWithRelationInput | BotEventLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BotEventLogs.
     */
    cursor?: BotEventLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotEventLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotEventLogs.
     */
    skip?: number
    distinct?: BotEventLogScalarFieldEnum | BotEventLogScalarFieldEnum[]
  }

  /**
   * BotEventLog create
   */
  export type BotEventLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * The data needed to create a BotEventLog.
     */
    data: XOR<BotEventLogCreateInput, BotEventLogUncheckedCreateInput>
  }

  /**
   * BotEventLog createMany
   */
  export type BotEventLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BotEventLogs.
     */
    data: BotEventLogCreateManyInput | BotEventLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BotEventLog createManyAndReturn
   */
  export type BotEventLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * The data used to create many BotEventLogs.
     */
    data: BotEventLogCreateManyInput | BotEventLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BotEventLog update
   */
  export type BotEventLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * The data needed to update a BotEventLog.
     */
    data: XOR<BotEventLogUpdateInput, BotEventLogUncheckedUpdateInput>
    /**
     * Choose, which BotEventLog to update.
     */
    where: BotEventLogWhereUniqueInput
  }

  /**
   * BotEventLog updateMany
   */
  export type BotEventLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BotEventLogs.
     */
    data: XOR<BotEventLogUpdateManyMutationInput, BotEventLogUncheckedUpdateManyInput>
    /**
     * Filter which BotEventLogs to update
     */
    where?: BotEventLogWhereInput
    /**
     * Limit how many BotEventLogs to update.
     */
    limit?: number
  }

  /**
   * BotEventLog updateManyAndReturn
   */
  export type BotEventLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * The data used to update BotEventLogs.
     */
    data: XOR<BotEventLogUpdateManyMutationInput, BotEventLogUncheckedUpdateManyInput>
    /**
     * Filter which BotEventLogs to update
     */
    where?: BotEventLogWhereInput
    /**
     * Limit how many BotEventLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BotEventLog upsert
   */
  export type BotEventLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * The filter to search for the BotEventLog to update in case it exists.
     */
    where: BotEventLogWhereUniqueInput
    /**
     * In case the BotEventLog found by the `where` argument doesn't exist, create a new BotEventLog with this data.
     */
    create: XOR<BotEventLogCreateInput, BotEventLogUncheckedCreateInput>
    /**
     * In case the BotEventLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BotEventLogUpdateInput, BotEventLogUncheckedUpdateInput>
  }

  /**
   * BotEventLog delete
   */
  export type BotEventLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
    /**
     * Filter which BotEventLog to delete.
     */
    where: BotEventLogWhereUniqueInput
  }

  /**
   * BotEventLog deleteMany
   */
  export type BotEventLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BotEventLogs to delete
     */
    where?: BotEventLogWhereInput
    /**
     * Limit how many BotEventLogs to delete.
     */
    limit?: number
  }

  /**
   * BotEventLog without action
   */
  export type BotEventLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotEventLog
     */
    select?: BotEventLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BotEventLog
     */
    omit?: BotEventLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BotEventLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    preferredLanguage: 'preferredLanguage',
    allowExplicitContent: 'allowExplicitContent',
    showOriginalWithTranslation: 'showOriginalWithTranslation',
    role: 'role',
    enableAIResponder: 'enableAIResponder',
    enableSmartReplies: 'enableSmartReplies',
    autoResponderMode: 'autoResponderMode',
    autoResponderCooldownSec: 'autoResponderCooldownSec',
    autoResponderActiveUntil: 'autoResponderActiveUntil',
    autoResponderSignature: 'autoResponderSignature',
    publicKey: 'publicKey',
    privateKey: 'privateKey',
    autoDeleteSeconds: 'autoDeleteSeconds',
    showReadReceipts: 'showReadReceipts',
    avatarUrl: 'avatarUrl',
    emojiTag: 'emojiTag',
    plan: 'plan',
    messageTone: 'messageTone',
    ringtone: 'ringtone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    aiAssistantMode: 'aiAssistantMode',
    isGroup: 'isGroup',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    autoTranslateMode: 'autoTranslateMode',
    allowOrbitBot: 'allowOrbitBot'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const ParticipantScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    chatRoomId: 'chatRoomId',
    role: 'role',
    joinedAt: 'joinedAt',
    allowAIBot: 'allowAIBot'
  };

  export type ParticipantScalarFieldEnum = (typeof ParticipantScalarFieldEnum)[keyof typeof ParticipantScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    contentCiphertext: 'contentCiphertext',
    rawContent: 'rawContent',
    translations: 'translations',
    translatedFrom: 'translatedFrom',
    isExplicit: 'isExplicit',
    imageUrl: 'imageUrl',
    audioUrl: 'audioUrl',
    audioDurationSec: 'audioDurationSec',
    expiresAt: 'expiresAt',
    deletedBySender: 'deletedBySender',
    senderId: 'senderId',
    chatRoomId: 'chatRoomId',
    randomChatRoomId: 'randomChatRoomId',
    createdAt: 'createdAt',
    isAutoReply: 'isAutoReply'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ScheduledMessageScalarFieldEnum: {
    id: 'id',
    chatRoomId: 'chatRoomId',
    senderId: 'senderId',
    content: 'content',
    scheduledAt: 'scheduledAt',
    createdAt: 'createdAt'
  };

  export type ScheduledMessageScalarFieldEnum = (typeof ScheduledMessageScalarFieldEnum)[keyof typeof ScheduledMessageScalarFieldEnum]


  export const MessageKeyScalarFieldEnum: {
    messageId: 'messageId',
    userId: 'userId',
    encryptedKey: 'encryptedKey'
  };

  export type MessageKeyScalarFieldEnum = (typeof MessageKeyScalarFieldEnum)[keyof typeof MessageKeyScalarFieldEnum]


  export const MessageAttachmentScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    kind: 'kind',
    url: 'url',
    mimeType: 'mimeType',
    width: 'width',
    height: 'height',
    durationSec: 'durationSec',
    caption: 'caption',
    createdAt: 'createdAt'
  };

  export type MessageAttachmentScalarFieldEnum = (typeof MessageAttachmentScalarFieldEnum)[keyof typeof MessageAttachmentScalarFieldEnum]


  export const RandomChatRoomScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    aiEnabled: 'aiEnabled'
  };

  export type RandomChatRoomScalarFieldEnum = (typeof RandomChatRoomScalarFieldEnum)[keyof typeof RandomChatRoomScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    userId: 'userId',
    externalPhone: 'externalPhone',
    externalName: 'externalName',
    alias: 'alias',
    favorite: 'favorite',
    createdAt: 'createdAt'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    reporterId: 'reporterId',
    decryptedContent: 'decryptedContent',
    createdAt: 'createdAt',
    status: 'status',
    resolvedAt: 'resolvedAt',
    notes: 'notes'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    actorId: 'actorId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    status: 'status',
    ip: 'ip',
    userAgent: 'userAgent',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    publicKey: 'publicKey',
    name: 'name',
    platform: 'platform',
    isPrimary: 'isPrimary',
    createdAt: 'createdAt',
    lastSeenAt: 'lastSeenAt',
    revokedAt: 'revokedAt',
    revokedById: 'revokedById'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const ProvisionLinkScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdById: 'createdById',
    secret: 'secret',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt',
    sasCode: 'sasCode',
    createdAt: 'createdAt'
  };

  export type ProvisionLinkScalarFieldEnum = (typeof ProvisionLinkScalarFieldEnum)[keyof typeof ProvisionLinkScalarFieldEnum]


  export const MessageSessionKeyScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    recipientUserId: 'recipientUserId',
    recipientDeviceId: 'recipientDeviceId',
    encryptedSessionKey: 'encryptedSessionKey'
  };

  export type MessageSessionKeyScalarFieldEnum = (typeof MessageSessionKeyScalarFieldEnum)[keyof typeof MessageSessionKeyScalarFieldEnum]


  export const ChatRoomInviteScalarFieldEnum: {
    id: 'id',
    code: 'code',
    chatRoomId: 'chatRoomId',
    createdById: 'createdById',
    maxUses: 'maxUses',
    uses: 'uses',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type ChatRoomInviteScalarFieldEnum = (typeof ChatRoomInviteScalarFieldEnum)[keyof typeof ChatRoomInviteScalarFieldEnum]


  export const MessageReactionScalarFieldEnum: {
    messageId: 'messageId',
    userId: 'userId',
    emoji: 'emoji',
    createdAt: 'createdAt'
  };

  export type MessageReactionScalarFieldEnum = (typeof MessageReactionScalarFieldEnum)[keyof typeof MessageReactionScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    captionCiphertext: 'captionCiphertext',
    encryptedKeys: 'encryptedKeys',
    translatedFrom: 'translatedFrom',
    translations: 'translations',
    isExplicit: 'isExplicit',
    audience: 'audience',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const StatusAssetScalarFieldEnum: {
    id: 'id',
    statusId: 'statusId',
    kind: 'kind',
    url: 'url',
    mimeType: 'mimeType',
    width: 'width',
    height: 'height',
    durationSec: 'durationSec',
    caption: 'caption',
    createdAt: 'createdAt'
  };

  export type StatusAssetScalarFieldEnum = (typeof StatusAssetScalarFieldEnum)[keyof typeof StatusAssetScalarFieldEnum]


  export const StatusKeyScalarFieldEnum: {
    statusId: 'statusId',
    userId: 'userId',
    encryptedKey: 'encryptedKey'
  };

  export type StatusKeyScalarFieldEnum = (typeof StatusKeyScalarFieldEnum)[keyof typeof StatusKeyScalarFieldEnum]


  export const StatusViewScalarFieldEnum: {
    id: 'id',
    statusId: 'statusId',
    viewerId: 'viewerId',
    viewedAt: 'viewedAt'
  };

  export type StatusViewScalarFieldEnum = (typeof StatusViewScalarFieldEnum)[keyof typeof StatusViewScalarFieldEnum]


  export const StatusReactionScalarFieldEnum: {
    statusId: 'statusId',
    userId: 'userId',
    emoji: 'emoji'
  };

  export type StatusReactionScalarFieldEnum = (typeof StatusReactionScalarFieldEnum)[keyof typeof StatusReactionScalarFieldEnum]


  export const BotScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    name: 'name',
    url: 'url',
    secret: 'secret',
    serviceUserId: 'serviceUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BotScalarFieldEnum = (typeof BotScalarFieldEnum)[keyof typeof BotScalarFieldEnum]


  export const BotInstallScalarFieldEnum: {
    id: 'id',
    botId: 'botId',
    chatRoomId: 'chatRoomId',
    contentScope: 'contentScope',
    isEnabled: 'isEnabled',
    scopes: 'scopes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BotInstallScalarFieldEnum = (typeof BotInstallScalarFieldEnum)[keyof typeof BotInstallScalarFieldEnum]


  export const BotEventLogScalarFieldEnum: {
    id: 'id',
    installId: 'installId',
    eventId: 'eventId',
    type: 'type',
    payload: 'payload',
    status: 'status',
    attempts: 'attempts',
    nextAttemptAt: 'nextAttemptAt',
    lastError: 'lastError',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BotEventLogScalarFieldEnum = (typeof BotEventLogScalarFieldEnum)[keyof typeof BotEventLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AutoResponderMode'
   */
  export type EnumAutoResponderModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoResponderMode'>
    


  /**
   * Reference to a field of type 'AutoResponderMode[]'
   */
  export type ListEnumAutoResponderModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoResponderMode[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Plan'
   */
  export type EnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan'>
    


  /**
   * Reference to a field of type 'Plan[]'
   */
  export type ListEnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan[]'>
    


  /**
   * Reference to a field of type 'AIAssistantMode'
   */
  export type EnumAIAssistantModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AIAssistantMode'>
    


  /**
   * Reference to a field of type 'AIAssistantMode[]'
   */
  export type ListEnumAIAssistantModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AIAssistantMode[]'>
    


  /**
   * Reference to a field of type 'AutoTranslateMode'
   */
  export type EnumAutoTranslateModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoTranslateMode'>
    


  /**
   * Reference to a field of type 'AutoTranslateMode[]'
   */
  export type ListEnumAutoTranslateModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AutoTranslateMode[]'>
    


  /**
   * Reference to a field of type 'RoomRole'
   */
  export type EnumRoomRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomRole'>
    


  /**
   * Reference to a field of type 'RoomRole[]'
   */
  export type ListEnumRoomRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomRole[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'AttachmentKind'
   */
  export type EnumAttachmentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttachmentKind'>
    


  /**
   * Reference to a field of type 'AttachmentKind[]'
   */
  export type ListEnumAttachmentKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttachmentKind[]'>
    


  /**
   * Reference to a field of type 'StatusAudience'
   */
  export type EnumStatusAudienceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusAudience'>
    


  /**
   * Reference to a field of type 'StatusAudience[]'
   */
  export type ListEnumStatusAudienceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusAudience[]'>
    


  /**
   * Reference to a field of type 'StatusAssetKind'
   */
  export type EnumStatusAssetKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusAssetKind'>
    


  /**
   * Reference to a field of type 'StatusAssetKind[]'
   */
  export type ListEnumStatusAssetKindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusAssetKind[]'>
    


  /**
   * Reference to a field of type 'ContentScope'
   */
  export type EnumContentScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentScope'>
    


  /**
   * Reference to a field of type 'ContentScope[]'
   */
  export type ListEnumContentScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContentScope[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: StringFilter<"User"> | string
    allowExplicitContent?: BoolFilter<"User"> | boolean
    showOriginalWithTranslation?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    enableAIResponder?: BoolFilter<"User"> | boolean
    enableSmartReplies?: BoolFilter<"User"> | boolean
    autoResponderMode?: EnumAutoResponderModeFilter<"User"> | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFilter<"User"> | number
    autoResponderActiveUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    autoResponderSignature?: StringNullableFilter<"User"> | string | null
    publicKey?: StringNullableFilter<"User"> | string | null
    privateKey?: StringNullableFilter<"User"> | string | null
    autoDeleteSeconds?: IntNullableFilter<"User"> | number | null
    showReadReceipts?: BoolFilter<"User"> | boolean
    avatarUrl?: StringNullableFilter<"User"> | string | null
    emojiTag?: StringNullableFilter<"User"> | string | null
    plan?: EnumPlanFilter<"User"> | $Enums.Plan
    messageTone?: StringNullableFilter<"User"> | string | null
    ringtone?: StringNullableFilter<"User"> | string | null
    messages?: MessageListRelationFilter
    participants?: ParticipantListRelationFilter
    reports?: ReportListRelationFilter
    randomChatRooms?: RandomChatRoomListRelationFilter
    readMessages?: MessageListRelationFilter
    contactsOwned?: ContactListRelationFilter
    contactsSaved?: ContactListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    messageKeys?: MessageKeyListRelationFilter
    devices?: DeviceListRelationFilter
    deviceRevocations?: DeviceListRelationFilter
    createdInvites?: ChatRoomInviteListRelationFilter
    messageReactions?: MessageReactionListRelationFilter
    statusesAuthored?: StatusListRelationFilter
    statusKeys?: StatusKeyListRelationFilter
    statusViews?: StatusViewListRelationFilter
    statusReactions?: StatusReactionListRelationFilter
    botsOwned?: BotListRelationFilter
    botsAsService?: BotListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrder
    allowExplicitContent?: SortOrder
    showOriginalWithTranslation?: SortOrder
    role?: SortOrder
    enableAIResponder?: SortOrder
    enableSmartReplies?: SortOrder
    autoResponderMode?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoResponderActiveUntil?: SortOrderInput | SortOrder
    autoResponderSignature?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    privateKey?: SortOrderInput | SortOrder
    autoDeleteSeconds?: SortOrderInput | SortOrder
    showReadReceipts?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    emojiTag?: SortOrderInput | SortOrder
    plan?: SortOrder
    messageTone?: SortOrderInput | SortOrder
    ringtone?: SortOrderInput | SortOrder
    messages?: MessageOrderByRelationAggregateInput
    participants?: ParticipantOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    randomChatRooms?: RandomChatRoomOrderByRelationAggregateInput
    readMessages?: MessageOrderByRelationAggregateInput
    contactsOwned?: ContactOrderByRelationAggregateInput
    contactsSaved?: ContactOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    messageKeys?: MessageKeyOrderByRelationAggregateInput
    devices?: DeviceOrderByRelationAggregateInput
    deviceRevocations?: DeviceOrderByRelationAggregateInput
    createdInvites?: ChatRoomInviteOrderByRelationAggregateInput
    messageReactions?: MessageReactionOrderByRelationAggregateInput
    statusesAuthored?: StatusOrderByRelationAggregateInput
    statusKeys?: StatusKeyOrderByRelationAggregateInput
    statusViews?: StatusViewOrderByRelationAggregateInput
    statusReactions?: StatusReactionOrderByRelationAggregateInput
    botsOwned?: BotOrderByRelationAggregateInput
    botsAsService?: BotOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: StringFilter<"User"> | string
    allowExplicitContent?: BoolFilter<"User"> | boolean
    showOriginalWithTranslation?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    enableAIResponder?: BoolFilter<"User"> | boolean
    enableSmartReplies?: BoolFilter<"User"> | boolean
    autoResponderMode?: EnumAutoResponderModeFilter<"User"> | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFilter<"User"> | number
    autoResponderActiveUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    autoResponderSignature?: StringNullableFilter<"User"> | string | null
    publicKey?: StringNullableFilter<"User"> | string | null
    privateKey?: StringNullableFilter<"User"> | string | null
    autoDeleteSeconds?: IntNullableFilter<"User"> | number | null
    showReadReceipts?: BoolFilter<"User"> | boolean
    avatarUrl?: StringNullableFilter<"User"> | string | null
    emojiTag?: StringNullableFilter<"User"> | string | null
    plan?: EnumPlanFilter<"User"> | $Enums.Plan
    messageTone?: StringNullableFilter<"User"> | string | null
    ringtone?: StringNullableFilter<"User"> | string | null
    messages?: MessageListRelationFilter
    participants?: ParticipantListRelationFilter
    reports?: ReportListRelationFilter
    randomChatRooms?: RandomChatRoomListRelationFilter
    readMessages?: MessageListRelationFilter
    contactsOwned?: ContactListRelationFilter
    contactsSaved?: ContactListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    messageKeys?: MessageKeyListRelationFilter
    devices?: DeviceListRelationFilter
    deviceRevocations?: DeviceListRelationFilter
    createdInvites?: ChatRoomInviteListRelationFilter
    messageReactions?: MessageReactionListRelationFilter
    statusesAuthored?: StatusListRelationFilter
    statusKeys?: StatusKeyListRelationFilter
    statusViews?: StatusViewListRelationFilter
    statusReactions?: StatusReactionListRelationFilter
    botsOwned?: BotListRelationFilter
    botsAsService?: BotListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrder
    allowExplicitContent?: SortOrder
    showOriginalWithTranslation?: SortOrder
    role?: SortOrder
    enableAIResponder?: SortOrder
    enableSmartReplies?: SortOrder
    autoResponderMode?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoResponderActiveUntil?: SortOrderInput | SortOrder
    autoResponderSignature?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    privateKey?: SortOrderInput | SortOrder
    autoDeleteSeconds?: SortOrderInput | SortOrder
    showReadReceipts?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    emojiTag?: SortOrderInput | SortOrder
    plan?: SortOrder
    messageTone?: SortOrderInput | SortOrder
    ringtone?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferredLanguage?: StringWithAggregatesFilter<"User"> | string
    allowExplicitContent?: BoolWithAggregatesFilter<"User"> | boolean
    showOriginalWithTranslation?: BoolWithAggregatesFilter<"User"> | boolean
    role?: StringWithAggregatesFilter<"User"> | string
    enableAIResponder?: BoolWithAggregatesFilter<"User"> | boolean
    enableSmartReplies?: BoolWithAggregatesFilter<"User"> | boolean
    autoResponderMode?: EnumAutoResponderModeWithAggregatesFilter<"User"> | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntWithAggregatesFilter<"User"> | number
    autoResponderActiveUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    autoResponderSignature?: StringNullableWithAggregatesFilter<"User"> | string | null
    publicKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    privateKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    autoDeleteSeconds?: IntNullableWithAggregatesFilter<"User"> | number | null
    showReadReceipts?: BoolWithAggregatesFilter<"User"> | boolean
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    emojiTag?: StringNullableWithAggregatesFilter<"User"> | string | null
    plan?: EnumPlanWithAggregatesFilter<"User"> | $Enums.Plan
    messageTone?: StringNullableWithAggregatesFilter<"User"> | string | null
    ringtone?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    id?: IntFilter<"ChatRoom"> | number
    name?: StringNullableFilter<"ChatRoom"> | string | null
    aiAssistantMode?: EnumAIAssistantModeFilter<"ChatRoom"> | $Enums.AIAssistantMode
    isGroup?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFilter<"ChatRoom"> | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFilter<"ChatRoom"> | boolean
    participants?: ParticipantListRelationFilter
    messages?: MessageListRelationFilter
    invites?: ChatRoomInviteListRelationFilter
    botInstalls?: BotInstallListRelationFilter
  }

  export type ChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    aiAssistantMode?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autoTranslateMode?: SortOrder
    allowOrbitBot?: SortOrder
    participants?: ParticipantOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    invites?: ChatRoomInviteOrderByRelationAggregateInput
    botInstalls?: BotInstallOrderByRelationAggregateInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    name?: StringNullableFilter<"ChatRoom"> | string | null
    aiAssistantMode?: EnumAIAssistantModeFilter<"ChatRoom"> | $Enums.AIAssistantMode
    isGroup?: BoolFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeFilter<"ChatRoom"> | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFilter<"ChatRoom"> | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFilter<"ChatRoom"> | boolean
    participants?: ParticipantListRelationFilter
    messages?: MessageListRelationFilter
    invites?: ChatRoomInviteListRelationFilter
    botInstalls?: BotInstallListRelationFilter
  }, "id">

  export type ChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    aiAssistantMode?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autoTranslateMode?: SortOrder
    allowOrbitBot?: SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _avg?: ChatRoomAvgOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
    _sum?: ChatRoomSumOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatRoom"> | number
    name?: StringNullableWithAggregatesFilter<"ChatRoom"> | string | null
    aiAssistantMode?: EnumAIAssistantModeWithAggregatesFilter<"ChatRoom"> | $Enums.AIAssistantMode
    isGroup?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    autoTranslateMode?: EnumAutoTranslateModeWithAggregatesFilter<"ChatRoom"> | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolWithAggregatesFilter<"ChatRoom"> | boolean
  }

  export type ParticipantWhereInput = {
    AND?: ParticipantWhereInput | ParticipantWhereInput[]
    OR?: ParticipantWhereInput[]
    NOT?: ParticipantWhereInput | ParticipantWhereInput[]
    id?: IntFilter<"Participant"> | number
    userId?: IntFilter<"Participant"> | number
    chatRoomId?: IntFilter<"Participant"> | number
    role?: EnumRoomRoleFilter<"Participant"> | $Enums.RoomRole
    joinedAt?: DateTimeFilter<"Participant"> | Date | string
    allowAIBot?: BoolFilter<"Participant"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
  }

  export type ParticipantOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    allowAIBot?: SortOrder
    user?: UserOrderByWithRelationInput
    chatRoom?: ChatRoomOrderByWithRelationInput
  }

  export type ParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_chatRoomId?: ParticipantUserIdChatRoomIdCompoundUniqueInput
    AND?: ParticipantWhereInput | ParticipantWhereInput[]
    OR?: ParticipantWhereInput[]
    NOT?: ParticipantWhereInput | ParticipantWhereInput[]
    userId?: IntFilter<"Participant"> | number
    chatRoomId?: IntFilter<"Participant"> | number
    role?: EnumRoomRoleFilter<"Participant"> | $Enums.RoomRole
    joinedAt?: DateTimeFilter<"Participant"> | Date | string
    allowAIBot?: BoolFilter<"Participant"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
  }, "id" | "userId_chatRoomId">

  export type ParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    allowAIBot?: SortOrder
    _count?: ParticipantCountOrderByAggregateInput
    _avg?: ParticipantAvgOrderByAggregateInput
    _max?: ParticipantMaxOrderByAggregateInput
    _min?: ParticipantMinOrderByAggregateInput
    _sum?: ParticipantSumOrderByAggregateInput
  }

  export type ParticipantScalarWhereWithAggregatesInput = {
    AND?: ParticipantScalarWhereWithAggregatesInput | ParticipantScalarWhereWithAggregatesInput[]
    OR?: ParticipantScalarWhereWithAggregatesInput[]
    NOT?: ParticipantScalarWhereWithAggregatesInput | ParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Participant"> | number
    userId?: IntWithAggregatesFilter<"Participant"> | number
    chatRoomId?: IntWithAggregatesFilter<"Participant"> | number
    role?: EnumRoomRoleWithAggregatesFilter<"Participant"> | $Enums.RoomRole
    joinedAt?: DateTimeWithAggregatesFilter<"Participant"> | Date | string
    allowAIBot?: BoolWithAggregatesFilter<"Participant"> | boolean
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    contentCiphertext?: StringFilter<"Message"> | string
    rawContent?: StringFilter<"Message"> | string
    translations?: JsonNullableFilter<"Message">
    translatedFrom?: StringNullableFilter<"Message"> | string | null
    isExplicit?: BoolFilter<"Message"> | boolean
    imageUrl?: StringNullableFilter<"Message"> | string | null
    audioUrl?: StringNullableFilter<"Message"> | string | null
    audioDurationSec?: IntNullableFilter<"Message"> | number | null
    expiresAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    deletedBySender?: BoolFilter<"Message"> | boolean
    senderId?: IntFilter<"Message"> | number
    chatRoomId?: IntFilter<"Message"> | number
    randomChatRoomId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isAutoReply?: BoolFilter<"Message"> | boolean
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    keys?: MessageKeyListRelationFilter
    attachments?: MessageAttachmentListRelationFilter
    randomChatRoom?: XOR<RandomChatRoomNullableScalarRelationFilter, RandomChatRoomWhereInput> | null
    readBy?: UserListRelationFilter
    reports?: ReportListRelationFilter
    reactions?: MessageReactionListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    contentCiphertext?: SortOrder
    rawContent?: SortOrder
    translations?: SortOrderInput | SortOrder
    translatedFrom?: SortOrderInput | SortOrder
    isExplicit?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    audioDurationSec?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    deletedBySender?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isAutoReply?: SortOrder
    sender?: UserOrderByWithRelationInput
    chatRoom?: ChatRoomOrderByWithRelationInput
    keys?: MessageKeyOrderByRelationAggregateInput
    attachments?: MessageAttachmentOrderByRelationAggregateInput
    randomChatRoom?: RandomChatRoomOrderByWithRelationInput
    readBy?: UserOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    reactions?: MessageReactionOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    contentCiphertext?: StringFilter<"Message"> | string
    rawContent?: StringFilter<"Message"> | string
    translations?: JsonNullableFilter<"Message">
    translatedFrom?: StringNullableFilter<"Message"> | string | null
    isExplicit?: BoolFilter<"Message"> | boolean
    imageUrl?: StringNullableFilter<"Message"> | string | null
    audioUrl?: StringNullableFilter<"Message"> | string | null
    audioDurationSec?: IntNullableFilter<"Message"> | number | null
    expiresAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    deletedBySender?: BoolFilter<"Message"> | boolean
    senderId?: IntFilter<"Message"> | number
    chatRoomId?: IntFilter<"Message"> | number
    randomChatRoomId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isAutoReply?: BoolFilter<"Message"> | boolean
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    keys?: MessageKeyListRelationFilter
    attachments?: MessageAttachmentListRelationFilter
    randomChatRoom?: XOR<RandomChatRoomNullableScalarRelationFilter, RandomChatRoomWhereInput> | null
    readBy?: UserListRelationFilter
    reports?: ReportListRelationFilter
    reactions?: MessageReactionListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    contentCiphertext?: SortOrder
    rawContent?: SortOrder
    translations?: SortOrderInput | SortOrder
    translatedFrom?: SortOrderInput | SortOrder
    isExplicit?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    audioDurationSec?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    deletedBySender?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    isAutoReply?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    contentCiphertext?: StringWithAggregatesFilter<"Message"> | string
    rawContent?: StringWithAggregatesFilter<"Message"> | string
    translations?: JsonNullableWithAggregatesFilter<"Message">
    translatedFrom?: StringNullableWithAggregatesFilter<"Message"> | string | null
    isExplicit?: BoolWithAggregatesFilter<"Message"> | boolean
    imageUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
    audioDurationSec?: IntNullableWithAggregatesFilter<"Message"> | number | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    deletedBySender?: BoolWithAggregatesFilter<"Message"> | boolean
    senderId?: IntWithAggregatesFilter<"Message"> | number
    chatRoomId?: IntWithAggregatesFilter<"Message"> | number
    randomChatRoomId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    isAutoReply?: BoolWithAggregatesFilter<"Message"> | boolean
  }

  export type ScheduledMessageWhereInput = {
    AND?: ScheduledMessageWhereInput | ScheduledMessageWhereInput[]
    OR?: ScheduledMessageWhereInput[]
    NOT?: ScheduledMessageWhereInput | ScheduledMessageWhereInput[]
    id?: IntFilter<"ScheduledMessage"> | number
    chatRoomId?: IntFilter<"ScheduledMessage"> | number
    senderId?: IntFilter<"ScheduledMessage"> | number
    content?: StringFilter<"ScheduledMessage"> | string
    scheduledAt?: DateTimeFilter<"ScheduledMessage"> | Date | string
    createdAt?: DateTimeFilter<"ScheduledMessage"> | Date | string
  }

  export type ScheduledMessageOrderByWithRelationInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    scheduledAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduledMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduledMessageWhereInput | ScheduledMessageWhereInput[]
    OR?: ScheduledMessageWhereInput[]
    NOT?: ScheduledMessageWhereInput | ScheduledMessageWhereInput[]
    chatRoomId?: IntFilter<"ScheduledMessage"> | number
    senderId?: IntFilter<"ScheduledMessage"> | number
    content?: StringFilter<"ScheduledMessage"> | string
    scheduledAt?: DateTimeFilter<"ScheduledMessage"> | Date | string
    createdAt?: DateTimeFilter<"ScheduledMessage"> | Date | string
  }, "id">

  export type ScheduledMessageOrderByWithAggregationInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    scheduledAt?: SortOrder
    createdAt?: SortOrder
    _count?: ScheduledMessageCountOrderByAggregateInput
    _avg?: ScheduledMessageAvgOrderByAggregateInput
    _max?: ScheduledMessageMaxOrderByAggregateInput
    _min?: ScheduledMessageMinOrderByAggregateInput
    _sum?: ScheduledMessageSumOrderByAggregateInput
  }

  export type ScheduledMessageScalarWhereWithAggregatesInput = {
    AND?: ScheduledMessageScalarWhereWithAggregatesInput | ScheduledMessageScalarWhereWithAggregatesInput[]
    OR?: ScheduledMessageScalarWhereWithAggregatesInput[]
    NOT?: ScheduledMessageScalarWhereWithAggregatesInput | ScheduledMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduledMessage"> | number
    chatRoomId?: IntWithAggregatesFilter<"ScheduledMessage"> | number
    senderId?: IntWithAggregatesFilter<"ScheduledMessage"> | number
    content?: StringWithAggregatesFilter<"ScheduledMessage"> | string
    scheduledAt?: DateTimeWithAggregatesFilter<"ScheduledMessage"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ScheduledMessage"> | Date | string
  }

  export type MessageKeyWhereInput = {
    AND?: MessageKeyWhereInput | MessageKeyWhereInput[]
    OR?: MessageKeyWhereInput[]
    NOT?: MessageKeyWhereInput | MessageKeyWhereInput[]
    messageId?: IntFilter<"MessageKey"> | number
    userId?: IntFilter<"MessageKey"> | number
    encryptedKey?: StringFilter<"MessageKey"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageKeyOrderByWithRelationInput = {
    messageId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
    message?: MessageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MessageKeyWhereUniqueInput = Prisma.AtLeast<{
    messageId_userId?: MessageKeyMessageIdUserIdCompoundUniqueInput
    AND?: MessageKeyWhereInput | MessageKeyWhereInput[]
    OR?: MessageKeyWhereInput[]
    NOT?: MessageKeyWhereInput | MessageKeyWhereInput[]
    messageId?: IntFilter<"MessageKey"> | number
    userId?: IntFilter<"MessageKey"> | number
    encryptedKey?: StringFilter<"MessageKey"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "messageId_userId">

  export type MessageKeyOrderByWithAggregationInput = {
    messageId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
    _count?: MessageKeyCountOrderByAggregateInput
    _avg?: MessageKeyAvgOrderByAggregateInput
    _max?: MessageKeyMaxOrderByAggregateInput
    _min?: MessageKeyMinOrderByAggregateInput
    _sum?: MessageKeySumOrderByAggregateInput
  }

  export type MessageKeyScalarWhereWithAggregatesInput = {
    AND?: MessageKeyScalarWhereWithAggregatesInput | MessageKeyScalarWhereWithAggregatesInput[]
    OR?: MessageKeyScalarWhereWithAggregatesInput[]
    NOT?: MessageKeyScalarWhereWithAggregatesInput | MessageKeyScalarWhereWithAggregatesInput[]
    messageId?: IntWithAggregatesFilter<"MessageKey"> | number
    userId?: IntWithAggregatesFilter<"MessageKey"> | number
    encryptedKey?: StringWithAggregatesFilter<"MessageKey"> | string
  }

  export type MessageAttachmentWhereInput = {
    AND?: MessageAttachmentWhereInput | MessageAttachmentWhereInput[]
    OR?: MessageAttachmentWhereInput[]
    NOT?: MessageAttachmentWhereInput | MessageAttachmentWhereInput[]
    id?: IntFilter<"MessageAttachment"> | number
    messageId?: IntFilter<"MessageAttachment"> | number
    kind?: EnumAttachmentKindFilter<"MessageAttachment"> | $Enums.AttachmentKind
    url?: StringFilter<"MessageAttachment"> | string
    mimeType?: StringFilter<"MessageAttachment"> | string
    width?: IntNullableFilter<"MessageAttachment"> | number | null
    height?: IntNullableFilter<"MessageAttachment"> | number | null
    durationSec?: IntNullableFilter<"MessageAttachment"> | number | null
    caption?: StringNullableFilter<"MessageAttachment"> | string | null
    createdAt?: DateTimeFilter<"MessageAttachment"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }

  export type MessageAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    durationSec?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type MessageAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageAttachmentWhereInput | MessageAttachmentWhereInput[]
    OR?: MessageAttachmentWhereInput[]
    NOT?: MessageAttachmentWhereInput | MessageAttachmentWhereInput[]
    messageId?: IntFilter<"MessageAttachment"> | number
    kind?: EnumAttachmentKindFilter<"MessageAttachment"> | $Enums.AttachmentKind
    url?: StringFilter<"MessageAttachment"> | string
    mimeType?: StringFilter<"MessageAttachment"> | string
    width?: IntNullableFilter<"MessageAttachment"> | number | null
    height?: IntNullableFilter<"MessageAttachment"> | number | null
    durationSec?: IntNullableFilter<"MessageAttachment"> | number | null
    caption?: StringNullableFilter<"MessageAttachment"> | string | null
    createdAt?: DateTimeFilter<"MessageAttachment"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }, "id">

  export type MessageAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    durationSec?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MessageAttachmentCountOrderByAggregateInput
    _avg?: MessageAttachmentAvgOrderByAggregateInput
    _max?: MessageAttachmentMaxOrderByAggregateInput
    _min?: MessageAttachmentMinOrderByAggregateInput
    _sum?: MessageAttachmentSumOrderByAggregateInput
  }

  export type MessageAttachmentScalarWhereWithAggregatesInput = {
    AND?: MessageAttachmentScalarWhereWithAggregatesInput | MessageAttachmentScalarWhereWithAggregatesInput[]
    OR?: MessageAttachmentScalarWhereWithAggregatesInput[]
    NOT?: MessageAttachmentScalarWhereWithAggregatesInput | MessageAttachmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MessageAttachment"> | number
    messageId?: IntWithAggregatesFilter<"MessageAttachment"> | number
    kind?: EnumAttachmentKindWithAggregatesFilter<"MessageAttachment"> | $Enums.AttachmentKind
    url?: StringWithAggregatesFilter<"MessageAttachment"> | string
    mimeType?: StringWithAggregatesFilter<"MessageAttachment"> | string
    width?: IntNullableWithAggregatesFilter<"MessageAttachment"> | number | null
    height?: IntNullableWithAggregatesFilter<"MessageAttachment"> | number | null
    durationSec?: IntNullableWithAggregatesFilter<"MessageAttachment"> | number | null
    caption?: StringNullableWithAggregatesFilter<"MessageAttachment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MessageAttachment"> | Date | string
  }

  export type RandomChatRoomWhereInput = {
    AND?: RandomChatRoomWhereInput | RandomChatRoomWhereInput[]
    OR?: RandomChatRoomWhereInput[]
    NOT?: RandomChatRoomWhereInput | RandomChatRoomWhereInput[]
    id?: IntFilter<"RandomChatRoom"> | number
    createdAt?: DateTimeFilter<"RandomChatRoom"> | Date | string
    aiEnabled?: BoolFilter<"RandomChatRoom"> | boolean
    participants?: UserListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type RandomChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    aiEnabled?: SortOrder
    participants?: UserOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type RandomChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RandomChatRoomWhereInput | RandomChatRoomWhereInput[]
    OR?: RandomChatRoomWhereInput[]
    NOT?: RandomChatRoomWhereInput | RandomChatRoomWhereInput[]
    createdAt?: DateTimeFilter<"RandomChatRoom"> | Date | string
    aiEnabled?: BoolFilter<"RandomChatRoom"> | boolean
    participants?: UserListRelationFilter
    messages?: MessageListRelationFilter
  }, "id">

  export type RandomChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    aiEnabled?: SortOrder
    _count?: RandomChatRoomCountOrderByAggregateInput
    _avg?: RandomChatRoomAvgOrderByAggregateInput
    _max?: RandomChatRoomMaxOrderByAggregateInput
    _min?: RandomChatRoomMinOrderByAggregateInput
    _sum?: RandomChatRoomSumOrderByAggregateInput
  }

  export type RandomChatRoomScalarWhereWithAggregatesInput = {
    AND?: RandomChatRoomScalarWhereWithAggregatesInput | RandomChatRoomScalarWhereWithAggregatesInput[]
    OR?: RandomChatRoomScalarWhereWithAggregatesInput[]
    NOT?: RandomChatRoomScalarWhereWithAggregatesInput | RandomChatRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RandomChatRoom"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RandomChatRoom"> | Date | string
    aiEnabled?: BoolWithAggregatesFilter<"RandomChatRoom"> | boolean
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: IntFilter<"Contact"> | number
    ownerId?: IntFilter<"Contact"> | number
    userId?: IntNullableFilter<"Contact"> | number | null
    externalPhone?: StringNullableFilter<"Contact"> | string | null
    externalName?: StringNullableFilter<"Contact"> | string | null
    alias?: StringNullableFilter<"Contact"> | string | null
    favorite?: BoolFilter<"Contact"> | boolean
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrderInput | SortOrder
    externalPhone?: SortOrderInput | SortOrder
    externalName?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    favorite?: SortOrder
    createdAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ownerId_userId?: ContactOwnerIdUserIdCompoundUniqueInput
    ownerId_externalPhone?: ContactOwnerIdExternalPhoneCompoundUniqueInput
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    ownerId?: IntFilter<"Contact"> | number
    userId?: IntNullableFilter<"Contact"> | number | null
    externalPhone?: StringNullableFilter<"Contact"> | string | null
    externalName?: StringNullableFilter<"Contact"> | string | null
    alias?: StringNullableFilter<"Contact"> | string | null
    favorite?: BoolFilter<"Contact"> | boolean
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "ownerId_userId" | "ownerId_externalPhone">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrderInput | SortOrder
    externalPhone?: SortOrderInput | SortOrder
    externalName?: SortOrderInput | SortOrder
    alias?: SortOrderInput | SortOrder
    favorite?: SortOrder
    createdAt?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact"> | number
    ownerId?: IntWithAggregatesFilter<"Contact"> | number
    userId?: IntNullableWithAggregatesFilter<"Contact"> | number | null
    externalPhone?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    externalName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    alias?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    favorite?: BoolWithAggregatesFilter<"Contact"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    messageId?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    decryptedContent?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    status?: StringFilter<"Report"> | string
    resolvedAt?: DateTimeNullableFilter<"Report"> | Date | string | null
    notes?: StringNullableFilter<"Report"> | string | null
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
    decryptedContent?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    message?: MessageOrderByWithRelationInput
    reporter?: UserOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    messageId?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    decryptedContent?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    status?: StringFilter<"Report"> | string
    resolvedAt?: DateTimeNullableFilter<"Report"> | Date | string | null
    notes?: StringNullableFilter<"Report"> | string | null
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    reporter?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
    decryptedContent?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    messageId?: IntWithAggregatesFilter<"Report"> | number
    reporterId?: IntWithAggregatesFilter<"Report"> | number
    decryptedContent?: StringWithAggregatesFilter<"Report"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    status?: StringWithAggregatesFilter<"Report"> | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Report"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Report"> | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    actorId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    resource?: StringNullableFilter<"AuditLog"> | string | null
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    status?: IntFilter<"AuditLog"> | number
    ip?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    resourceId?: SortOrderInput | SortOrder
    status?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    actor?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    actorId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    resource?: StringNullableFilter<"AuditLog"> | string | null
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    status?: IntFilter<"AuditLog"> | number
    ip?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    resource?: SortOrderInput | SortOrder
    resourceId?: SortOrderInput | SortOrder
    status?: SortOrder
    ip?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    actorId?: IntWithAggregatesFilter<"AuditLog"> | number
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    resourceId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    status?: IntWithAggregatesFilter<"AuditLog"> | number
    ip?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type DeviceWhereInput = {
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    id?: StringFilter<"Device"> | string
    userId?: IntFilter<"Device"> | number
    publicKey?: StringFilter<"Device"> | string
    name?: StringNullableFilter<"Device"> | string | null
    platform?: StringNullableFilter<"Device"> | string | null
    isPrimary?: BoolFilter<"Device"> | boolean
    createdAt?: DateTimeFilter<"Device"> | Date | string
    lastSeenAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedById?: IntNullableFilter<"Device"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    revokedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type DeviceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    name?: SortOrderInput | SortOrder
    platform?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    lastSeenAt?: SortOrderInput | SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revokedById?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    revokedBy?: UserOrderByWithRelationInput
  }

  export type DeviceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DeviceWhereInput | DeviceWhereInput[]
    OR?: DeviceWhereInput[]
    NOT?: DeviceWhereInput | DeviceWhereInput[]
    userId?: IntFilter<"Device"> | number
    publicKey?: StringFilter<"Device"> | string
    name?: StringNullableFilter<"Device"> | string | null
    platform?: StringNullableFilter<"Device"> | string | null
    isPrimary?: BoolFilter<"Device"> | boolean
    createdAt?: DateTimeFilter<"Device"> | Date | string
    lastSeenAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedById?: IntNullableFilter<"Device"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    revokedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type DeviceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    name?: SortOrderInput | SortOrder
    platform?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    lastSeenAt?: SortOrderInput | SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revokedById?: SortOrderInput | SortOrder
    _count?: DeviceCountOrderByAggregateInput
    _avg?: DeviceAvgOrderByAggregateInput
    _max?: DeviceMaxOrderByAggregateInput
    _min?: DeviceMinOrderByAggregateInput
    _sum?: DeviceSumOrderByAggregateInput
  }

  export type DeviceScalarWhereWithAggregatesInput = {
    AND?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    OR?: DeviceScalarWhereWithAggregatesInput[]
    NOT?: DeviceScalarWhereWithAggregatesInput | DeviceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Device"> | string
    userId?: IntWithAggregatesFilter<"Device"> | number
    publicKey?: StringWithAggregatesFilter<"Device"> | string
    name?: StringNullableWithAggregatesFilter<"Device"> | string | null
    platform?: StringNullableWithAggregatesFilter<"Device"> | string | null
    isPrimary?: BoolWithAggregatesFilter<"Device"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Device"> | Date | string
    lastSeenAt?: DateTimeNullableWithAggregatesFilter<"Device"> | Date | string | null
    revokedAt?: DateTimeNullableWithAggregatesFilter<"Device"> | Date | string | null
    revokedById?: IntNullableWithAggregatesFilter<"Device"> | number | null
  }

  export type ProvisionLinkWhereInput = {
    AND?: ProvisionLinkWhereInput | ProvisionLinkWhereInput[]
    OR?: ProvisionLinkWhereInput[]
    NOT?: ProvisionLinkWhereInput | ProvisionLinkWhereInput[]
    id?: StringFilter<"ProvisionLink"> | string
    userId?: StringFilter<"ProvisionLink"> | string
    createdById?: StringFilter<"ProvisionLink"> | string
    secret?: StringFilter<"ProvisionLink"> | string
    expiresAt?: DateTimeFilter<"ProvisionLink"> | Date | string
    usedAt?: DateTimeNullableFilter<"ProvisionLink"> | Date | string | null
    sasCode?: StringFilter<"ProvisionLink"> | string
    createdAt?: DateTimeFilter<"ProvisionLink"> | Date | string
  }

  export type ProvisionLinkOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    secret?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    sasCode?: SortOrder
    createdAt?: SortOrder
  }

  export type ProvisionLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProvisionLinkWhereInput | ProvisionLinkWhereInput[]
    OR?: ProvisionLinkWhereInput[]
    NOT?: ProvisionLinkWhereInput | ProvisionLinkWhereInput[]
    userId?: StringFilter<"ProvisionLink"> | string
    createdById?: StringFilter<"ProvisionLink"> | string
    secret?: StringFilter<"ProvisionLink"> | string
    expiresAt?: DateTimeFilter<"ProvisionLink"> | Date | string
    usedAt?: DateTimeNullableFilter<"ProvisionLink"> | Date | string | null
    sasCode?: StringFilter<"ProvisionLink"> | string
    createdAt?: DateTimeFilter<"ProvisionLink"> | Date | string
  }, "id">

  export type ProvisionLinkOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    secret?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    sasCode?: SortOrder
    createdAt?: SortOrder
    _count?: ProvisionLinkCountOrderByAggregateInput
    _max?: ProvisionLinkMaxOrderByAggregateInput
    _min?: ProvisionLinkMinOrderByAggregateInput
  }

  export type ProvisionLinkScalarWhereWithAggregatesInput = {
    AND?: ProvisionLinkScalarWhereWithAggregatesInput | ProvisionLinkScalarWhereWithAggregatesInput[]
    OR?: ProvisionLinkScalarWhereWithAggregatesInput[]
    NOT?: ProvisionLinkScalarWhereWithAggregatesInput | ProvisionLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProvisionLink"> | string
    userId?: StringWithAggregatesFilter<"ProvisionLink"> | string
    createdById?: StringWithAggregatesFilter<"ProvisionLink"> | string
    secret?: StringWithAggregatesFilter<"ProvisionLink"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"ProvisionLink"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"ProvisionLink"> | Date | string | null
    sasCode?: StringWithAggregatesFilter<"ProvisionLink"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProvisionLink"> | Date | string
  }

  export type MessageSessionKeyWhereInput = {
    AND?: MessageSessionKeyWhereInput | MessageSessionKeyWhereInput[]
    OR?: MessageSessionKeyWhereInput[]
    NOT?: MessageSessionKeyWhereInput | MessageSessionKeyWhereInput[]
    id?: StringFilter<"MessageSessionKey"> | string
    messageId?: StringFilter<"MessageSessionKey"> | string
    recipientUserId?: StringFilter<"MessageSessionKey"> | string
    recipientDeviceId?: StringFilter<"MessageSessionKey"> | string
    encryptedSessionKey?: StringFilter<"MessageSessionKey"> | string
  }

  export type MessageSessionKeyOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    recipientUserId?: SortOrder
    recipientDeviceId?: SortOrder
    encryptedSessionKey?: SortOrder
  }

  export type MessageSessionKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageSessionKeyWhereInput | MessageSessionKeyWhereInput[]
    OR?: MessageSessionKeyWhereInput[]
    NOT?: MessageSessionKeyWhereInput | MessageSessionKeyWhereInput[]
    messageId?: StringFilter<"MessageSessionKey"> | string
    recipientUserId?: StringFilter<"MessageSessionKey"> | string
    recipientDeviceId?: StringFilter<"MessageSessionKey"> | string
    encryptedSessionKey?: StringFilter<"MessageSessionKey"> | string
  }, "id">

  export type MessageSessionKeyOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    recipientUserId?: SortOrder
    recipientDeviceId?: SortOrder
    encryptedSessionKey?: SortOrder
    _count?: MessageSessionKeyCountOrderByAggregateInput
    _max?: MessageSessionKeyMaxOrderByAggregateInput
    _min?: MessageSessionKeyMinOrderByAggregateInput
  }

  export type MessageSessionKeyScalarWhereWithAggregatesInput = {
    AND?: MessageSessionKeyScalarWhereWithAggregatesInput | MessageSessionKeyScalarWhereWithAggregatesInput[]
    OR?: MessageSessionKeyScalarWhereWithAggregatesInput[]
    NOT?: MessageSessionKeyScalarWhereWithAggregatesInput | MessageSessionKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageSessionKey"> | string
    messageId?: StringWithAggregatesFilter<"MessageSessionKey"> | string
    recipientUserId?: StringWithAggregatesFilter<"MessageSessionKey"> | string
    recipientDeviceId?: StringWithAggregatesFilter<"MessageSessionKey"> | string
    encryptedSessionKey?: StringWithAggregatesFilter<"MessageSessionKey"> | string
  }

  export type ChatRoomInviteWhereInput = {
    AND?: ChatRoomInviteWhereInput | ChatRoomInviteWhereInput[]
    OR?: ChatRoomInviteWhereInput[]
    NOT?: ChatRoomInviteWhereInput | ChatRoomInviteWhereInput[]
    id?: IntFilter<"ChatRoomInvite"> | number
    code?: StringFilter<"ChatRoomInvite"> | string
    chatRoomId?: IntFilter<"ChatRoomInvite"> | number
    createdById?: IntFilter<"ChatRoomInvite"> | number
    maxUses?: IntFilter<"ChatRoomInvite"> | number
    uses?: IntFilter<"ChatRoomInvite"> | number
    expiresAt?: DateTimeNullableFilter<"ChatRoomInvite"> | Date | string | null
    createdAt?: DateTimeFilter<"ChatRoomInvite"> | Date | string
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ChatRoomInviteOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    chatRoom?: ChatRoomOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type ChatRoomInviteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ChatRoomInviteWhereInput | ChatRoomInviteWhereInput[]
    OR?: ChatRoomInviteWhereInput[]
    NOT?: ChatRoomInviteWhereInput | ChatRoomInviteWhereInput[]
    chatRoomId?: IntFilter<"ChatRoomInvite"> | number
    createdById?: IntFilter<"ChatRoomInvite"> | number
    maxUses?: IntFilter<"ChatRoomInvite"> | number
    uses?: IntFilter<"ChatRoomInvite"> | number
    expiresAt?: DateTimeNullableFilter<"ChatRoomInvite"> | Date | string | null
    createdAt?: DateTimeFilter<"ChatRoomInvite"> | Date | string
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "code">

  export type ChatRoomInviteOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatRoomInviteCountOrderByAggregateInput
    _avg?: ChatRoomInviteAvgOrderByAggregateInput
    _max?: ChatRoomInviteMaxOrderByAggregateInput
    _min?: ChatRoomInviteMinOrderByAggregateInput
    _sum?: ChatRoomInviteSumOrderByAggregateInput
  }

  export type ChatRoomInviteScalarWhereWithAggregatesInput = {
    AND?: ChatRoomInviteScalarWhereWithAggregatesInput | ChatRoomInviteScalarWhereWithAggregatesInput[]
    OR?: ChatRoomInviteScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomInviteScalarWhereWithAggregatesInput | ChatRoomInviteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatRoomInvite"> | number
    code?: StringWithAggregatesFilter<"ChatRoomInvite"> | string
    chatRoomId?: IntWithAggregatesFilter<"ChatRoomInvite"> | number
    createdById?: IntWithAggregatesFilter<"ChatRoomInvite"> | number
    maxUses?: IntWithAggregatesFilter<"ChatRoomInvite"> | number
    uses?: IntWithAggregatesFilter<"ChatRoomInvite"> | number
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ChatRoomInvite"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoomInvite"> | Date | string
  }

  export type MessageReactionWhereInput = {
    AND?: MessageReactionWhereInput | MessageReactionWhereInput[]
    OR?: MessageReactionWhereInput[]
    NOT?: MessageReactionWhereInput | MessageReactionWhereInput[]
    messageId?: IntFilter<"MessageReaction"> | number
    userId?: IntFilter<"MessageReaction"> | number
    emoji?: StringFilter<"MessageReaction"> | string
    createdAt?: DateTimeFilter<"MessageReaction"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageReactionOrderByWithRelationInput = {
    messageId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    message?: MessageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MessageReactionWhereUniqueInput = Prisma.AtLeast<{
    messageId_userId_emoji?: MessageReactionMessageIdUserIdEmojiCompoundUniqueInput
    AND?: MessageReactionWhereInput | MessageReactionWhereInput[]
    OR?: MessageReactionWhereInput[]
    NOT?: MessageReactionWhereInput | MessageReactionWhereInput[]
    messageId?: IntFilter<"MessageReaction"> | number
    userId?: IntFilter<"MessageReaction"> | number
    emoji?: StringFilter<"MessageReaction"> | string
    createdAt?: DateTimeFilter<"MessageReaction"> | Date | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "messageId_userId_emoji">

  export type MessageReactionOrderByWithAggregationInput = {
    messageId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    _count?: MessageReactionCountOrderByAggregateInput
    _avg?: MessageReactionAvgOrderByAggregateInput
    _max?: MessageReactionMaxOrderByAggregateInput
    _min?: MessageReactionMinOrderByAggregateInput
    _sum?: MessageReactionSumOrderByAggregateInput
  }

  export type MessageReactionScalarWhereWithAggregatesInput = {
    AND?: MessageReactionScalarWhereWithAggregatesInput | MessageReactionScalarWhereWithAggregatesInput[]
    OR?: MessageReactionScalarWhereWithAggregatesInput[]
    NOT?: MessageReactionScalarWhereWithAggregatesInput | MessageReactionScalarWhereWithAggregatesInput[]
    messageId?: IntWithAggregatesFilter<"MessageReaction"> | number
    userId?: IntWithAggregatesFilter<"MessageReaction"> | number
    emoji?: StringWithAggregatesFilter<"MessageReaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MessageReaction"> | Date | string
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: IntFilter<"Status"> | number
    authorId?: IntFilter<"Status"> | number
    captionCiphertext?: StringNullableFilter<"Status"> | string | null
    encryptedKeys?: JsonNullableFilter<"Status">
    translatedFrom?: StringNullableFilter<"Status"> | string | null
    translations?: JsonNullableFilter<"Status">
    isExplicit?: BoolFilter<"Status"> | boolean
    audience?: EnumStatusAudienceFilter<"Status"> | $Enums.StatusAudience
    expiresAt?: DateTimeFilter<"Status"> | Date | string
    createdAt?: DateTimeFilter<"Status"> | Date | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    assets?: StatusAssetListRelationFilter
    keys?: StatusKeyListRelationFilter
    views?: StatusViewListRelationFilter
    reactions?: StatusReactionListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    captionCiphertext?: SortOrderInput | SortOrder
    encryptedKeys?: SortOrderInput | SortOrder
    translatedFrom?: SortOrderInput | SortOrder
    translations?: SortOrderInput | SortOrder
    isExplicit?: SortOrder
    audience?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    author?: UserOrderByWithRelationInput
    assets?: StatusAssetOrderByRelationAggregateInput
    keys?: StatusKeyOrderByRelationAggregateInput
    views?: StatusViewOrderByRelationAggregateInput
    reactions?: StatusReactionOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    authorId?: IntFilter<"Status"> | number
    captionCiphertext?: StringNullableFilter<"Status"> | string | null
    encryptedKeys?: JsonNullableFilter<"Status">
    translatedFrom?: StringNullableFilter<"Status"> | string | null
    translations?: JsonNullableFilter<"Status">
    isExplicit?: BoolFilter<"Status"> | boolean
    audience?: EnumStatusAudienceFilter<"Status"> | $Enums.StatusAudience
    expiresAt?: DateTimeFilter<"Status"> | Date | string
    createdAt?: DateTimeFilter<"Status"> | Date | string
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    assets?: StatusAssetListRelationFilter
    keys?: StatusKeyListRelationFilter
    views?: StatusViewListRelationFilter
    reactions?: StatusReactionListRelationFilter
  }, "id">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    captionCiphertext?: SortOrderInput | SortOrder
    encryptedKeys?: SortOrderInput | SortOrder
    translatedFrom?: SortOrderInput | SortOrder
    translations?: SortOrderInput | SortOrder
    isExplicit?: SortOrder
    audience?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Status"> | number
    authorId?: IntWithAggregatesFilter<"Status"> | number
    captionCiphertext?: StringNullableWithAggregatesFilter<"Status"> | string | null
    encryptedKeys?: JsonNullableWithAggregatesFilter<"Status">
    translatedFrom?: StringNullableWithAggregatesFilter<"Status"> | string | null
    translations?: JsonNullableWithAggregatesFilter<"Status">
    isExplicit?: BoolWithAggregatesFilter<"Status"> | boolean
    audience?: EnumStatusAudienceWithAggregatesFilter<"Status"> | $Enums.StatusAudience
    expiresAt?: DateTimeWithAggregatesFilter<"Status"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Status"> | Date | string
  }

  export type StatusAssetWhereInput = {
    AND?: StatusAssetWhereInput | StatusAssetWhereInput[]
    OR?: StatusAssetWhereInput[]
    NOT?: StatusAssetWhereInput | StatusAssetWhereInput[]
    id?: IntFilter<"StatusAsset"> | number
    statusId?: IntFilter<"StatusAsset"> | number
    kind?: EnumStatusAssetKindFilter<"StatusAsset"> | $Enums.StatusAssetKind
    url?: StringFilter<"StatusAsset"> | string
    mimeType?: StringFilter<"StatusAsset"> | string
    width?: IntNullableFilter<"StatusAsset"> | number | null
    height?: IntNullableFilter<"StatusAsset"> | number | null
    durationSec?: IntNullableFilter<"StatusAsset"> | number | null
    caption?: StringNullableFilter<"StatusAsset"> | string | null
    createdAt?: DateTimeFilter<"StatusAsset"> | Date | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }

  export type StatusAssetOrderByWithRelationInput = {
    id?: SortOrder
    statusId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    durationSec?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    status?: StatusOrderByWithRelationInput
  }

  export type StatusAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StatusAssetWhereInput | StatusAssetWhereInput[]
    OR?: StatusAssetWhereInput[]
    NOT?: StatusAssetWhereInput | StatusAssetWhereInput[]
    statusId?: IntFilter<"StatusAsset"> | number
    kind?: EnumStatusAssetKindFilter<"StatusAsset"> | $Enums.StatusAssetKind
    url?: StringFilter<"StatusAsset"> | string
    mimeType?: StringFilter<"StatusAsset"> | string
    width?: IntNullableFilter<"StatusAsset"> | number | null
    height?: IntNullableFilter<"StatusAsset"> | number | null
    durationSec?: IntNullableFilter<"StatusAsset"> | number | null
    caption?: StringNullableFilter<"StatusAsset"> | string | null
    createdAt?: DateTimeFilter<"StatusAsset"> | Date | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
  }, "id">

  export type StatusAssetOrderByWithAggregationInput = {
    id?: SortOrder
    statusId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    durationSec?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StatusAssetCountOrderByAggregateInput
    _avg?: StatusAssetAvgOrderByAggregateInput
    _max?: StatusAssetMaxOrderByAggregateInput
    _min?: StatusAssetMinOrderByAggregateInput
    _sum?: StatusAssetSumOrderByAggregateInput
  }

  export type StatusAssetScalarWhereWithAggregatesInput = {
    AND?: StatusAssetScalarWhereWithAggregatesInput | StatusAssetScalarWhereWithAggregatesInput[]
    OR?: StatusAssetScalarWhereWithAggregatesInput[]
    NOT?: StatusAssetScalarWhereWithAggregatesInput | StatusAssetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StatusAsset"> | number
    statusId?: IntWithAggregatesFilter<"StatusAsset"> | number
    kind?: EnumStatusAssetKindWithAggregatesFilter<"StatusAsset"> | $Enums.StatusAssetKind
    url?: StringWithAggregatesFilter<"StatusAsset"> | string
    mimeType?: StringWithAggregatesFilter<"StatusAsset"> | string
    width?: IntNullableWithAggregatesFilter<"StatusAsset"> | number | null
    height?: IntNullableWithAggregatesFilter<"StatusAsset"> | number | null
    durationSec?: IntNullableWithAggregatesFilter<"StatusAsset"> | number | null
    caption?: StringNullableWithAggregatesFilter<"StatusAsset"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StatusAsset"> | Date | string
  }

  export type StatusKeyWhereInput = {
    AND?: StatusKeyWhereInput | StatusKeyWhereInput[]
    OR?: StatusKeyWhereInput[]
    NOT?: StatusKeyWhereInput | StatusKeyWhereInput[]
    statusId?: IntFilter<"StatusKey"> | number
    userId?: IntFilter<"StatusKey"> | number
    encryptedKey?: StringFilter<"StatusKey"> | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StatusKeyOrderByWithRelationInput = {
    statusId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
    status?: StatusOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type StatusKeyWhereUniqueInput = Prisma.AtLeast<{
    statusId_userId?: StatusKeyStatusIdUserIdCompoundUniqueInput
    AND?: StatusKeyWhereInput | StatusKeyWhereInput[]
    OR?: StatusKeyWhereInput[]
    NOT?: StatusKeyWhereInput | StatusKeyWhereInput[]
    statusId?: IntFilter<"StatusKey"> | number
    userId?: IntFilter<"StatusKey"> | number
    encryptedKey?: StringFilter<"StatusKey"> | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "statusId_userId">

  export type StatusKeyOrderByWithAggregationInput = {
    statusId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
    _count?: StatusKeyCountOrderByAggregateInput
    _avg?: StatusKeyAvgOrderByAggregateInput
    _max?: StatusKeyMaxOrderByAggregateInput
    _min?: StatusKeyMinOrderByAggregateInput
    _sum?: StatusKeySumOrderByAggregateInput
  }

  export type StatusKeyScalarWhereWithAggregatesInput = {
    AND?: StatusKeyScalarWhereWithAggregatesInput | StatusKeyScalarWhereWithAggregatesInput[]
    OR?: StatusKeyScalarWhereWithAggregatesInput[]
    NOT?: StatusKeyScalarWhereWithAggregatesInput | StatusKeyScalarWhereWithAggregatesInput[]
    statusId?: IntWithAggregatesFilter<"StatusKey"> | number
    userId?: IntWithAggregatesFilter<"StatusKey"> | number
    encryptedKey?: StringWithAggregatesFilter<"StatusKey"> | string
  }

  export type StatusViewWhereInput = {
    AND?: StatusViewWhereInput | StatusViewWhereInput[]
    OR?: StatusViewWhereInput[]
    NOT?: StatusViewWhereInput | StatusViewWhereInput[]
    id?: IntFilter<"StatusView"> | number
    statusId?: IntFilter<"StatusView"> | number
    viewerId?: IntFilter<"StatusView"> | number
    viewedAt?: DateTimeFilter<"StatusView"> | Date | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    viewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StatusViewOrderByWithRelationInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
    viewedAt?: SortOrder
    status?: StatusOrderByWithRelationInput
    viewer?: UserOrderByWithRelationInput
  }

  export type StatusViewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    statusId_viewerId?: StatusViewStatusIdViewerIdCompoundUniqueInput
    AND?: StatusViewWhereInput | StatusViewWhereInput[]
    OR?: StatusViewWhereInput[]
    NOT?: StatusViewWhereInput | StatusViewWhereInput[]
    statusId?: IntFilter<"StatusView"> | number
    viewerId?: IntFilter<"StatusView"> | number
    viewedAt?: DateTimeFilter<"StatusView"> | Date | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    viewer?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "statusId_viewerId">

  export type StatusViewOrderByWithAggregationInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
    viewedAt?: SortOrder
    _count?: StatusViewCountOrderByAggregateInput
    _avg?: StatusViewAvgOrderByAggregateInput
    _max?: StatusViewMaxOrderByAggregateInput
    _min?: StatusViewMinOrderByAggregateInput
    _sum?: StatusViewSumOrderByAggregateInput
  }

  export type StatusViewScalarWhereWithAggregatesInput = {
    AND?: StatusViewScalarWhereWithAggregatesInput | StatusViewScalarWhereWithAggregatesInput[]
    OR?: StatusViewScalarWhereWithAggregatesInput[]
    NOT?: StatusViewScalarWhereWithAggregatesInput | StatusViewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StatusView"> | number
    statusId?: IntWithAggregatesFilter<"StatusView"> | number
    viewerId?: IntWithAggregatesFilter<"StatusView"> | number
    viewedAt?: DateTimeWithAggregatesFilter<"StatusView"> | Date | string
  }

  export type StatusReactionWhereInput = {
    AND?: StatusReactionWhereInput | StatusReactionWhereInput[]
    OR?: StatusReactionWhereInput[]
    NOT?: StatusReactionWhereInput | StatusReactionWhereInput[]
    statusId?: IntFilter<"StatusReaction"> | number
    userId?: IntFilter<"StatusReaction"> | number
    emoji?: StringFilter<"StatusReaction"> | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StatusReactionOrderByWithRelationInput = {
    statusId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    status?: StatusOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type StatusReactionWhereUniqueInput = Prisma.AtLeast<{
    statusId_userId_emoji?: StatusReactionStatusIdUserIdEmojiCompoundUniqueInput
    AND?: StatusReactionWhereInput | StatusReactionWhereInput[]
    OR?: StatusReactionWhereInput[]
    NOT?: StatusReactionWhereInput | StatusReactionWhereInput[]
    statusId?: IntFilter<"StatusReaction"> | number
    userId?: IntFilter<"StatusReaction"> | number
    emoji?: StringFilter<"StatusReaction"> | string
    status?: XOR<StatusScalarRelationFilter, StatusWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "statusId_userId_emoji">

  export type StatusReactionOrderByWithAggregationInput = {
    statusId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    _count?: StatusReactionCountOrderByAggregateInput
    _avg?: StatusReactionAvgOrderByAggregateInput
    _max?: StatusReactionMaxOrderByAggregateInput
    _min?: StatusReactionMinOrderByAggregateInput
    _sum?: StatusReactionSumOrderByAggregateInput
  }

  export type StatusReactionScalarWhereWithAggregatesInput = {
    AND?: StatusReactionScalarWhereWithAggregatesInput | StatusReactionScalarWhereWithAggregatesInput[]
    OR?: StatusReactionScalarWhereWithAggregatesInput[]
    NOT?: StatusReactionScalarWhereWithAggregatesInput | StatusReactionScalarWhereWithAggregatesInput[]
    statusId?: IntWithAggregatesFilter<"StatusReaction"> | number
    userId?: IntWithAggregatesFilter<"StatusReaction"> | number
    emoji?: StringWithAggregatesFilter<"StatusReaction"> | string
  }

  export type BotWhereInput = {
    AND?: BotWhereInput | BotWhereInput[]
    OR?: BotWhereInput[]
    NOT?: BotWhereInput | BotWhereInput[]
    id?: IntFilter<"Bot"> | number
    ownerId?: IntFilter<"Bot"> | number
    name?: StringFilter<"Bot"> | string
    url?: StringFilter<"Bot"> | string
    secret?: StringFilter<"Bot"> | string
    serviceUserId?: IntNullableFilter<"Bot"> | number | null
    createdAt?: DateTimeFilter<"Bot"> | Date | string
    updatedAt?: DateTimeFilter<"Bot"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    serviceUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    installs?: BotInstallListRelationFilter
  }

  export type BotOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    serviceUserId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    serviceUser?: UserOrderByWithRelationInput
    installs?: BotInstallOrderByRelationAggregateInput
  }

  export type BotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ownerId_name?: BotOwnerIdNameCompoundUniqueInput
    AND?: BotWhereInput | BotWhereInput[]
    OR?: BotWhereInput[]
    NOT?: BotWhereInput | BotWhereInput[]
    ownerId?: IntFilter<"Bot"> | number
    name?: StringFilter<"Bot"> | string
    url?: StringFilter<"Bot"> | string
    secret?: StringFilter<"Bot"> | string
    serviceUserId?: IntNullableFilter<"Bot"> | number | null
    createdAt?: DateTimeFilter<"Bot"> | Date | string
    updatedAt?: DateTimeFilter<"Bot"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    serviceUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    installs?: BotInstallListRelationFilter
  }, "id" | "ownerId_name">

  export type BotOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    serviceUserId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BotCountOrderByAggregateInput
    _avg?: BotAvgOrderByAggregateInput
    _max?: BotMaxOrderByAggregateInput
    _min?: BotMinOrderByAggregateInput
    _sum?: BotSumOrderByAggregateInput
  }

  export type BotScalarWhereWithAggregatesInput = {
    AND?: BotScalarWhereWithAggregatesInput | BotScalarWhereWithAggregatesInput[]
    OR?: BotScalarWhereWithAggregatesInput[]
    NOT?: BotScalarWhereWithAggregatesInput | BotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bot"> | number
    ownerId?: IntWithAggregatesFilter<"Bot"> | number
    name?: StringWithAggregatesFilter<"Bot"> | string
    url?: StringWithAggregatesFilter<"Bot"> | string
    secret?: StringWithAggregatesFilter<"Bot"> | string
    serviceUserId?: IntNullableWithAggregatesFilter<"Bot"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Bot"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bot"> | Date | string
  }

  export type BotInstallWhereInput = {
    AND?: BotInstallWhereInput | BotInstallWhereInput[]
    OR?: BotInstallWhereInput[]
    NOT?: BotInstallWhereInput | BotInstallWhereInput[]
    id?: IntFilter<"BotInstall"> | number
    botId?: IntFilter<"BotInstall"> | number
    chatRoomId?: IntFilter<"BotInstall"> | number
    contentScope?: EnumContentScopeFilter<"BotInstall"> | $Enums.ContentScope
    isEnabled?: BoolFilter<"BotInstall"> | boolean
    scopes?: StringNullableFilter<"BotInstall"> | string | null
    createdAt?: DateTimeFilter<"BotInstall"> | Date | string
    updatedAt?: DateTimeFilter<"BotInstall"> | Date | string
    bot?: XOR<BotScalarRelationFilter, BotWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    events?: BotEventLogListRelationFilter
  }

  export type BotInstallOrderByWithRelationInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
    contentScope?: SortOrder
    isEnabled?: SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bot?: BotOrderByWithRelationInput
    chatRoom?: ChatRoomOrderByWithRelationInput
    events?: BotEventLogOrderByRelationAggregateInput
  }

  export type BotInstallWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    botId_chatRoomId?: BotInstallBotIdChatRoomIdCompoundUniqueInput
    AND?: BotInstallWhereInput | BotInstallWhereInput[]
    OR?: BotInstallWhereInput[]
    NOT?: BotInstallWhereInput | BotInstallWhereInput[]
    botId?: IntFilter<"BotInstall"> | number
    chatRoomId?: IntFilter<"BotInstall"> | number
    contentScope?: EnumContentScopeFilter<"BotInstall"> | $Enums.ContentScope
    isEnabled?: BoolFilter<"BotInstall"> | boolean
    scopes?: StringNullableFilter<"BotInstall"> | string | null
    createdAt?: DateTimeFilter<"BotInstall"> | Date | string
    updatedAt?: DateTimeFilter<"BotInstall"> | Date | string
    bot?: XOR<BotScalarRelationFilter, BotWhereInput>
    chatRoom?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    events?: BotEventLogListRelationFilter
  }, "id" | "botId_chatRoomId">

  export type BotInstallOrderByWithAggregationInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
    contentScope?: SortOrder
    isEnabled?: SortOrder
    scopes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BotInstallCountOrderByAggregateInput
    _avg?: BotInstallAvgOrderByAggregateInput
    _max?: BotInstallMaxOrderByAggregateInput
    _min?: BotInstallMinOrderByAggregateInput
    _sum?: BotInstallSumOrderByAggregateInput
  }

  export type BotInstallScalarWhereWithAggregatesInput = {
    AND?: BotInstallScalarWhereWithAggregatesInput | BotInstallScalarWhereWithAggregatesInput[]
    OR?: BotInstallScalarWhereWithAggregatesInput[]
    NOT?: BotInstallScalarWhereWithAggregatesInput | BotInstallScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BotInstall"> | number
    botId?: IntWithAggregatesFilter<"BotInstall"> | number
    chatRoomId?: IntWithAggregatesFilter<"BotInstall"> | number
    contentScope?: EnumContentScopeWithAggregatesFilter<"BotInstall"> | $Enums.ContentScope
    isEnabled?: BoolWithAggregatesFilter<"BotInstall"> | boolean
    scopes?: StringNullableWithAggregatesFilter<"BotInstall"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BotInstall"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BotInstall"> | Date | string
  }

  export type BotEventLogWhereInput = {
    AND?: BotEventLogWhereInput | BotEventLogWhereInput[]
    OR?: BotEventLogWhereInput[]
    NOT?: BotEventLogWhereInput | BotEventLogWhereInput[]
    id?: IntFilter<"BotEventLog"> | number
    installId?: IntFilter<"BotEventLog"> | number
    eventId?: StringFilter<"BotEventLog"> | string
    type?: StringFilter<"BotEventLog"> | string
    payload?: JsonFilter<"BotEventLog">
    status?: StringFilter<"BotEventLog"> | string
    attempts?: IntFilter<"BotEventLog"> | number
    nextAttemptAt?: DateTimeNullableFilter<"BotEventLog"> | Date | string | null
    lastError?: StringNullableFilter<"BotEventLog"> | string | null
    createdAt?: DateTimeFilter<"BotEventLog"> | Date | string
    updatedAt?: DateTimeFilter<"BotEventLog"> | Date | string
    install?: XOR<BotInstallScalarRelationFilter, BotInstallWhereInput>
  }

  export type BotEventLogOrderByWithRelationInput = {
    id?: SortOrder
    installId?: SortOrder
    eventId?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    nextAttemptAt?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    install?: BotInstallOrderByWithRelationInput
  }

  export type BotEventLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    eventId?: string
    AND?: BotEventLogWhereInput | BotEventLogWhereInput[]
    OR?: BotEventLogWhereInput[]
    NOT?: BotEventLogWhereInput | BotEventLogWhereInput[]
    installId?: IntFilter<"BotEventLog"> | number
    type?: StringFilter<"BotEventLog"> | string
    payload?: JsonFilter<"BotEventLog">
    status?: StringFilter<"BotEventLog"> | string
    attempts?: IntFilter<"BotEventLog"> | number
    nextAttemptAt?: DateTimeNullableFilter<"BotEventLog"> | Date | string | null
    lastError?: StringNullableFilter<"BotEventLog"> | string | null
    createdAt?: DateTimeFilter<"BotEventLog"> | Date | string
    updatedAt?: DateTimeFilter<"BotEventLog"> | Date | string
    install?: XOR<BotInstallScalarRelationFilter, BotInstallWhereInput>
  }, "id" | "eventId">

  export type BotEventLogOrderByWithAggregationInput = {
    id?: SortOrder
    installId?: SortOrder
    eventId?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    nextAttemptAt?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BotEventLogCountOrderByAggregateInput
    _avg?: BotEventLogAvgOrderByAggregateInput
    _max?: BotEventLogMaxOrderByAggregateInput
    _min?: BotEventLogMinOrderByAggregateInput
    _sum?: BotEventLogSumOrderByAggregateInput
  }

  export type BotEventLogScalarWhereWithAggregatesInput = {
    AND?: BotEventLogScalarWhereWithAggregatesInput | BotEventLogScalarWhereWithAggregatesInput[]
    OR?: BotEventLogScalarWhereWithAggregatesInput[]
    NOT?: BotEventLogScalarWhereWithAggregatesInput | BotEventLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BotEventLog"> | number
    installId?: IntWithAggregatesFilter<"BotEventLog"> | number
    eventId?: StringWithAggregatesFilter<"BotEventLog"> | string
    type?: StringWithAggregatesFilter<"BotEventLog"> | string
    payload?: JsonWithAggregatesFilter<"BotEventLog">
    status?: StringWithAggregatesFilter<"BotEventLog"> | string
    attempts?: IntWithAggregatesFilter<"BotEventLog"> | number
    nextAttemptAt?: DateTimeNullableWithAggregatesFilter<"BotEventLog"> | Date | string | null
    lastError?: StringNullableWithAggregatesFilter<"BotEventLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BotEventLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BotEventLog"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatRoomCreateInput = {
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantCreateNestedManyWithoutChatRoomInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantUncheckedCreateNestedManyWithoutChatRoomInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteUncheckedCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUncheckedUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUncheckedUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
  }

  export type ChatRoomUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantCreateInput = {
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
    user: UserCreateNestedOneWithoutParticipantsInput
    chatRoom: ChatRoomCreateNestedOneWithoutParticipantsInput
  }

  export type ParticipantUncheckedCreateInput = {
    id?: number
    userId: number
    chatRoomId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type ParticipantUpdateInput = {
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutParticipantsNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantCreateManyInput = {
    id?: number
    userId: number
    chatRoomId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type ParticipantUpdateManyMutationInput = {
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
  }

  export type MessageUpdateManyMutationInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduledMessageCreateInput = {
    chatRoomId: number
    senderId: number
    content: string
    scheduledAt: Date | string
    createdAt?: Date | string
  }

  export type ScheduledMessageUncheckedCreateInput = {
    id?: number
    chatRoomId: number
    senderId: number
    content: string
    scheduledAt: Date | string
    createdAt?: Date | string
  }

  export type ScheduledMessageUpdateInput = {
    chatRoomId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledMessageCreateManyInput = {
    id?: number
    chatRoomId: number
    senderId: number
    content: string
    scheduledAt: Date | string
    createdAt?: Date | string
  }

  export type ScheduledMessageUpdateManyMutationInput = {
    chatRoomId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduledMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageKeyCreateInput = {
    encryptedKey: string
    message: MessageCreateNestedOneWithoutKeysInput
    user: UserCreateNestedOneWithoutMessageKeysInput
  }

  export type MessageKeyUncheckedCreateInput = {
    messageId: number
    userId: number
    encryptedKey: string
  }

  export type MessageKeyUpdateInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutKeysNestedInput
    user?: UserUpdateOneRequiredWithoutMessageKeysNestedInput
  }

  export type MessageKeyUncheckedUpdateInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageKeyCreateManyInput = {
    messageId: number
    userId: number
    encryptedKey: string
  }

  export type MessageKeyUpdateManyMutationInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageKeyUncheckedUpdateManyInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageAttachmentCreateInput = {
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
    message: MessageCreateNestedOneWithoutAttachmentsInput
  }

  export type MessageAttachmentUncheckedCreateInput = {
    id?: number
    messageId: number
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type MessageAttachmentUpdateInput = {
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type MessageAttachmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageAttachmentCreateManyInput = {
    id?: number
    messageId: number
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type MessageAttachmentUpdateManyMutationInput = {
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageAttachmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RandomChatRoomCreateInput = {
    createdAt?: Date | string
    aiEnabled?: boolean
    participants?: UserCreateNestedManyWithoutRandomChatRoomsInput
    messages?: MessageCreateNestedManyWithoutRandomChatRoomInput
  }

  export type RandomChatRoomUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    aiEnabled?: boolean
    participants?: UserUncheckedCreateNestedManyWithoutRandomChatRoomsInput
    messages?: MessageUncheckedCreateNestedManyWithoutRandomChatRoomInput
  }

  export type RandomChatRoomUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    participants?: UserUpdateManyWithoutRandomChatRoomsNestedInput
    messages?: MessageUpdateManyWithoutRandomChatRoomNestedInput
  }

  export type RandomChatRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    participants?: UserUncheckedUpdateManyWithoutRandomChatRoomsNestedInput
    messages?: MessageUncheckedUpdateManyWithoutRandomChatRoomNestedInput
  }

  export type RandomChatRoomCreateManyInput = {
    id?: number
    createdAt?: Date | string
    aiEnabled?: boolean
  }

  export type RandomChatRoomUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RandomChatRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactCreateInput = {
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutContactsOwnedInput
    user?: UserCreateNestedOneWithoutContactsSavedInput
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    ownerId: number
    userId?: number | null
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type ContactUpdateInput = {
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutContactsOwnedNestedInput
    user?: UserUpdateOneWithoutContactsSavedNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: number
    ownerId: number
    userId?: number | null
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
    message: MessageCreateNestedOneWithoutReportsInput
    reporter: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    messageId: number
    reporterId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type ReportUpdateInput = {
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    message?: MessageUpdateOneRequiredWithoutReportsNestedInput
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCreateManyInput = {
    id?: number
    messageId: number
    reporterId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type ReportUpdateManyMutationInput = {
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateInput = {
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    actor: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    actorId: number
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    actorId: number
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceCreateInput = {
    id?: string
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    user: UserCreateNestedOneWithoutDevicesInput
    revokedBy?: UserCreateNestedOneWithoutDeviceRevocationsInput
  }

  export type DeviceUncheckedCreateInput = {
    id?: string
    userId: number
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    revokedById?: number | null
  }

  export type DeviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
    revokedBy?: UserUpdateOneWithoutDeviceRevocationsNestedInput
  }

  export type DeviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeviceCreateManyInput = {
    id?: string
    userId: number
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    revokedById?: number | null
  }

  export type DeviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DeviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProvisionLinkCreateInput = {
    id?: string
    userId: string
    createdById: string
    secret: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    sasCode: string
    createdAt?: Date | string
  }

  export type ProvisionLinkUncheckedCreateInput = {
    id?: string
    userId: string
    createdById: string
    secret: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    sasCode: string
    createdAt?: Date | string
  }

  export type ProvisionLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sasCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProvisionLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sasCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProvisionLinkCreateManyInput = {
    id?: string
    userId: string
    createdById: string
    secret: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    sasCode: string
    createdAt?: Date | string
  }

  export type ProvisionLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sasCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProvisionLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sasCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageSessionKeyCreateInput = {
    id?: string
    messageId: string
    recipientUserId: string
    recipientDeviceId: string
    encryptedSessionKey: string
  }

  export type MessageSessionKeyUncheckedCreateInput = {
    id?: string
    messageId: string
    recipientUserId: string
    recipientDeviceId: string
    encryptedSessionKey: string
  }

  export type MessageSessionKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    recipientUserId?: StringFieldUpdateOperationsInput | string
    recipientDeviceId?: StringFieldUpdateOperationsInput | string
    encryptedSessionKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageSessionKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    recipientUserId?: StringFieldUpdateOperationsInput | string
    recipientDeviceId?: StringFieldUpdateOperationsInput | string
    encryptedSessionKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageSessionKeyCreateManyInput = {
    id?: string
    messageId: string
    recipientUserId: string
    recipientDeviceId: string
    encryptedSessionKey: string
  }

  export type MessageSessionKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    recipientUserId?: StringFieldUpdateOperationsInput | string
    recipientDeviceId?: StringFieldUpdateOperationsInput | string
    encryptedSessionKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageSessionKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    recipientUserId?: StringFieldUpdateOperationsInput | string
    recipientDeviceId?: StringFieldUpdateOperationsInput | string
    encryptedSessionKey?: StringFieldUpdateOperationsInput | string
  }

  export type ChatRoomInviteCreateInput = {
    code: string
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    chatRoom: ChatRoomCreateNestedOneWithoutInvitesInput
    createdBy: UserCreateNestedOneWithoutCreatedInvitesInput
  }

  export type ChatRoomInviteUncheckedCreateInput = {
    id?: number
    code: string
    chatRoomId: number
    createdById: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ChatRoomInviteUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutInvitesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedInvitesNestedInput
  }

  export type ChatRoomInviteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    chatRoomId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomInviteCreateManyInput = {
    id?: number
    code: string
    chatRoomId: number
    createdById: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ChatRoomInviteUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomInviteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    chatRoomId?: IntFieldUpdateOperationsInput | number
    createdById?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionCreateInput = {
    emoji: string
    createdAt?: Date | string
    message: MessageCreateNestedOneWithoutReactionsInput
    user: UserCreateNestedOneWithoutMessageReactionsInput
  }

  export type MessageReactionUncheckedCreateInput = {
    messageId: number
    userId: number
    emoji: string
    createdAt?: Date | string
  }

  export type MessageReactionUpdateInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutReactionsNestedInput
    user?: UserUpdateOneRequiredWithoutMessageReactionsNestedInput
  }

  export type MessageReactionUncheckedUpdateInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionCreateManyInput = {
    messageId: number
    userId: number
    emoji: string
    createdAt?: Date | string
  }

  export type MessageReactionUpdateManyMutationInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionUncheckedUpdateManyInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCreateInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutStatusesAuthoredInput
    assets?: StatusAssetCreateNestedManyWithoutStatusInput
    keys?: StatusKeyCreateNestedManyWithoutStatusInput
    views?: StatusViewCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetUncheckedCreateNestedManyWithoutStatusInput
    keys?: StatusKeyUncheckedCreateNestedManyWithoutStatusInput
    views?: StatusViewUncheckedCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusUpdateInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput
    assets?: StatusAssetUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUpdateManyWithoutStatusNestedInput
    views?: StatusViewUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUncheckedUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUncheckedUpdateManyWithoutStatusNestedInput
    views?: StatusViewUncheckedUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCreateManyInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type StatusUpdateManyMutationInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusAssetCreateInput = {
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
    status: StatusCreateNestedOneWithoutAssetsInput
  }

  export type StatusAssetUncheckedCreateInput = {
    id?: number
    statusId: number
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type StatusAssetUpdateInput = {
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type StatusAssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusAssetCreateManyInput = {
    id?: number
    statusId: number
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type StatusAssetUpdateManyMutationInput = {
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusAssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusKeyCreateInput = {
    encryptedKey: string
    status: StatusCreateNestedOneWithoutKeysInput
    user: UserCreateNestedOneWithoutStatusKeysInput
  }

  export type StatusKeyUncheckedCreateInput = {
    statusId: number
    userId: number
    encryptedKey: string
  }

  export type StatusKeyUpdateInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateOneRequiredWithoutKeysNestedInput
    user?: UserUpdateOneRequiredWithoutStatusKeysNestedInput
  }

  export type StatusKeyUncheckedUpdateInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusKeyCreateManyInput = {
    statusId: number
    userId: number
    encryptedKey: string
  }

  export type StatusKeyUpdateManyMutationInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusKeyUncheckedUpdateManyInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusViewCreateInput = {
    viewedAt?: Date | string
    status: StatusCreateNestedOneWithoutViewsInput
    viewer: UserCreateNestedOneWithoutStatusViewsInput
  }

  export type StatusViewUncheckedCreateInput = {
    id?: number
    statusId: number
    viewerId: number
    viewedAt?: Date | string
  }

  export type StatusViewUpdateInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUpdateOneRequiredWithoutViewsNestedInput
    viewer?: UserUpdateOneRequiredWithoutStatusViewsNestedInput
  }

  export type StatusViewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusViewCreateManyInput = {
    id?: number
    statusId: number
    viewerId: number
    viewedAt?: Date | string
  }

  export type StatusViewUpdateManyMutationInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusViewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusReactionCreateInput = {
    emoji: string
    status: StatusCreateNestedOneWithoutReactionsInput
    user: UserCreateNestedOneWithoutStatusReactionsInput
  }

  export type StatusReactionUncheckedCreateInput = {
    statusId: number
    userId: number
    emoji: string
  }

  export type StatusReactionUpdateInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateOneRequiredWithoutReactionsNestedInput
    user?: UserUpdateOneRequiredWithoutStatusReactionsNestedInput
  }

  export type StatusReactionUncheckedUpdateInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type StatusReactionCreateManyInput = {
    statusId: number
    userId: number
    emoji: string
  }

  export type StatusReactionUpdateManyMutationInput = {
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type StatusReactionUncheckedUpdateManyInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type BotCreateInput = {
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBotsOwnedInput
    serviceUser?: UserCreateNestedOneWithoutBotsAsServiceInput
    installs?: BotInstallCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateInput = {
    id?: number
    ownerId: number
    name: string
    url: string
    secret: string
    serviceUserId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    installs?: BotInstallUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBotsOwnedNestedInput
    serviceUser?: UserUpdateOneWithoutBotsAsServiceNestedInput
    installs?: BotInstallUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    serviceUserId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    installs?: BotInstallUncheckedUpdateManyWithoutBotNestedInput
  }

  export type BotCreateManyInput = {
    id?: number
    ownerId: number
    name: string
    url: string
    secret: string
    serviceUserId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    serviceUserId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotInstallCreateInput = {
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bot: BotCreateNestedOneWithoutInstallsInput
    chatRoom: ChatRoomCreateNestedOneWithoutBotInstallsInput
    events?: BotEventLogCreateNestedManyWithoutInstallInput
  }

  export type BotInstallUncheckedCreateInput = {
    id?: number
    botId: number
    chatRoomId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: BotEventLogUncheckedCreateNestedManyWithoutInstallInput
  }

  export type BotInstallUpdateInput = {
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bot?: BotUpdateOneRequiredWithoutInstallsNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutBotInstallsNestedInput
    events?: BotEventLogUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    botId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: BotEventLogUncheckedUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallCreateManyInput = {
    id?: number
    botId: number
    chatRoomId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotInstallUpdateManyMutationInput = {
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotInstallUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    botId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogCreateInput = {
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    install: BotInstallCreateNestedOneWithoutEventsInput
  }

  export type BotEventLogUncheckedCreateInput = {
    id?: number
    installId: number
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotEventLogUpdateInput = {
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    install?: BotInstallUpdateOneRequiredWithoutEventsNestedInput
  }

  export type BotEventLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    installId?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogCreateManyInput = {
    id?: number
    installId: number
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotEventLogUpdateManyMutationInput = {
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    installId?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumAutoResponderModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoResponderMode | EnumAutoResponderModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoResponderModeFilter<$PrismaModel> | $Enums.AutoResponderMode
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ParticipantListRelationFilter = {
    every?: ParticipantWhereInput
    some?: ParticipantWhereInput
    none?: ParticipantWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type RandomChatRoomListRelationFilter = {
    every?: RandomChatRoomWhereInput
    some?: RandomChatRoomWhereInput
    none?: RandomChatRoomWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type MessageKeyListRelationFilter = {
    every?: MessageKeyWhereInput
    some?: MessageKeyWhereInput
    none?: MessageKeyWhereInput
  }

  export type DeviceListRelationFilter = {
    every?: DeviceWhereInput
    some?: DeviceWhereInput
    none?: DeviceWhereInput
  }

  export type ChatRoomInviteListRelationFilter = {
    every?: ChatRoomInviteWhereInput
    some?: ChatRoomInviteWhereInput
    none?: ChatRoomInviteWhereInput
  }

  export type MessageReactionListRelationFilter = {
    every?: MessageReactionWhereInput
    some?: MessageReactionWhereInput
    none?: MessageReactionWhereInput
  }

  export type StatusListRelationFilter = {
    every?: StatusWhereInput
    some?: StatusWhereInput
    none?: StatusWhereInput
  }

  export type StatusKeyListRelationFilter = {
    every?: StatusKeyWhereInput
    some?: StatusKeyWhereInput
    none?: StatusKeyWhereInput
  }

  export type StatusViewListRelationFilter = {
    every?: StatusViewWhereInput
    some?: StatusViewWhereInput
    none?: StatusViewWhereInput
  }

  export type StatusReactionListRelationFilter = {
    every?: StatusReactionWhereInput
    some?: StatusReactionWhereInput
    none?: StatusReactionWhereInput
  }

  export type BotListRelationFilter = {
    every?: BotWhereInput
    some?: BotWhereInput
    none?: BotWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RandomChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomInviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    preferredLanguage?: SortOrder
    allowExplicitContent?: SortOrder
    showOriginalWithTranslation?: SortOrder
    role?: SortOrder
    enableAIResponder?: SortOrder
    enableSmartReplies?: SortOrder
    autoResponderMode?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoResponderActiveUntil?: SortOrder
    autoResponderSignature?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    autoDeleteSeconds?: SortOrder
    showReadReceipts?: SortOrder
    avatarUrl?: SortOrder
    emojiTag?: SortOrder
    plan?: SortOrder
    messageTone?: SortOrder
    ringtone?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoDeleteSeconds?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    preferredLanguage?: SortOrder
    allowExplicitContent?: SortOrder
    showOriginalWithTranslation?: SortOrder
    role?: SortOrder
    enableAIResponder?: SortOrder
    enableSmartReplies?: SortOrder
    autoResponderMode?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoResponderActiveUntil?: SortOrder
    autoResponderSignature?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    autoDeleteSeconds?: SortOrder
    showReadReceipts?: SortOrder
    avatarUrl?: SortOrder
    emojiTag?: SortOrder
    plan?: SortOrder
    messageTone?: SortOrder
    ringtone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    preferredLanguage?: SortOrder
    allowExplicitContent?: SortOrder
    showOriginalWithTranslation?: SortOrder
    role?: SortOrder
    enableAIResponder?: SortOrder
    enableSmartReplies?: SortOrder
    autoResponderMode?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoResponderActiveUntil?: SortOrder
    autoResponderSignature?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    autoDeleteSeconds?: SortOrder
    showReadReceipts?: SortOrder
    avatarUrl?: SortOrder
    emojiTag?: SortOrder
    plan?: SortOrder
    messageTone?: SortOrder
    ringtone?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    autoResponderCooldownSec?: SortOrder
    autoDeleteSeconds?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAutoResponderModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoResponderMode | EnumAutoResponderModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoResponderModeWithAggregatesFilter<$PrismaModel> | $Enums.AutoResponderMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAutoResponderModeFilter<$PrismaModel>
    _max?: NestedEnumAutoResponderModeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type EnumAIAssistantModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AIAssistantMode | EnumAIAssistantModeFieldRefInput<$PrismaModel>
    in?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAIAssistantModeFilter<$PrismaModel> | $Enums.AIAssistantMode
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumAutoTranslateModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoTranslateMode | EnumAutoTranslateModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoTranslateModeFilter<$PrismaModel> | $Enums.AutoTranslateMode
  }

  export type BotInstallListRelationFilter = {
    every?: BotInstallWhereInput
    some?: BotInstallWhereInput
    none?: BotInstallWhereInput
  }

  export type BotInstallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aiAssistantMode?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autoTranslateMode?: SortOrder
    allowOrbitBot?: SortOrder
  }

  export type ChatRoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aiAssistantMode?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autoTranslateMode?: SortOrder
    allowOrbitBot?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aiAssistantMode?: SortOrder
    isGroup?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    autoTranslateMode?: SortOrder
    allowOrbitBot?: SortOrder
  }

  export type ChatRoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAIAssistantModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AIAssistantMode | EnumAIAssistantModeFieldRefInput<$PrismaModel>
    in?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAIAssistantModeWithAggregatesFilter<$PrismaModel> | $Enums.AIAssistantMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAIAssistantModeFilter<$PrismaModel>
    _max?: NestedEnumAIAssistantModeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumAutoTranslateModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoTranslateMode | EnumAutoTranslateModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoTranslateModeWithAggregatesFilter<$PrismaModel> | $Enums.AutoTranslateMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAutoTranslateModeFilter<$PrismaModel>
    _max?: NestedEnumAutoTranslateModeFilter<$PrismaModel>
  }

  export type EnumRoomRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomRole | EnumRoomRoleFieldRefInput<$PrismaModel>
    in?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomRoleFilter<$PrismaModel> | $Enums.RoomRole
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ChatRoomScalarRelationFilter = {
    is?: ChatRoomWhereInput
    isNot?: ChatRoomWhereInput
  }

  export type ParticipantUserIdChatRoomIdCompoundUniqueInput = {
    userId: number
    chatRoomId: number
  }

  export type ParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    allowAIBot?: SortOrder
  }

  export type ParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
  }

  export type ParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    allowAIBot?: SortOrder
  }

  export type ParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    allowAIBot?: SortOrder
  }

  export type ParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatRoomId?: SortOrder
  }

  export type EnumRoomRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomRole | EnumRoomRoleFieldRefInput<$PrismaModel>
    in?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomRoleWithAggregatesFilter<$PrismaModel> | $Enums.RoomRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomRoleFilter<$PrismaModel>
    _max?: NestedEnumRoomRoleFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MessageAttachmentListRelationFilter = {
    every?: MessageAttachmentWhereInput
    some?: MessageAttachmentWhereInput
    none?: MessageAttachmentWhereInput
  }

  export type RandomChatRoomNullableScalarRelationFilter = {
    is?: RandomChatRoomWhereInput | null
    isNot?: RandomChatRoomWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type MessageAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    contentCiphertext?: SortOrder
    rawContent?: SortOrder
    translations?: SortOrder
    translatedFrom?: SortOrder
    isExplicit?: SortOrder
    imageUrl?: SortOrder
    audioUrl?: SortOrder
    audioDurationSec?: SortOrder
    expiresAt?: SortOrder
    deletedBySender?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrder
    createdAt?: SortOrder
    isAutoReply?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    audioDurationSec?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    contentCiphertext?: SortOrder
    rawContent?: SortOrder
    translatedFrom?: SortOrder
    isExplicit?: SortOrder
    imageUrl?: SortOrder
    audioUrl?: SortOrder
    audioDurationSec?: SortOrder
    expiresAt?: SortOrder
    deletedBySender?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrder
    createdAt?: SortOrder
    isAutoReply?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    contentCiphertext?: SortOrder
    rawContent?: SortOrder
    translatedFrom?: SortOrder
    isExplicit?: SortOrder
    imageUrl?: SortOrder
    audioUrl?: SortOrder
    audioDurationSec?: SortOrder
    expiresAt?: SortOrder
    deletedBySender?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrder
    createdAt?: SortOrder
    isAutoReply?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    audioDurationSec?: SortOrder
    senderId?: SortOrder
    chatRoomId?: SortOrder
    randomChatRoomId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ScheduledMessageCountOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    scheduledAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduledMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
  }

  export type ScheduledMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    scheduledAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduledMessageMinOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    scheduledAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ScheduledMessageSumOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    senderId?: SortOrder
  }

  export type MessageScalarRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type MessageKeyMessageIdUserIdCompoundUniqueInput = {
    messageId: number
    userId: number
  }

  export type MessageKeyCountOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type MessageKeyAvgOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
  }

  export type MessageKeyMaxOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type MessageKeyMinOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type MessageKeySumOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
  }

  export type EnumAttachmentKindFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentKind | EnumAttachmentKindFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentKindFilter<$PrismaModel> | $Enums.AttachmentKind
  }

  export type MessageAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAttachmentAvgOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
  }

  export type MessageAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAttachmentSumOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
  }

  export type EnumAttachmentKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentKind | EnumAttachmentKindFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentKindWithAggregatesFilter<$PrismaModel> | $Enums.AttachmentKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttachmentKindFilter<$PrismaModel>
    _max?: NestedEnumAttachmentKindFilter<$PrismaModel>
  }

  export type RandomChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    aiEnabled?: SortOrder
  }

  export type RandomChatRoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RandomChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    aiEnabled?: SortOrder
  }

  export type RandomChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    aiEnabled?: SortOrder
  }

  export type RandomChatRoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ContactOwnerIdUserIdCompoundUniqueInput = {
    ownerId: number
    userId: number
  }

  export type ContactOwnerIdExternalPhoneCompoundUniqueInput = {
    ownerId: number
    externalPhone: string
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    externalPhone?: SortOrder
    externalName?: SortOrder
    alias?: SortOrder
    favorite?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    externalPhone?: SortOrder
    externalName?: SortOrder
    alias?: SortOrder
    favorite?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
    externalPhone?: SortOrder
    externalName?: SortOrder
    alias?: SortOrder
    favorite?: SortOrder
    createdAt?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    userId?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
    decryptedContent?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    resolvedAt?: SortOrder
    notes?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
    decryptedContent?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    resolvedAt?: SortOrder
    notes?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
    decryptedContent?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    resolvedAt?: SortOrder
    notes?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    reporterId?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    status?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    status?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    status?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    status?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    status?: SortOrder
  }

  export type DeviceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    name?: SortOrder
    platform?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    lastSeenAt?: SortOrder
    revokedAt?: SortOrder
    revokedById?: SortOrder
  }

  export type DeviceAvgOrderByAggregateInput = {
    userId?: SortOrder
    revokedById?: SortOrder
  }

  export type DeviceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    name?: SortOrder
    platform?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    lastSeenAt?: SortOrder
    revokedAt?: SortOrder
    revokedById?: SortOrder
  }

  export type DeviceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    publicKey?: SortOrder
    name?: SortOrder
    platform?: SortOrder
    isPrimary?: SortOrder
    createdAt?: SortOrder
    lastSeenAt?: SortOrder
    revokedAt?: SortOrder
    revokedById?: SortOrder
  }

  export type DeviceSumOrderByAggregateInput = {
    userId?: SortOrder
    revokedById?: SortOrder
  }

  export type ProvisionLinkCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    secret?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    sasCode?: SortOrder
    createdAt?: SortOrder
  }

  export type ProvisionLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    secret?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    sasCode?: SortOrder
    createdAt?: SortOrder
  }

  export type ProvisionLinkMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdById?: SortOrder
    secret?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    sasCode?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageSessionKeyCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    recipientUserId?: SortOrder
    recipientDeviceId?: SortOrder
    encryptedSessionKey?: SortOrder
  }

  export type MessageSessionKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    recipientUserId?: SortOrder
    recipientDeviceId?: SortOrder
    encryptedSessionKey?: SortOrder
  }

  export type MessageSessionKeyMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    recipientUserId?: SortOrder
    recipientDeviceId?: SortOrder
    encryptedSessionKey?: SortOrder
  }

  export type ChatRoomInviteCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatRoomInviteAvgOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
  }

  export type ChatRoomInviteMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatRoomInviteMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatRoomInviteSumOrderByAggregateInput = {
    id?: SortOrder
    chatRoomId?: SortOrder
    createdById?: SortOrder
    maxUses?: SortOrder
    uses?: SortOrder
  }

  export type MessageReactionMessageIdUserIdEmojiCompoundUniqueInput = {
    messageId: number
    userId: number
    emoji: string
  }

  export type MessageReactionCountOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageReactionAvgOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
  }

  export type MessageReactionMaxOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageReactionMinOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageReactionSumOrderByAggregateInput = {
    messageId?: SortOrder
    userId?: SortOrder
  }

  export type EnumStatusAudienceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAudience | EnumStatusAudienceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAudienceFilter<$PrismaModel> | $Enums.StatusAudience
  }

  export type StatusAssetListRelationFilter = {
    every?: StatusAssetWhereInput
    some?: StatusAssetWhereInput
    none?: StatusAssetWhereInput
  }

  export type StatusAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    captionCiphertext?: SortOrder
    encryptedKeys?: SortOrder
    translatedFrom?: SortOrder
    translations?: SortOrder
    isExplicit?: SortOrder
    audience?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    captionCiphertext?: SortOrder
    translatedFrom?: SortOrder
    isExplicit?: SortOrder
    audience?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    captionCiphertext?: SortOrder
    translatedFrom?: SortOrder
    isExplicit?: SortOrder
    audience?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type EnumStatusAudienceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAudience | EnumStatusAudienceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAudienceWithAggregatesFilter<$PrismaModel> | $Enums.StatusAudience
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusAudienceFilter<$PrismaModel>
    _max?: NestedEnumStatusAudienceFilter<$PrismaModel>
  }

  export type EnumStatusAssetKindFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAssetKind | EnumStatusAssetKindFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAssetKindFilter<$PrismaModel> | $Enums.StatusAssetKind
  }

  export type StatusScalarRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type StatusAssetCountOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusAssetAvgOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
  }

  export type StatusAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusAssetMinOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
  }

  export type StatusAssetSumOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    durationSec?: SortOrder
  }

  export type EnumStatusAssetKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAssetKind | EnumStatusAssetKindFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAssetKindWithAggregatesFilter<$PrismaModel> | $Enums.StatusAssetKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusAssetKindFilter<$PrismaModel>
    _max?: NestedEnumStatusAssetKindFilter<$PrismaModel>
  }

  export type StatusKeyStatusIdUserIdCompoundUniqueInput = {
    statusId: number
    userId: number
  }

  export type StatusKeyCountOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type StatusKeyAvgOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
  }

  export type StatusKeyMaxOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type StatusKeyMinOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    encryptedKey?: SortOrder
  }

  export type StatusKeySumOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
  }

  export type StatusViewStatusIdViewerIdCompoundUniqueInput = {
    statusId: number
    viewerId: number
  }

  export type StatusViewCountOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
    viewedAt?: SortOrder
  }

  export type StatusViewAvgOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
  }

  export type StatusViewMaxOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
    viewedAt?: SortOrder
  }

  export type StatusViewMinOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
    viewedAt?: SortOrder
  }

  export type StatusViewSumOrderByAggregateInput = {
    id?: SortOrder
    statusId?: SortOrder
    viewerId?: SortOrder
  }

  export type StatusReactionStatusIdUserIdEmojiCompoundUniqueInput = {
    statusId: number
    userId: number
    emoji: string
  }

  export type StatusReactionCountOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
  }

  export type StatusReactionAvgOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
  }

  export type StatusReactionMaxOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
  }

  export type StatusReactionMinOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
  }

  export type StatusReactionSumOrderByAggregateInput = {
    statusId?: SortOrder
    userId?: SortOrder
  }

  export type BotOwnerIdNameCompoundUniqueInput = {
    ownerId: number
    name: string
  }

  export type BotCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    serviceUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    serviceUserId?: SortOrder
  }

  export type BotMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    serviceUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    secret?: SortOrder
    serviceUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    serviceUserId?: SortOrder
  }

  export type EnumContentScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentScope | EnumContentScopeFieldRefInput<$PrismaModel>
    in?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumContentScopeFilter<$PrismaModel> | $Enums.ContentScope
  }

  export type BotScalarRelationFilter = {
    is?: BotWhereInput
    isNot?: BotWhereInput
  }

  export type BotEventLogListRelationFilter = {
    every?: BotEventLogWhereInput
    some?: BotEventLogWhereInput
    none?: BotEventLogWhereInput
  }

  export type BotEventLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BotInstallBotIdChatRoomIdCompoundUniqueInput = {
    botId: number
    chatRoomId: number
  }

  export type BotInstallCountOrderByAggregateInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
    contentScope?: SortOrder
    isEnabled?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotInstallAvgOrderByAggregateInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
  }

  export type BotInstallMaxOrderByAggregateInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
    contentScope?: SortOrder
    isEnabled?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotInstallMinOrderByAggregateInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
    contentScope?: SortOrder
    isEnabled?: SortOrder
    scopes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotInstallSumOrderByAggregateInput = {
    id?: SortOrder
    botId?: SortOrder
    chatRoomId?: SortOrder
  }

  export type EnumContentScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentScope | EnumContentScopeFieldRefInput<$PrismaModel>
    in?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumContentScopeWithAggregatesFilter<$PrismaModel> | $Enums.ContentScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContentScopeFilter<$PrismaModel>
    _max?: NestedEnumContentScopeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BotInstallScalarRelationFilter = {
    is?: BotInstallWhereInput
    isNot?: BotInstallWhereInput
  }

  export type BotEventLogCountOrderByAggregateInput = {
    id?: SortOrder
    installId?: SortOrder
    eventId?: SortOrder
    type?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    nextAttemptAt?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotEventLogAvgOrderByAggregateInput = {
    id?: SortOrder
    installId?: SortOrder
    attempts?: SortOrder
  }

  export type BotEventLogMaxOrderByAggregateInput = {
    id?: SortOrder
    installId?: SortOrder
    eventId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    nextAttemptAt?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotEventLogMinOrderByAggregateInput = {
    id?: SortOrder
    installId?: SortOrder
    eventId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    nextAttemptAt?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BotEventLogSumOrderByAggregateInput = {
    id?: SortOrder
    installId?: SortOrder
    attempts?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput> | ParticipantCreateWithoutUserInput[] | ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutUserInput | ParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ParticipantCreateManyUserInputEnvelope
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type RandomChatRoomCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput> | RandomChatRoomCreateWithoutParticipantsInput[] | RandomChatRoomUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutParticipantsInput | RandomChatRoomCreateOrConnectWithoutParticipantsInput[]
    connect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReadByInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput> | ContactCreateWithoutOwnerInput[] | ContactUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOwnerInput | ContactCreateOrConnectWithoutOwnerInput[]
    createMany?: ContactCreateManyOwnerInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type MessageKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput> | MessageKeyCreateWithoutUserInput[] | MessageKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutUserInput | MessageKeyCreateOrConnectWithoutUserInput[]
    createMany?: MessageKeyCreateManyUserInputEnvelope
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
  }

  export type DeviceCreateNestedManyWithoutUserInput = {
    create?: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput> | DeviceCreateWithoutUserInput[] | DeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutUserInput | DeviceCreateOrConnectWithoutUserInput[]
    createMany?: DeviceCreateManyUserInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type DeviceCreateNestedManyWithoutRevokedByInput = {
    create?: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput> | DeviceCreateWithoutRevokedByInput[] | DeviceUncheckedCreateWithoutRevokedByInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutRevokedByInput | DeviceCreateOrConnectWithoutRevokedByInput[]
    createMany?: DeviceCreateManyRevokedByInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type ChatRoomInviteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput> | ChatRoomInviteCreateWithoutCreatedByInput[] | ChatRoomInviteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutCreatedByInput | ChatRoomInviteCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChatRoomInviteCreateManyCreatedByInputEnvelope
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
  }

  export type MessageReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput> | MessageReactionCreateWithoutUserInput[] | MessageReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutUserInput | MessageReactionCreateOrConnectWithoutUserInput[]
    createMany?: MessageReactionCreateManyUserInputEnvelope
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
  }

  export type StatusCreateNestedManyWithoutAuthorInput = {
    create?: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput> | StatusCreateWithoutAuthorInput[] | StatusUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: StatusCreateOrConnectWithoutAuthorInput | StatusCreateOrConnectWithoutAuthorInput[]
    createMany?: StatusCreateManyAuthorInputEnvelope
    connect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
  }

  export type StatusKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput> | StatusKeyCreateWithoutUserInput[] | StatusKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutUserInput | StatusKeyCreateOrConnectWithoutUserInput[]
    createMany?: StatusKeyCreateManyUserInputEnvelope
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
  }

  export type StatusViewCreateNestedManyWithoutViewerInput = {
    create?: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput> | StatusViewCreateWithoutViewerInput[] | StatusViewUncheckedCreateWithoutViewerInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutViewerInput | StatusViewCreateOrConnectWithoutViewerInput[]
    createMany?: StatusViewCreateManyViewerInputEnvelope
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
  }

  export type StatusReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput> | StatusReactionCreateWithoutUserInput[] | StatusReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutUserInput | StatusReactionCreateOrConnectWithoutUserInput[]
    createMany?: StatusReactionCreateManyUserInputEnvelope
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
  }

  export type BotCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput> | BotCreateWithoutOwnerInput[] | BotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BotCreateOrConnectWithoutOwnerInput | BotCreateOrConnectWithoutOwnerInput[]
    createMany?: BotCreateManyOwnerInputEnvelope
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
  }

  export type BotCreateNestedManyWithoutServiceUserInput = {
    create?: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput> | BotCreateWithoutServiceUserInput[] | BotUncheckedCreateWithoutServiceUserInput[]
    connectOrCreate?: BotCreateOrConnectWithoutServiceUserInput | BotCreateOrConnectWithoutServiceUserInput[]
    createMany?: BotCreateManyServiceUserInputEnvelope
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput> | ParticipantCreateWithoutUserInput[] | ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutUserInput | ParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ParticipantCreateManyUserInputEnvelope
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput> | RandomChatRoomCreateWithoutParticipantsInput[] | RandomChatRoomUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutParticipantsInput | RandomChatRoomCreateOrConnectWithoutParticipantsInput[]
    connect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReadByInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput> | ContactCreateWithoutOwnerInput[] | ContactUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOwnerInput | ContactCreateOrConnectWithoutOwnerInput[]
    createMany?: ContactCreateManyOwnerInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type MessageKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput> | MessageKeyCreateWithoutUserInput[] | MessageKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutUserInput | MessageKeyCreateOrConnectWithoutUserInput[]
    createMany?: MessageKeyCreateManyUserInputEnvelope
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
  }

  export type DeviceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput> | DeviceCreateWithoutUserInput[] | DeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutUserInput | DeviceCreateOrConnectWithoutUserInput[]
    createMany?: DeviceCreateManyUserInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type DeviceUncheckedCreateNestedManyWithoutRevokedByInput = {
    create?: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput> | DeviceCreateWithoutRevokedByInput[] | DeviceUncheckedCreateWithoutRevokedByInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutRevokedByInput | DeviceCreateOrConnectWithoutRevokedByInput[]
    createMany?: DeviceCreateManyRevokedByInputEnvelope
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
  }

  export type ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput> | ChatRoomInviteCreateWithoutCreatedByInput[] | ChatRoomInviteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutCreatedByInput | ChatRoomInviteCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChatRoomInviteCreateManyCreatedByInputEnvelope
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
  }

  export type MessageReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput> | MessageReactionCreateWithoutUserInput[] | MessageReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutUserInput | MessageReactionCreateOrConnectWithoutUserInput[]
    createMany?: MessageReactionCreateManyUserInputEnvelope
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
  }

  export type StatusUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput> | StatusCreateWithoutAuthorInput[] | StatusUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: StatusCreateOrConnectWithoutAuthorInput | StatusCreateOrConnectWithoutAuthorInput[]
    createMany?: StatusCreateManyAuthorInputEnvelope
    connect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
  }

  export type StatusKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput> | StatusKeyCreateWithoutUserInput[] | StatusKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutUserInput | StatusKeyCreateOrConnectWithoutUserInput[]
    createMany?: StatusKeyCreateManyUserInputEnvelope
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
  }

  export type StatusViewUncheckedCreateNestedManyWithoutViewerInput = {
    create?: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput> | StatusViewCreateWithoutViewerInput[] | StatusViewUncheckedCreateWithoutViewerInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutViewerInput | StatusViewCreateOrConnectWithoutViewerInput[]
    createMany?: StatusViewCreateManyViewerInputEnvelope
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
  }

  export type StatusReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput> | StatusReactionCreateWithoutUserInput[] | StatusReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutUserInput | StatusReactionCreateOrConnectWithoutUserInput[]
    createMany?: StatusReactionCreateManyUserInputEnvelope
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
  }

  export type BotUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput> | BotCreateWithoutOwnerInput[] | BotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BotCreateOrConnectWithoutOwnerInput | BotCreateOrConnectWithoutOwnerInput[]
    createMany?: BotCreateManyOwnerInputEnvelope
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
  }

  export type BotUncheckedCreateNestedManyWithoutServiceUserInput = {
    create?: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput> | BotCreateWithoutServiceUserInput[] | BotUncheckedCreateWithoutServiceUserInput[]
    connectOrCreate?: BotCreateOrConnectWithoutServiceUserInput | BotCreateOrConnectWithoutServiceUserInput[]
    createMany?: BotCreateManyServiceUserInputEnvelope
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumAutoResponderModeFieldUpdateOperationsInput = {
    set?: $Enums.AutoResponderMode
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPlanFieldUpdateOperationsInput = {
    set?: $Enums.Plan
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput> | ParticipantCreateWithoutUserInput[] | ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutUserInput | ParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ParticipantUpsertWithWhereUniqueWithoutUserInput | ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParticipantCreateManyUserInputEnvelope
    set?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    disconnect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    delete?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    update?: ParticipantUpdateWithWhereUniqueWithoutUserInput | ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParticipantUpdateManyWithWhereWithoutUserInput | ParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type RandomChatRoomUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput> | RandomChatRoomCreateWithoutParticipantsInput[] | RandomChatRoomUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutParticipantsInput | RandomChatRoomCreateOrConnectWithoutParticipantsInput[]
    upsert?: RandomChatRoomUpsertWithWhereUniqueWithoutParticipantsInput | RandomChatRoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    disconnect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    delete?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    connect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    update?: RandomChatRoomUpdateWithWhereUniqueWithoutParticipantsInput | RandomChatRoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: RandomChatRoomUpdateManyWithWhereWithoutParticipantsInput | RandomChatRoomUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: RandomChatRoomScalarWhereInput | RandomChatRoomScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReadByNestedInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReadByInput | MessageUpsertWithWhereUniqueWithoutReadByInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReadByInput | MessageUpdateWithWhereUniqueWithoutReadByInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReadByInput | MessageUpdateManyWithWhereWithoutReadByInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput> | ContactCreateWithoutOwnerInput[] | ContactUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOwnerInput | ContactCreateOrConnectWithoutOwnerInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutOwnerInput | ContactUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ContactCreateManyOwnerInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutOwnerInput | ContactUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutOwnerInput | ContactUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type MessageKeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput> | MessageKeyCreateWithoutUserInput[] | MessageKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutUserInput | MessageKeyCreateOrConnectWithoutUserInput[]
    upsert?: MessageKeyUpsertWithWhereUniqueWithoutUserInput | MessageKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageKeyCreateManyUserInputEnvelope
    set?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    disconnect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    delete?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    update?: MessageKeyUpdateWithWhereUniqueWithoutUserInput | MessageKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageKeyUpdateManyWithWhereWithoutUserInput | MessageKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
  }

  export type DeviceUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput> | DeviceCreateWithoutUserInput[] | DeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutUserInput | DeviceCreateOrConnectWithoutUserInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutUserInput | DeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeviceCreateManyUserInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutUserInput | DeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutUserInput | DeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type DeviceUpdateManyWithoutRevokedByNestedInput = {
    create?: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput> | DeviceCreateWithoutRevokedByInput[] | DeviceUncheckedCreateWithoutRevokedByInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutRevokedByInput | DeviceCreateOrConnectWithoutRevokedByInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutRevokedByInput | DeviceUpsertWithWhereUniqueWithoutRevokedByInput[]
    createMany?: DeviceCreateManyRevokedByInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutRevokedByInput | DeviceUpdateWithWhereUniqueWithoutRevokedByInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutRevokedByInput | DeviceUpdateManyWithWhereWithoutRevokedByInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type ChatRoomInviteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput> | ChatRoomInviteCreateWithoutCreatedByInput[] | ChatRoomInviteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutCreatedByInput | ChatRoomInviteCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChatRoomInviteUpsertWithWhereUniqueWithoutCreatedByInput | ChatRoomInviteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChatRoomInviteCreateManyCreatedByInputEnvelope
    set?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    disconnect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    delete?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    update?: ChatRoomInviteUpdateWithWhereUniqueWithoutCreatedByInput | ChatRoomInviteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChatRoomInviteUpdateManyWithWhereWithoutCreatedByInput | ChatRoomInviteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
  }

  export type MessageReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput> | MessageReactionCreateWithoutUserInput[] | MessageReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutUserInput | MessageReactionCreateOrConnectWithoutUserInput[]
    upsert?: MessageReactionUpsertWithWhereUniqueWithoutUserInput | MessageReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageReactionCreateManyUserInputEnvelope
    set?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    disconnect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    delete?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    update?: MessageReactionUpdateWithWhereUniqueWithoutUserInput | MessageReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageReactionUpdateManyWithWhereWithoutUserInput | MessageReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
  }

  export type StatusUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput> | StatusCreateWithoutAuthorInput[] | StatusUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: StatusCreateOrConnectWithoutAuthorInput | StatusCreateOrConnectWithoutAuthorInput[]
    upsert?: StatusUpsertWithWhereUniqueWithoutAuthorInput | StatusUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: StatusCreateManyAuthorInputEnvelope
    set?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    disconnect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    delete?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    connect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    update?: StatusUpdateWithWhereUniqueWithoutAuthorInput | StatusUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: StatusUpdateManyWithWhereWithoutAuthorInput | StatusUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: StatusScalarWhereInput | StatusScalarWhereInput[]
  }

  export type StatusKeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput> | StatusKeyCreateWithoutUserInput[] | StatusKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutUserInput | StatusKeyCreateOrConnectWithoutUserInput[]
    upsert?: StatusKeyUpsertWithWhereUniqueWithoutUserInput | StatusKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StatusKeyCreateManyUserInputEnvelope
    set?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    disconnect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    delete?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    update?: StatusKeyUpdateWithWhereUniqueWithoutUserInput | StatusKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StatusKeyUpdateManyWithWhereWithoutUserInput | StatusKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
  }

  export type StatusViewUpdateManyWithoutViewerNestedInput = {
    create?: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput> | StatusViewCreateWithoutViewerInput[] | StatusViewUncheckedCreateWithoutViewerInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutViewerInput | StatusViewCreateOrConnectWithoutViewerInput[]
    upsert?: StatusViewUpsertWithWhereUniqueWithoutViewerInput | StatusViewUpsertWithWhereUniqueWithoutViewerInput[]
    createMany?: StatusViewCreateManyViewerInputEnvelope
    set?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    disconnect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    delete?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    update?: StatusViewUpdateWithWhereUniqueWithoutViewerInput | StatusViewUpdateWithWhereUniqueWithoutViewerInput[]
    updateMany?: StatusViewUpdateManyWithWhereWithoutViewerInput | StatusViewUpdateManyWithWhereWithoutViewerInput[]
    deleteMany?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
  }

  export type StatusReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput> | StatusReactionCreateWithoutUserInput[] | StatusReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutUserInput | StatusReactionCreateOrConnectWithoutUserInput[]
    upsert?: StatusReactionUpsertWithWhereUniqueWithoutUserInput | StatusReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StatusReactionCreateManyUserInputEnvelope
    set?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    disconnect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    delete?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    update?: StatusReactionUpdateWithWhereUniqueWithoutUserInput | StatusReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StatusReactionUpdateManyWithWhereWithoutUserInput | StatusReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
  }

  export type BotUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput> | BotCreateWithoutOwnerInput[] | BotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BotCreateOrConnectWithoutOwnerInput | BotCreateOrConnectWithoutOwnerInput[]
    upsert?: BotUpsertWithWhereUniqueWithoutOwnerInput | BotUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BotCreateManyOwnerInputEnvelope
    set?: BotWhereUniqueInput | BotWhereUniqueInput[]
    disconnect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    delete?: BotWhereUniqueInput | BotWhereUniqueInput[]
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    update?: BotUpdateWithWhereUniqueWithoutOwnerInput | BotUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BotUpdateManyWithWhereWithoutOwnerInput | BotUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BotScalarWhereInput | BotScalarWhereInput[]
  }

  export type BotUpdateManyWithoutServiceUserNestedInput = {
    create?: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput> | BotCreateWithoutServiceUserInput[] | BotUncheckedCreateWithoutServiceUserInput[]
    connectOrCreate?: BotCreateOrConnectWithoutServiceUserInput | BotCreateOrConnectWithoutServiceUserInput[]
    upsert?: BotUpsertWithWhereUniqueWithoutServiceUserInput | BotUpsertWithWhereUniqueWithoutServiceUserInput[]
    createMany?: BotCreateManyServiceUserInputEnvelope
    set?: BotWhereUniqueInput | BotWhereUniqueInput[]
    disconnect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    delete?: BotWhereUniqueInput | BotWhereUniqueInput[]
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    update?: BotUpdateWithWhereUniqueWithoutServiceUserInput | BotUpdateWithWhereUniqueWithoutServiceUserInput[]
    updateMany?: BotUpdateManyWithWhereWithoutServiceUserInput | BotUpdateManyWithWhereWithoutServiceUserInput[]
    deleteMany?: BotScalarWhereInput | BotScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput> | ParticipantCreateWithoutUserInput[] | ParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutUserInput | ParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ParticipantUpsertWithWhereUniqueWithoutUserInput | ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ParticipantCreateManyUserInputEnvelope
    set?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    disconnect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    delete?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    update?: ParticipantUpdateWithWhereUniqueWithoutUserInput | ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ParticipantUpdateManyWithWhereWithoutUserInput | ParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput> | ReportCreateWithoutReporterInput[] | ReportUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutReporterInput | ReportCreateOrConnectWithoutReporterInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutReporterInput | ReportUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: ReportCreateManyReporterInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutReporterInput | ReportUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutReporterInput | ReportUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput> | RandomChatRoomCreateWithoutParticipantsInput[] | RandomChatRoomUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutParticipantsInput | RandomChatRoomCreateOrConnectWithoutParticipantsInput[]
    upsert?: RandomChatRoomUpsertWithWhereUniqueWithoutParticipantsInput | RandomChatRoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    disconnect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    delete?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    connect?: RandomChatRoomWhereUniqueInput | RandomChatRoomWhereUniqueInput[]
    update?: RandomChatRoomUpdateWithWhereUniqueWithoutParticipantsInput | RandomChatRoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: RandomChatRoomUpdateManyWithWhereWithoutParticipantsInput | RandomChatRoomUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: RandomChatRoomScalarWhereInput | RandomChatRoomScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReadByNestedInput = {
    create?: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput> | MessageCreateWithoutReadByInput[] | MessageUncheckedCreateWithoutReadByInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReadByInput | MessageCreateOrConnectWithoutReadByInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReadByInput | MessageUpsertWithWhereUniqueWithoutReadByInput[]
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReadByInput | MessageUpdateWithWhereUniqueWithoutReadByInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReadByInput | MessageUpdateManyWithWhereWithoutReadByInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput> | ContactCreateWithoutOwnerInput[] | ContactUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOwnerInput | ContactCreateOrConnectWithoutOwnerInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutOwnerInput | ContactUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ContactCreateManyOwnerInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutOwnerInput | ContactUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutOwnerInput | ContactUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type MessageKeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput> | MessageKeyCreateWithoutUserInput[] | MessageKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutUserInput | MessageKeyCreateOrConnectWithoutUserInput[]
    upsert?: MessageKeyUpsertWithWhereUniqueWithoutUserInput | MessageKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageKeyCreateManyUserInputEnvelope
    set?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    disconnect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    delete?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    update?: MessageKeyUpdateWithWhereUniqueWithoutUserInput | MessageKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageKeyUpdateManyWithWhereWithoutUserInput | MessageKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
  }

  export type DeviceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput> | DeviceCreateWithoutUserInput[] | DeviceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutUserInput | DeviceCreateOrConnectWithoutUserInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutUserInput | DeviceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeviceCreateManyUserInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutUserInput | DeviceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutUserInput | DeviceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type DeviceUncheckedUpdateManyWithoutRevokedByNestedInput = {
    create?: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput> | DeviceCreateWithoutRevokedByInput[] | DeviceUncheckedCreateWithoutRevokedByInput[]
    connectOrCreate?: DeviceCreateOrConnectWithoutRevokedByInput | DeviceCreateOrConnectWithoutRevokedByInput[]
    upsert?: DeviceUpsertWithWhereUniqueWithoutRevokedByInput | DeviceUpsertWithWhereUniqueWithoutRevokedByInput[]
    createMany?: DeviceCreateManyRevokedByInputEnvelope
    set?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    disconnect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    delete?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    connect?: DeviceWhereUniqueInput | DeviceWhereUniqueInput[]
    update?: DeviceUpdateWithWhereUniqueWithoutRevokedByInput | DeviceUpdateWithWhereUniqueWithoutRevokedByInput[]
    updateMany?: DeviceUpdateManyWithWhereWithoutRevokedByInput | DeviceUpdateManyWithWhereWithoutRevokedByInput[]
    deleteMany?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
  }

  export type ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput> | ChatRoomInviteCreateWithoutCreatedByInput[] | ChatRoomInviteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutCreatedByInput | ChatRoomInviteCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChatRoomInviteUpsertWithWhereUniqueWithoutCreatedByInput | ChatRoomInviteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChatRoomInviteCreateManyCreatedByInputEnvelope
    set?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    disconnect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    delete?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    update?: ChatRoomInviteUpdateWithWhereUniqueWithoutCreatedByInput | ChatRoomInviteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChatRoomInviteUpdateManyWithWhereWithoutCreatedByInput | ChatRoomInviteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
  }

  export type MessageReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput> | MessageReactionCreateWithoutUserInput[] | MessageReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutUserInput | MessageReactionCreateOrConnectWithoutUserInput[]
    upsert?: MessageReactionUpsertWithWhereUniqueWithoutUserInput | MessageReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageReactionCreateManyUserInputEnvelope
    set?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    disconnect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    delete?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    update?: MessageReactionUpdateWithWhereUniqueWithoutUserInput | MessageReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageReactionUpdateManyWithWhereWithoutUserInput | MessageReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
  }

  export type StatusUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput> | StatusCreateWithoutAuthorInput[] | StatusUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: StatusCreateOrConnectWithoutAuthorInput | StatusCreateOrConnectWithoutAuthorInput[]
    upsert?: StatusUpsertWithWhereUniqueWithoutAuthorInput | StatusUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: StatusCreateManyAuthorInputEnvelope
    set?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    disconnect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    delete?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    connect?: StatusWhereUniqueInput | StatusWhereUniqueInput[]
    update?: StatusUpdateWithWhereUniqueWithoutAuthorInput | StatusUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: StatusUpdateManyWithWhereWithoutAuthorInput | StatusUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: StatusScalarWhereInput | StatusScalarWhereInput[]
  }

  export type StatusKeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput> | StatusKeyCreateWithoutUserInput[] | StatusKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutUserInput | StatusKeyCreateOrConnectWithoutUserInput[]
    upsert?: StatusKeyUpsertWithWhereUniqueWithoutUserInput | StatusKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StatusKeyCreateManyUserInputEnvelope
    set?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    disconnect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    delete?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    update?: StatusKeyUpdateWithWhereUniqueWithoutUserInput | StatusKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StatusKeyUpdateManyWithWhereWithoutUserInput | StatusKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
  }

  export type StatusViewUncheckedUpdateManyWithoutViewerNestedInput = {
    create?: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput> | StatusViewCreateWithoutViewerInput[] | StatusViewUncheckedCreateWithoutViewerInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutViewerInput | StatusViewCreateOrConnectWithoutViewerInput[]
    upsert?: StatusViewUpsertWithWhereUniqueWithoutViewerInput | StatusViewUpsertWithWhereUniqueWithoutViewerInput[]
    createMany?: StatusViewCreateManyViewerInputEnvelope
    set?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    disconnect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    delete?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    update?: StatusViewUpdateWithWhereUniqueWithoutViewerInput | StatusViewUpdateWithWhereUniqueWithoutViewerInput[]
    updateMany?: StatusViewUpdateManyWithWhereWithoutViewerInput | StatusViewUpdateManyWithWhereWithoutViewerInput[]
    deleteMany?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
  }

  export type StatusReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput> | StatusReactionCreateWithoutUserInput[] | StatusReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutUserInput | StatusReactionCreateOrConnectWithoutUserInput[]
    upsert?: StatusReactionUpsertWithWhereUniqueWithoutUserInput | StatusReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StatusReactionCreateManyUserInputEnvelope
    set?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    disconnect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    delete?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    update?: StatusReactionUpdateWithWhereUniqueWithoutUserInput | StatusReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StatusReactionUpdateManyWithWhereWithoutUserInput | StatusReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
  }

  export type BotUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput> | BotCreateWithoutOwnerInput[] | BotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BotCreateOrConnectWithoutOwnerInput | BotCreateOrConnectWithoutOwnerInput[]
    upsert?: BotUpsertWithWhereUniqueWithoutOwnerInput | BotUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BotCreateManyOwnerInputEnvelope
    set?: BotWhereUniqueInput | BotWhereUniqueInput[]
    disconnect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    delete?: BotWhereUniqueInput | BotWhereUniqueInput[]
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    update?: BotUpdateWithWhereUniqueWithoutOwnerInput | BotUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BotUpdateManyWithWhereWithoutOwnerInput | BotUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BotScalarWhereInput | BotScalarWhereInput[]
  }

  export type BotUncheckedUpdateManyWithoutServiceUserNestedInput = {
    create?: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput> | BotCreateWithoutServiceUserInput[] | BotUncheckedCreateWithoutServiceUserInput[]
    connectOrCreate?: BotCreateOrConnectWithoutServiceUserInput | BotCreateOrConnectWithoutServiceUserInput[]
    upsert?: BotUpsertWithWhereUniqueWithoutServiceUserInput | BotUpsertWithWhereUniqueWithoutServiceUserInput[]
    createMany?: BotCreateManyServiceUserInputEnvelope
    set?: BotWhereUniqueInput | BotWhereUniqueInput[]
    disconnect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    delete?: BotWhereUniqueInput | BotWhereUniqueInput[]
    connect?: BotWhereUniqueInput | BotWhereUniqueInput[]
    update?: BotUpdateWithWhereUniqueWithoutServiceUserInput | BotUpdateWithWhereUniqueWithoutServiceUserInput[]
    updateMany?: BotUpdateManyWithWhereWithoutServiceUserInput | BotUpdateManyWithWhereWithoutServiceUserInput[]
    deleteMany?: BotScalarWhereInput | BotScalarWhereInput[]
  }

  export type ParticipantCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput> | ParticipantCreateWithoutChatRoomInput[] | ParticipantUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutChatRoomInput | ParticipantCreateOrConnectWithoutChatRoomInput[]
    createMany?: ParticipantCreateManyChatRoomInputEnvelope
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChatRoomInviteCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput> | ChatRoomInviteCreateWithoutChatRoomInput[] | ChatRoomInviteUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutChatRoomInput | ChatRoomInviteCreateOrConnectWithoutChatRoomInput[]
    createMany?: ChatRoomInviteCreateManyChatRoomInputEnvelope
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
  }

  export type BotInstallCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput> | BotInstallCreateWithoutChatRoomInput[] | BotInstallUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutChatRoomInput | BotInstallCreateOrConnectWithoutChatRoomInput[]
    createMany?: BotInstallCreateManyChatRoomInputEnvelope
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
  }

  export type ParticipantUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput> | ParticipantCreateWithoutChatRoomInput[] | ParticipantUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutChatRoomInput | ParticipantCreateOrConnectWithoutChatRoomInput[]
    createMany?: ParticipantCreateManyChatRoomInputEnvelope
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChatRoomInviteUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput> | ChatRoomInviteCreateWithoutChatRoomInput[] | ChatRoomInviteUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutChatRoomInput | ChatRoomInviteCreateOrConnectWithoutChatRoomInput[]
    createMany?: ChatRoomInviteCreateManyChatRoomInputEnvelope
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
  }

  export type BotInstallUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput> | BotInstallCreateWithoutChatRoomInput[] | BotInstallUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutChatRoomInput | BotInstallCreateOrConnectWithoutChatRoomInput[]
    createMany?: BotInstallCreateManyChatRoomInputEnvelope
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
  }

  export type EnumAIAssistantModeFieldUpdateOperationsInput = {
    set?: $Enums.AIAssistantMode
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumAutoTranslateModeFieldUpdateOperationsInput = {
    set?: $Enums.AutoTranslateMode
  }

  export type ParticipantUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput> | ParticipantCreateWithoutChatRoomInput[] | ParticipantUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutChatRoomInput | ParticipantCreateOrConnectWithoutChatRoomInput[]
    upsert?: ParticipantUpsertWithWhereUniqueWithoutChatRoomInput | ParticipantUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ParticipantCreateManyChatRoomInputEnvelope
    set?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    disconnect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    delete?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    update?: ParticipantUpdateWithWhereUniqueWithoutChatRoomInput | ParticipantUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ParticipantUpdateManyWithWhereWithoutChatRoomInput | ParticipantUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput | MessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput | MessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomInput | MessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatRoomInviteUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput> | ChatRoomInviteCreateWithoutChatRoomInput[] | ChatRoomInviteUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutChatRoomInput | ChatRoomInviteCreateOrConnectWithoutChatRoomInput[]
    upsert?: ChatRoomInviteUpsertWithWhereUniqueWithoutChatRoomInput | ChatRoomInviteUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ChatRoomInviteCreateManyChatRoomInputEnvelope
    set?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    disconnect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    delete?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    update?: ChatRoomInviteUpdateWithWhereUniqueWithoutChatRoomInput | ChatRoomInviteUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ChatRoomInviteUpdateManyWithWhereWithoutChatRoomInput | ChatRoomInviteUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
  }

  export type BotInstallUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput> | BotInstallCreateWithoutChatRoomInput[] | BotInstallUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutChatRoomInput | BotInstallCreateOrConnectWithoutChatRoomInput[]
    upsert?: BotInstallUpsertWithWhereUniqueWithoutChatRoomInput | BotInstallUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: BotInstallCreateManyChatRoomInputEnvelope
    set?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    disconnect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    delete?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    update?: BotInstallUpdateWithWhereUniqueWithoutChatRoomInput | BotInstallUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: BotInstallUpdateManyWithWhereWithoutChatRoomInput | BotInstallUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
  }

  export type ParticipantUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput> | ParticipantCreateWithoutChatRoomInput[] | ParticipantUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ParticipantCreateOrConnectWithoutChatRoomInput | ParticipantCreateOrConnectWithoutChatRoomInput[]
    upsert?: ParticipantUpsertWithWhereUniqueWithoutChatRoomInput | ParticipantUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ParticipantCreateManyChatRoomInputEnvelope
    set?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    disconnect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    delete?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    connect?: ParticipantWhereUniqueInput | ParticipantWhereUniqueInput[]
    update?: ParticipantUpdateWithWhereUniqueWithoutChatRoomInput | ParticipantUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ParticipantUpdateManyWithWhereWithoutChatRoomInput | ParticipantUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput> | MessageCreateWithoutChatRoomInput[] | MessageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatRoomInput | MessageCreateOrConnectWithoutChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatRoomInput | MessageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: MessageCreateManyChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatRoomInput | MessageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatRoomInput | MessageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatRoomInviteUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput> | ChatRoomInviteCreateWithoutChatRoomInput[] | ChatRoomInviteUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: ChatRoomInviteCreateOrConnectWithoutChatRoomInput | ChatRoomInviteCreateOrConnectWithoutChatRoomInput[]
    upsert?: ChatRoomInviteUpsertWithWhereUniqueWithoutChatRoomInput | ChatRoomInviteUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: ChatRoomInviteCreateManyChatRoomInputEnvelope
    set?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    disconnect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    delete?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    connect?: ChatRoomInviteWhereUniqueInput | ChatRoomInviteWhereUniqueInput[]
    update?: ChatRoomInviteUpdateWithWhereUniqueWithoutChatRoomInput | ChatRoomInviteUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: ChatRoomInviteUpdateManyWithWhereWithoutChatRoomInput | ChatRoomInviteUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
  }

  export type BotInstallUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput> | BotInstallCreateWithoutChatRoomInput[] | BotInstallUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutChatRoomInput | BotInstallCreateOrConnectWithoutChatRoomInput[]
    upsert?: BotInstallUpsertWithWhereUniqueWithoutChatRoomInput | BotInstallUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: BotInstallCreateManyChatRoomInputEnvelope
    set?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    disconnect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    delete?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    update?: BotInstallUpdateWithWhereUniqueWithoutChatRoomInput | BotInstallUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: BotInstallUpdateManyWithWhereWithoutChatRoomInput | BotInstallUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatRoomCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutParticipantsInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type EnumRoomRoleFieldUpdateOperationsInput = {
    set?: $Enums.RoomRole
  }

  export type UserUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantsInput
    upsert?: UserUpsertWithoutParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipantsInput, UserUpdateWithoutParticipantsInput>, UserUncheckedUpdateWithoutParticipantsInput>
  }

  export type ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutParticipantsInput
    upsert?: ChatRoomUpsertWithoutParticipantsInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutParticipantsInput, ChatRoomUpdateWithoutParticipantsInput>, ChatRoomUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type MessageKeyCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput> | MessageKeyCreateWithoutMessageInput[] | MessageKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutMessageInput | MessageKeyCreateOrConnectWithoutMessageInput[]
    createMany?: MessageKeyCreateManyMessageInputEnvelope
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
  }

  export type MessageAttachmentCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput> | MessageAttachmentCreateWithoutMessageInput[] | MessageAttachmentUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageAttachmentCreateOrConnectWithoutMessageInput | MessageAttachmentCreateOrConnectWithoutMessageInput[]
    createMany?: MessageAttachmentCreateManyMessageInputEnvelope
    connect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
  }

  export type RandomChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<RandomChatRoomCreateWithoutMessagesInput, RandomChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutMessagesInput
    connect?: RandomChatRoomWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReadMessagesInput = {
    create?: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput> | UserCreateWithoutReadMessagesInput[] | UserUncheckedCreateWithoutReadMessagesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReadMessagesInput | UserCreateOrConnectWithoutReadMessagesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutMessageInput = {
    create?: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput> | ReportCreateWithoutMessageInput[] | ReportUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutMessageInput | ReportCreateOrConnectWithoutMessageInput[]
    createMany?: ReportCreateManyMessageInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type MessageReactionCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput> | MessageReactionCreateWithoutMessageInput[] | MessageReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutMessageInput | MessageReactionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReactionCreateManyMessageInputEnvelope
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
  }

  export type MessageKeyUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput> | MessageKeyCreateWithoutMessageInput[] | MessageKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutMessageInput | MessageKeyCreateOrConnectWithoutMessageInput[]
    createMany?: MessageKeyCreateManyMessageInputEnvelope
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
  }

  export type MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput> | MessageAttachmentCreateWithoutMessageInput[] | MessageAttachmentUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageAttachmentCreateOrConnectWithoutMessageInput | MessageAttachmentCreateOrConnectWithoutMessageInput[]
    createMany?: MessageAttachmentCreateManyMessageInputEnvelope
    connect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReadMessagesInput = {
    create?: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput> | UserCreateWithoutReadMessagesInput[] | UserUncheckedCreateWithoutReadMessagesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReadMessagesInput | UserCreateOrConnectWithoutReadMessagesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput> | ReportCreateWithoutMessageInput[] | ReportUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutMessageInput | ReportCreateOrConnectWithoutMessageInput[]
    createMany?: ReportCreateManyMessageInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type MessageReactionUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput> | MessageReactionCreateWithoutMessageInput[] | MessageReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutMessageInput | MessageReactionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageReactionCreateManyMessageInputEnvelope
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageKeyUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput> | MessageKeyCreateWithoutMessageInput[] | MessageKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutMessageInput | MessageKeyCreateOrConnectWithoutMessageInput[]
    upsert?: MessageKeyUpsertWithWhereUniqueWithoutMessageInput | MessageKeyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageKeyCreateManyMessageInputEnvelope
    set?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    disconnect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    delete?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    update?: MessageKeyUpdateWithWhereUniqueWithoutMessageInput | MessageKeyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageKeyUpdateManyWithWhereWithoutMessageInput | MessageKeyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
  }

  export type MessageAttachmentUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput> | MessageAttachmentCreateWithoutMessageInput[] | MessageAttachmentUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageAttachmentCreateOrConnectWithoutMessageInput | MessageAttachmentCreateOrConnectWithoutMessageInput[]
    upsert?: MessageAttachmentUpsertWithWhereUniqueWithoutMessageInput | MessageAttachmentUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageAttachmentCreateManyMessageInputEnvelope
    set?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    disconnect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    delete?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    connect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    update?: MessageAttachmentUpdateWithWhereUniqueWithoutMessageInput | MessageAttachmentUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageAttachmentUpdateManyWithWhereWithoutMessageInput | MessageAttachmentUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageAttachmentScalarWhereInput | MessageAttachmentScalarWhereInput[]
  }

  export type RandomChatRoomUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<RandomChatRoomCreateWithoutMessagesInput, RandomChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RandomChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: RandomChatRoomUpsertWithoutMessagesInput
    disconnect?: RandomChatRoomWhereInput | boolean
    delete?: RandomChatRoomWhereInput | boolean
    connect?: RandomChatRoomWhereUniqueInput
    update?: XOR<XOR<RandomChatRoomUpdateToOneWithWhereWithoutMessagesInput, RandomChatRoomUpdateWithoutMessagesInput>, RandomChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateManyWithoutReadMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput> | UserCreateWithoutReadMessagesInput[] | UserUncheckedCreateWithoutReadMessagesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReadMessagesInput | UserCreateOrConnectWithoutReadMessagesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReadMessagesInput | UserUpsertWithWhereUniqueWithoutReadMessagesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReadMessagesInput | UserUpdateWithWhereUniqueWithoutReadMessagesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReadMessagesInput | UserUpdateManyWithWhereWithoutReadMessagesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput> | ReportCreateWithoutMessageInput[] | ReportUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutMessageInput | ReportCreateOrConnectWithoutMessageInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutMessageInput | ReportUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ReportCreateManyMessageInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutMessageInput | ReportUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutMessageInput | ReportUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type MessageReactionUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput> | MessageReactionCreateWithoutMessageInput[] | MessageReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutMessageInput | MessageReactionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReactionUpsertWithWhereUniqueWithoutMessageInput | MessageReactionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReactionCreateManyMessageInputEnvelope
    set?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    disconnect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    delete?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    update?: MessageReactionUpdateWithWhereUniqueWithoutMessageInput | MessageReactionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReactionUpdateManyWithWhereWithoutMessageInput | MessageReactionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
  }

  export type MessageKeyUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput> | MessageKeyCreateWithoutMessageInput[] | MessageKeyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageKeyCreateOrConnectWithoutMessageInput | MessageKeyCreateOrConnectWithoutMessageInput[]
    upsert?: MessageKeyUpsertWithWhereUniqueWithoutMessageInput | MessageKeyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageKeyCreateManyMessageInputEnvelope
    set?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    disconnect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    delete?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    connect?: MessageKeyWhereUniqueInput | MessageKeyWhereUniqueInput[]
    update?: MessageKeyUpdateWithWhereUniqueWithoutMessageInput | MessageKeyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageKeyUpdateManyWithWhereWithoutMessageInput | MessageKeyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
  }

  export type MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput> | MessageAttachmentCreateWithoutMessageInput[] | MessageAttachmentUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageAttachmentCreateOrConnectWithoutMessageInput | MessageAttachmentCreateOrConnectWithoutMessageInput[]
    upsert?: MessageAttachmentUpsertWithWhereUniqueWithoutMessageInput | MessageAttachmentUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageAttachmentCreateManyMessageInputEnvelope
    set?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    disconnect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    delete?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    connect?: MessageAttachmentWhereUniqueInput | MessageAttachmentWhereUniqueInput[]
    update?: MessageAttachmentUpdateWithWhereUniqueWithoutMessageInput | MessageAttachmentUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageAttachmentUpdateManyWithWhereWithoutMessageInput | MessageAttachmentUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageAttachmentScalarWhereInput | MessageAttachmentScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReadMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput> | UserCreateWithoutReadMessagesInput[] | UserUncheckedCreateWithoutReadMessagesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReadMessagesInput | UserCreateOrConnectWithoutReadMessagesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReadMessagesInput | UserUpsertWithWhereUniqueWithoutReadMessagesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReadMessagesInput | UserUpdateWithWhereUniqueWithoutReadMessagesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReadMessagesInput | UserUpdateManyWithWhereWithoutReadMessagesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput> | ReportCreateWithoutMessageInput[] | ReportUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutMessageInput | ReportCreateOrConnectWithoutMessageInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutMessageInput | ReportUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ReportCreateManyMessageInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutMessageInput | ReportUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutMessageInput | ReportUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type MessageReactionUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput> | MessageReactionCreateWithoutMessageInput[] | MessageReactionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageReactionCreateOrConnectWithoutMessageInput | MessageReactionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageReactionUpsertWithWhereUniqueWithoutMessageInput | MessageReactionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageReactionCreateManyMessageInputEnvelope
    set?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    disconnect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    delete?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    connect?: MessageReactionWhereUniqueInput | MessageReactionWhereUniqueInput[]
    update?: MessageReactionUpdateWithWhereUniqueWithoutMessageInput | MessageReactionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageReactionUpdateManyWithWhereWithoutMessageInput | MessageReactionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutKeysInput = {
    create?: XOR<MessageCreateWithoutKeysInput, MessageUncheckedCreateWithoutKeysInput>
    connectOrCreate?: MessageCreateOrConnectWithoutKeysInput
    connect?: MessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessageKeysInput = {
    create?: XOR<UserCreateWithoutMessageKeysInput, UserUncheckedCreateWithoutMessageKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageKeysInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<MessageCreateWithoutKeysInput, MessageUncheckedCreateWithoutKeysInput>
    connectOrCreate?: MessageCreateOrConnectWithoutKeysInput
    upsert?: MessageUpsertWithoutKeysInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutKeysInput, MessageUpdateWithoutKeysInput>, MessageUncheckedUpdateWithoutKeysInput>
  }

  export type UserUpdateOneRequiredWithoutMessageKeysNestedInput = {
    create?: XOR<UserCreateWithoutMessageKeysInput, UserUncheckedCreateWithoutMessageKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageKeysInput
    upsert?: UserUpsertWithoutMessageKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageKeysInput, UserUpdateWithoutMessageKeysInput>, UserUncheckedUpdateWithoutMessageKeysInput>
  }

  export type MessageCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput
    connect?: MessageWhereUniqueInput
  }

  export type EnumAttachmentKindFieldUpdateOperationsInput = {
    set?: $Enums.AttachmentKind
  }

  export type MessageUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutAttachmentsInput
    upsert?: MessageUpsertWithoutAttachmentsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutAttachmentsInput, MessageUpdateWithoutAttachmentsInput>, MessageUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserCreateNestedManyWithoutRandomChatRoomsInput = {
    create?: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput> | UserCreateWithoutRandomChatRoomsInput[] | UserUncheckedCreateWithoutRandomChatRoomsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRandomChatRoomsInput | UserCreateOrConnectWithoutRandomChatRoomsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutRandomChatRoomInput = {
    create?: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput> | MessageCreateWithoutRandomChatRoomInput[] | MessageUncheckedCreateWithoutRandomChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRandomChatRoomInput | MessageCreateOrConnectWithoutRandomChatRoomInput[]
    createMany?: MessageCreateManyRandomChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRandomChatRoomsInput = {
    create?: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput> | UserCreateWithoutRandomChatRoomsInput[] | UserUncheckedCreateWithoutRandomChatRoomsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRandomChatRoomsInput | UserCreateOrConnectWithoutRandomChatRoomsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutRandomChatRoomInput = {
    create?: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput> | MessageCreateWithoutRandomChatRoomInput[] | MessageUncheckedCreateWithoutRandomChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRandomChatRoomInput | MessageCreateOrConnectWithoutRandomChatRoomInput[]
    createMany?: MessageCreateManyRandomChatRoomInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRandomChatRoomsNestedInput = {
    create?: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput> | UserCreateWithoutRandomChatRoomsInput[] | UserUncheckedCreateWithoutRandomChatRoomsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRandomChatRoomsInput | UserCreateOrConnectWithoutRandomChatRoomsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRandomChatRoomsInput | UserUpsertWithWhereUniqueWithoutRandomChatRoomsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRandomChatRoomsInput | UserUpdateWithWhereUniqueWithoutRandomChatRoomsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRandomChatRoomsInput | UserUpdateManyWithWhereWithoutRandomChatRoomsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutRandomChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput> | MessageCreateWithoutRandomChatRoomInput[] | MessageUncheckedCreateWithoutRandomChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRandomChatRoomInput | MessageCreateOrConnectWithoutRandomChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutRandomChatRoomInput | MessageUpsertWithWhereUniqueWithoutRandomChatRoomInput[]
    createMany?: MessageCreateManyRandomChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutRandomChatRoomInput | MessageUpdateWithWhereUniqueWithoutRandomChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutRandomChatRoomInput | MessageUpdateManyWithWhereWithoutRandomChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRandomChatRoomsNestedInput = {
    create?: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput> | UserCreateWithoutRandomChatRoomsInput[] | UserUncheckedCreateWithoutRandomChatRoomsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRandomChatRoomsInput | UserCreateOrConnectWithoutRandomChatRoomsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRandomChatRoomsInput | UserUpsertWithWhereUniqueWithoutRandomChatRoomsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRandomChatRoomsInput | UserUpdateWithWhereUniqueWithoutRandomChatRoomsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRandomChatRoomsInput | UserUpdateManyWithWhereWithoutRandomChatRoomsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutRandomChatRoomNestedInput = {
    create?: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput> | MessageCreateWithoutRandomChatRoomInput[] | MessageUncheckedCreateWithoutRandomChatRoomInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutRandomChatRoomInput | MessageCreateOrConnectWithoutRandomChatRoomInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutRandomChatRoomInput | MessageUpsertWithWhereUniqueWithoutRandomChatRoomInput[]
    createMany?: MessageCreateManyRandomChatRoomInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutRandomChatRoomInput | MessageUpdateWithWhereUniqueWithoutRandomChatRoomInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutRandomChatRoomInput | MessageUpdateManyWithWhereWithoutRandomChatRoomInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContactsOwnedInput = {
    create?: XOR<UserCreateWithoutContactsOwnedInput, UserUncheckedCreateWithoutContactsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutContactsSavedInput = {
    create?: XOR<UserCreateWithoutContactsSavedInput, UserUncheckedCreateWithoutContactsSavedInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsSavedInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutContactsOwnedNestedInput = {
    create?: XOR<UserCreateWithoutContactsOwnedInput, UserUncheckedCreateWithoutContactsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsOwnedInput
    upsert?: UserUpsertWithoutContactsOwnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsOwnedInput, UserUpdateWithoutContactsOwnedInput>, UserUncheckedUpdateWithoutContactsOwnedInput>
  }

  export type UserUpdateOneWithoutContactsSavedNestedInput = {
    create?: XOR<UserCreateWithoutContactsSavedInput, UserUncheckedCreateWithoutContactsSavedInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsSavedInput
    upsert?: UserUpsertWithoutContactsSavedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsSavedInput, UserUpdateWithoutContactsSavedInput>, UserUncheckedUpdateWithoutContactsSavedInput>
  }

  export type MessageCreateNestedOneWithoutReportsInput = {
    create?: XOR<MessageCreateWithoutReportsInput, MessageUncheckedCreateWithoutReportsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReportsInput
    connect?: MessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<MessageCreateWithoutReportsInput, MessageUncheckedCreateWithoutReportsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReportsInput
    upsert?: MessageUpsertWithoutReportsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutReportsInput, MessageUpdateWithoutReportsInput>, MessageUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutDevicesInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDeviceRevocationsInput = {
    create?: XOR<UserCreateWithoutDeviceRevocationsInput, UserUncheckedCreateWithoutDeviceRevocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeviceRevocationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDevicesInput
    upsert?: UserUpsertWithoutDevicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDevicesInput, UserUpdateWithoutDevicesInput>, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserUpdateOneWithoutDeviceRevocationsNestedInput = {
    create?: XOR<UserCreateWithoutDeviceRevocationsInput, UserUncheckedCreateWithoutDeviceRevocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeviceRevocationsInput
    upsert?: UserUpsertWithoutDeviceRevocationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeviceRevocationsInput, UserUpdateWithoutDeviceRevocationsInput>, UserUncheckedUpdateWithoutDeviceRevocationsInput>
  }

  export type ChatRoomCreateNestedOneWithoutInvitesInput = {
    create?: XOR<ChatRoomCreateWithoutInvitesInput, ChatRoomUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutInvitesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedInvitesInput = {
    create?: XOR<UserCreateWithoutCreatedInvitesInput, UserUncheckedCreateWithoutCreatedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatRoomUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutInvitesInput, ChatRoomUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutInvitesInput
    upsert?: ChatRoomUpsertWithoutInvitesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutInvitesInput, ChatRoomUpdateWithoutInvitesInput>, ChatRoomUncheckedUpdateWithoutInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedInvitesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedInvitesInput, UserUncheckedCreateWithoutCreatedInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedInvitesInput
    upsert?: UserUpsertWithoutCreatedInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedInvitesInput, UserUpdateWithoutCreatedInvitesInput>, UserUncheckedUpdateWithoutCreatedInvitesInput>
  }

  export type MessageCreateNestedOneWithoutReactionsInput = {
    create?: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReactionsInput
    connect?: MessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessageReactionsInput = {
    create?: XOR<UserCreateWithoutMessageReactionsInput, UserUncheckedCreateWithoutMessageReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageReactionsInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutReactionsInput
    upsert?: MessageUpsertWithoutReactionsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutReactionsInput, MessageUpdateWithoutReactionsInput>, MessageUncheckedUpdateWithoutReactionsInput>
  }

  export type UserUpdateOneRequiredWithoutMessageReactionsNestedInput = {
    create?: XOR<UserCreateWithoutMessageReactionsInput, UserUncheckedCreateWithoutMessageReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageReactionsInput
    upsert?: UserUpsertWithoutMessageReactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageReactionsInput, UserUpdateWithoutMessageReactionsInput>, UserUncheckedUpdateWithoutMessageReactionsInput>
  }

  export type UserCreateNestedOneWithoutStatusesAuthoredInput = {
    create?: XOR<UserCreateWithoutStatusesAuthoredInput, UserUncheckedCreateWithoutStatusesAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusesAuthoredInput
    connect?: UserWhereUniqueInput
  }

  export type StatusAssetCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput> | StatusAssetCreateWithoutStatusInput[] | StatusAssetUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusAssetCreateOrConnectWithoutStatusInput | StatusAssetCreateOrConnectWithoutStatusInput[]
    createMany?: StatusAssetCreateManyStatusInputEnvelope
    connect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
  }

  export type StatusKeyCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput> | StatusKeyCreateWithoutStatusInput[] | StatusKeyUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutStatusInput | StatusKeyCreateOrConnectWithoutStatusInput[]
    createMany?: StatusKeyCreateManyStatusInputEnvelope
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
  }

  export type StatusViewCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput> | StatusViewCreateWithoutStatusInput[] | StatusViewUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutStatusInput | StatusViewCreateOrConnectWithoutStatusInput[]
    createMany?: StatusViewCreateManyStatusInputEnvelope
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
  }

  export type StatusReactionCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput> | StatusReactionCreateWithoutStatusInput[] | StatusReactionUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutStatusInput | StatusReactionCreateOrConnectWithoutStatusInput[]
    createMany?: StatusReactionCreateManyStatusInputEnvelope
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
  }

  export type StatusAssetUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput> | StatusAssetCreateWithoutStatusInput[] | StatusAssetUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusAssetCreateOrConnectWithoutStatusInput | StatusAssetCreateOrConnectWithoutStatusInput[]
    createMany?: StatusAssetCreateManyStatusInputEnvelope
    connect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
  }

  export type StatusKeyUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput> | StatusKeyCreateWithoutStatusInput[] | StatusKeyUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutStatusInput | StatusKeyCreateOrConnectWithoutStatusInput[]
    createMany?: StatusKeyCreateManyStatusInputEnvelope
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
  }

  export type StatusViewUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput> | StatusViewCreateWithoutStatusInput[] | StatusViewUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutStatusInput | StatusViewCreateOrConnectWithoutStatusInput[]
    createMany?: StatusViewCreateManyStatusInputEnvelope
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
  }

  export type StatusReactionUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput> | StatusReactionCreateWithoutStatusInput[] | StatusReactionUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutStatusInput | StatusReactionCreateOrConnectWithoutStatusInput[]
    createMany?: StatusReactionCreateManyStatusInputEnvelope
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
  }

  export type EnumStatusAudienceFieldUpdateOperationsInput = {
    set?: $Enums.StatusAudience
  }

  export type UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput = {
    create?: XOR<UserCreateWithoutStatusesAuthoredInput, UserUncheckedCreateWithoutStatusesAuthoredInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusesAuthoredInput
    upsert?: UserUpsertWithoutStatusesAuthoredInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusesAuthoredInput, UserUpdateWithoutStatusesAuthoredInput>, UserUncheckedUpdateWithoutStatusesAuthoredInput>
  }

  export type StatusAssetUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput> | StatusAssetCreateWithoutStatusInput[] | StatusAssetUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusAssetCreateOrConnectWithoutStatusInput | StatusAssetCreateOrConnectWithoutStatusInput[]
    upsert?: StatusAssetUpsertWithWhereUniqueWithoutStatusInput | StatusAssetUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusAssetCreateManyStatusInputEnvelope
    set?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    disconnect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    delete?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    connect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    update?: StatusAssetUpdateWithWhereUniqueWithoutStatusInput | StatusAssetUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusAssetUpdateManyWithWhereWithoutStatusInput | StatusAssetUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusAssetScalarWhereInput | StatusAssetScalarWhereInput[]
  }

  export type StatusKeyUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput> | StatusKeyCreateWithoutStatusInput[] | StatusKeyUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutStatusInput | StatusKeyCreateOrConnectWithoutStatusInput[]
    upsert?: StatusKeyUpsertWithWhereUniqueWithoutStatusInput | StatusKeyUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusKeyCreateManyStatusInputEnvelope
    set?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    disconnect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    delete?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    update?: StatusKeyUpdateWithWhereUniqueWithoutStatusInput | StatusKeyUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusKeyUpdateManyWithWhereWithoutStatusInput | StatusKeyUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
  }

  export type StatusViewUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput> | StatusViewCreateWithoutStatusInput[] | StatusViewUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutStatusInput | StatusViewCreateOrConnectWithoutStatusInput[]
    upsert?: StatusViewUpsertWithWhereUniqueWithoutStatusInput | StatusViewUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusViewCreateManyStatusInputEnvelope
    set?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    disconnect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    delete?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    update?: StatusViewUpdateWithWhereUniqueWithoutStatusInput | StatusViewUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusViewUpdateManyWithWhereWithoutStatusInput | StatusViewUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
  }

  export type StatusReactionUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput> | StatusReactionCreateWithoutStatusInput[] | StatusReactionUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutStatusInput | StatusReactionCreateOrConnectWithoutStatusInput[]
    upsert?: StatusReactionUpsertWithWhereUniqueWithoutStatusInput | StatusReactionUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusReactionCreateManyStatusInputEnvelope
    set?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    disconnect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    delete?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    update?: StatusReactionUpdateWithWhereUniqueWithoutStatusInput | StatusReactionUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusReactionUpdateManyWithWhereWithoutStatusInput | StatusReactionUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
  }

  export type StatusAssetUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput> | StatusAssetCreateWithoutStatusInput[] | StatusAssetUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusAssetCreateOrConnectWithoutStatusInput | StatusAssetCreateOrConnectWithoutStatusInput[]
    upsert?: StatusAssetUpsertWithWhereUniqueWithoutStatusInput | StatusAssetUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusAssetCreateManyStatusInputEnvelope
    set?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    disconnect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    delete?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    connect?: StatusAssetWhereUniqueInput | StatusAssetWhereUniqueInput[]
    update?: StatusAssetUpdateWithWhereUniqueWithoutStatusInput | StatusAssetUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusAssetUpdateManyWithWhereWithoutStatusInput | StatusAssetUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusAssetScalarWhereInput | StatusAssetScalarWhereInput[]
  }

  export type StatusKeyUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput> | StatusKeyCreateWithoutStatusInput[] | StatusKeyUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusKeyCreateOrConnectWithoutStatusInput | StatusKeyCreateOrConnectWithoutStatusInput[]
    upsert?: StatusKeyUpsertWithWhereUniqueWithoutStatusInput | StatusKeyUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusKeyCreateManyStatusInputEnvelope
    set?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    disconnect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    delete?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    connect?: StatusKeyWhereUniqueInput | StatusKeyWhereUniqueInput[]
    update?: StatusKeyUpdateWithWhereUniqueWithoutStatusInput | StatusKeyUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusKeyUpdateManyWithWhereWithoutStatusInput | StatusKeyUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
  }

  export type StatusViewUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput> | StatusViewCreateWithoutStatusInput[] | StatusViewUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusViewCreateOrConnectWithoutStatusInput | StatusViewCreateOrConnectWithoutStatusInput[]
    upsert?: StatusViewUpsertWithWhereUniqueWithoutStatusInput | StatusViewUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusViewCreateManyStatusInputEnvelope
    set?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    disconnect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    delete?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    connect?: StatusViewWhereUniqueInput | StatusViewWhereUniqueInput[]
    update?: StatusViewUpdateWithWhereUniqueWithoutStatusInput | StatusViewUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusViewUpdateManyWithWhereWithoutStatusInput | StatusViewUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
  }

  export type StatusReactionUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput> | StatusReactionCreateWithoutStatusInput[] | StatusReactionUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: StatusReactionCreateOrConnectWithoutStatusInput | StatusReactionCreateOrConnectWithoutStatusInput[]
    upsert?: StatusReactionUpsertWithWhereUniqueWithoutStatusInput | StatusReactionUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: StatusReactionCreateManyStatusInputEnvelope
    set?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    disconnect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    delete?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    connect?: StatusReactionWhereUniqueInput | StatusReactionWhereUniqueInput[]
    update?: StatusReactionUpdateWithWhereUniqueWithoutStatusInput | StatusReactionUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: StatusReactionUpdateManyWithWhereWithoutStatusInput | StatusReactionUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
  }

  export type StatusCreateNestedOneWithoutAssetsInput = {
    create?: XOR<StatusCreateWithoutAssetsInput, StatusUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutAssetsInput
    connect?: StatusWhereUniqueInput
  }

  export type EnumStatusAssetKindFieldUpdateOperationsInput = {
    set?: $Enums.StatusAssetKind
  }

  export type StatusUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<StatusCreateWithoutAssetsInput, StatusUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutAssetsInput
    upsert?: StatusUpsertWithoutAssetsInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutAssetsInput, StatusUpdateWithoutAssetsInput>, StatusUncheckedUpdateWithoutAssetsInput>
  }

  export type StatusCreateNestedOneWithoutKeysInput = {
    create?: XOR<StatusCreateWithoutKeysInput, StatusUncheckedCreateWithoutKeysInput>
    connectOrCreate?: StatusCreateOrConnectWithoutKeysInput
    connect?: StatusWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStatusKeysInput = {
    create?: XOR<UserCreateWithoutStatusKeysInput, UserUncheckedCreateWithoutStatusKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusKeysInput
    connect?: UserWhereUniqueInput
  }

  export type StatusUpdateOneRequiredWithoutKeysNestedInput = {
    create?: XOR<StatusCreateWithoutKeysInput, StatusUncheckedCreateWithoutKeysInput>
    connectOrCreate?: StatusCreateOrConnectWithoutKeysInput
    upsert?: StatusUpsertWithoutKeysInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutKeysInput, StatusUpdateWithoutKeysInput>, StatusUncheckedUpdateWithoutKeysInput>
  }

  export type UserUpdateOneRequiredWithoutStatusKeysNestedInput = {
    create?: XOR<UserCreateWithoutStatusKeysInput, UserUncheckedCreateWithoutStatusKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusKeysInput
    upsert?: UserUpsertWithoutStatusKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusKeysInput, UserUpdateWithoutStatusKeysInput>, UserUncheckedUpdateWithoutStatusKeysInput>
  }

  export type StatusCreateNestedOneWithoutViewsInput = {
    create?: XOR<StatusCreateWithoutViewsInput, StatusUncheckedCreateWithoutViewsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutViewsInput
    connect?: StatusWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStatusViewsInput = {
    create?: XOR<UserCreateWithoutStatusViewsInput, UserUncheckedCreateWithoutStatusViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusViewsInput
    connect?: UserWhereUniqueInput
  }

  export type StatusUpdateOneRequiredWithoutViewsNestedInput = {
    create?: XOR<StatusCreateWithoutViewsInput, StatusUncheckedCreateWithoutViewsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutViewsInput
    upsert?: StatusUpsertWithoutViewsInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutViewsInput, StatusUpdateWithoutViewsInput>, StatusUncheckedUpdateWithoutViewsInput>
  }

  export type UserUpdateOneRequiredWithoutStatusViewsNestedInput = {
    create?: XOR<UserCreateWithoutStatusViewsInput, UserUncheckedCreateWithoutStatusViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusViewsInput
    upsert?: UserUpsertWithoutStatusViewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusViewsInput, UserUpdateWithoutStatusViewsInput>, UserUncheckedUpdateWithoutStatusViewsInput>
  }

  export type StatusCreateNestedOneWithoutReactionsInput = {
    create?: XOR<StatusCreateWithoutReactionsInput, StatusUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutReactionsInput
    connect?: StatusWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStatusReactionsInput = {
    create?: XOR<UserCreateWithoutStatusReactionsInput, UserUncheckedCreateWithoutStatusReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusReactionsInput
    connect?: UserWhereUniqueInput
  }

  export type StatusUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<StatusCreateWithoutReactionsInput, StatusUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: StatusCreateOrConnectWithoutReactionsInput
    upsert?: StatusUpsertWithoutReactionsInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutReactionsInput, StatusUpdateWithoutReactionsInput>, StatusUncheckedUpdateWithoutReactionsInput>
  }

  export type UserUpdateOneRequiredWithoutStatusReactionsNestedInput = {
    create?: XOR<UserCreateWithoutStatusReactionsInput, UserUncheckedCreateWithoutStatusReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusReactionsInput
    upsert?: UserUpsertWithoutStatusReactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusReactionsInput, UserUpdateWithoutStatusReactionsInput>, UserUncheckedUpdateWithoutStatusReactionsInput>
  }

  export type UserCreateNestedOneWithoutBotsOwnedInput = {
    create?: XOR<UserCreateWithoutBotsOwnedInput, UserUncheckedCreateWithoutBotsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBotsOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBotsAsServiceInput = {
    create?: XOR<UserCreateWithoutBotsAsServiceInput, UserUncheckedCreateWithoutBotsAsServiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutBotsAsServiceInput
    connect?: UserWhereUniqueInput
  }

  export type BotInstallCreateNestedManyWithoutBotInput = {
    create?: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput> | BotInstallCreateWithoutBotInput[] | BotInstallUncheckedCreateWithoutBotInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutBotInput | BotInstallCreateOrConnectWithoutBotInput[]
    createMany?: BotInstallCreateManyBotInputEnvelope
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
  }

  export type BotInstallUncheckedCreateNestedManyWithoutBotInput = {
    create?: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput> | BotInstallCreateWithoutBotInput[] | BotInstallUncheckedCreateWithoutBotInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutBotInput | BotInstallCreateOrConnectWithoutBotInput[]
    createMany?: BotInstallCreateManyBotInputEnvelope
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutBotsOwnedNestedInput = {
    create?: XOR<UserCreateWithoutBotsOwnedInput, UserUncheckedCreateWithoutBotsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBotsOwnedInput
    upsert?: UserUpsertWithoutBotsOwnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBotsOwnedInput, UserUpdateWithoutBotsOwnedInput>, UserUncheckedUpdateWithoutBotsOwnedInput>
  }

  export type UserUpdateOneWithoutBotsAsServiceNestedInput = {
    create?: XOR<UserCreateWithoutBotsAsServiceInput, UserUncheckedCreateWithoutBotsAsServiceInput>
    connectOrCreate?: UserCreateOrConnectWithoutBotsAsServiceInput
    upsert?: UserUpsertWithoutBotsAsServiceInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBotsAsServiceInput, UserUpdateWithoutBotsAsServiceInput>, UserUncheckedUpdateWithoutBotsAsServiceInput>
  }

  export type BotInstallUpdateManyWithoutBotNestedInput = {
    create?: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput> | BotInstallCreateWithoutBotInput[] | BotInstallUncheckedCreateWithoutBotInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutBotInput | BotInstallCreateOrConnectWithoutBotInput[]
    upsert?: BotInstallUpsertWithWhereUniqueWithoutBotInput | BotInstallUpsertWithWhereUniqueWithoutBotInput[]
    createMany?: BotInstallCreateManyBotInputEnvelope
    set?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    disconnect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    delete?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    update?: BotInstallUpdateWithWhereUniqueWithoutBotInput | BotInstallUpdateWithWhereUniqueWithoutBotInput[]
    updateMany?: BotInstallUpdateManyWithWhereWithoutBotInput | BotInstallUpdateManyWithWhereWithoutBotInput[]
    deleteMany?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
  }

  export type BotInstallUncheckedUpdateManyWithoutBotNestedInput = {
    create?: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput> | BotInstallCreateWithoutBotInput[] | BotInstallUncheckedCreateWithoutBotInput[]
    connectOrCreate?: BotInstallCreateOrConnectWithoutBotInput | BotInstallCreateOrConnectWithoutBotInput[]
    upsert?: BotInstallUpsertWithWhereUniqueWithoutBotInput | BotInstallUpsertWithWhereUniqueWithoutBotInput[]
    createMany?: BotInstallCreateManyBotInputEnvelope
    set?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    disconnect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    delete?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    connect?: BotInstallWhereUniqueInput | BotInstallWhereUniqueInput[]
    update?: BotInstallUpdateWithWhereUniqueWithoutBotInput | BotInstallUpdateWithWhereUniqueWithoutBotInput[]
    updateMany?: BotInstallUpdateManyWithWhereWithoutBotInput | BotInstallUpdateManyWithWhereWithoutBotInput[]
    deleteMany?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
  }

  export type BotCreateNestedOneWithoutInstallsInput = {
    create?: XOR<BotCreateWithoutInstallsInput, BotUncheckedCreateWithoutInstallsInput>
    connectOrCreate?: BotCreateOrConnectWithoutInstallsInput
    connect?: BotWhereUniqueInput
  }

  export type ChatRoomCreateNestedOneWithoutBotInstallsInput = {
    create?: XOR<ChatRoomCreateWithoutBotInstallsInput, ChatRoomUncheckedCreateWithoutBotInstallsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutBotInstallsInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type BotEventLogCreateNestedManyWithoutInstallInput = {
    create?: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput> | BotEventLogCreateWithoutInstallInput[] | BotEventLogUncheckedCreateWithoutInstallInput[]
    connectOrCreate?: BotEventLogCreateOrConnectWithoutInstallInput | BotEventLogCreateOrConnectWithoutInstallInput[]
    createMany?: BotEventLogCreateManyInstallInputEnvelope
    connect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
  }

  export type BotEventLogUncheckedCreateNestedManyWithoutInstallInput = {
    create?: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput> | BotEventLogCreateWithoutInstallInput[] | BotEventLogUncheckedCreateWithoutInstallInput[]
    connectOrCreate?: BotEventLogCreateOrConnectWithoutInstallInput | BotEventLogCreateOrConnectWithoutInstallInput[]
    createMany?: BotEventLogCreateManyInstallInputEnvelope
    connect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
  }

  export type EnumContentScopeFieldUpdateOperationsInput = {
    set?: $Enums.ContentScope
  }

  export type BotUpdateOneRequiredWithoutInstallsNestedInput = {
    create?: XOR<BotCreateWithoutInstallsInput, BotUncheckedCreateWithoutInstallsInput>
    connectOrCreate?: BotCreateOrConnectWithoutInstallsInput
    upsert?: BotUpsertWithoutInstallsInput
    connect?: BotWhereUniqueInput
    update?: XOR<XOR<BotUpdateToOneWithWhereWithoutInstallsInput, BotUpdateWithoutInstallsInput>, BotUncheckedUpdateWithoutInstallsInput>
  }

  export type ChatRoomUpdateOneRequiredWithoutBotInstallsNestedInput = {
    create?: XOR<ChatRoomCreateWithoutBotInstallsInput, ChatRoomUncheckedCreateWithoutBotInstallsInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutBotInstallsInput
    upsert?: ChatRoomUpsertWithoutBotInstallsInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutBotInstallsInput, ChatRoomUpdateWithoutBotInstallsInput>, ChatRoomUncheckedUpdateWithoutBotInstallsInput>
  }

  export type BotEventLogUpdateManyWithoutInstallNestedInput = {
    create?: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput> | BotEventLogCreateWithoutInstallInput[] | BotEventLogUncheckedCreateWithoutInstallInput[]
    connectOrCreate?: BotEventLogCreateOrConnectWithoutInstallInput | BotEventLogCreateOrConnectWithoutInstallInput[]
    upsert?: BotEventLogUpsertWithWhereUniqueWithoutInstallInput | BotEventLogUpsertWithWhereUniqueWithoutInstallInput[]
    createMany?: BotEventLogCreateManyInstallInputEnvelope
    set?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    disconnect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    delete?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    connect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    update?: BotEventLogUpdateWithWhereUniqueWithoutInstallInput | BotEventLogUpdateWithWhereUniqueWithoutInstallInput[]
    updateMany?: BotEventLogUpdateManyWithWhereWithoutInstallInput | BotEventLogUpdateManyWithWhereWithoutInstallInput[]
    deleteMany?: BotEventLogScalarWhereInput | BotEventLogScalarWhereInput[]
  }

  export type BotEventLogUncheckedUpdateManyWithoutInstallNestedInput = {
    create?: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput> | BotEventLogCreateWithoutInstallInput[] | BotEventLogUncheckedCreateWithoutInstallInput[]
    connectOrCreate?: BotEventLogCreateOrConnectWithoutInstallInput | BotEventLogCreateOrConnectWithoutInstallInput[]
    upsert?: BotEventLogUpsertWithWhereUniqueWithoutInstallInput | BotEventLogUpsertWithWhereUniqueWithoutInstallInput[]
    createMany?: BotEventLogCreateManyInstallInputEnvelope
    set?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    disconnect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    delete?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    connect?: BotEventLogWhereUniqueInput | BotEventLogWhereUniqueInput[]
    update?: BotEventLogUpdateWithWhereUniqueWithoutInstallInput | BotEventLogUpdateWithWhereUniqueWithoutInstallInput[]
    updateMany?: BotEventLogUpdateManyWithWhereWithoutInstallInput | BotEventLogUpdateManyWithWhereWithoutInstallInput[]
    deleteMany?: BotEventLogScalarWhereInput | BotEventLogScalarWhereInput[]
  }

  export type BotInstallCreateNestedOneWithoutEventsInput = {
    create?: XOR<BotInstallCreateWithoutEventsInput, BotInstallUncheckedCreateWithoutEventsInput>
    connectOrCreate?: BotInstallCreateOrConnectWithoutEventsInput
    connect?: BotInstallWhereUniqueInput
  }

  export type BotInstallUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<BotInstallCreateWithoutEventsInput, BotInstallUncheckedCreateWithoutEventsInput>
    connectOrCreate?: BotInstallCreateOrConnectWithoutEventsInput
    upsert?: BotInstallUpsertWithoutEventsInput
    connect?: BotInstallWhereUniqueInput
    update?: XOR<XOR<BotInstallUpdateToOneWithWhereWithoutEventsInput, BotInstallUpdateWithoutEventsInput>, BotInstallUncheckedUpdateWithoutEventsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAutoResponderModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoResponderMode | EnumAutoResponderModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoResponderModeFilter<$PrismaModel> | $Enums.AutoResponderMode
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAutoResponderModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoResponderMode | EnumAutoResponderModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoResponderMode[] | ListEnumAutoResponderModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoResponderModeWithAggregatesFilter<$PrismaModel> | $Enums.AutoResponderMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAutoResponderModeFilter<$PrismaModel>
    _max?: NestedEnumAutoResponderModeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type NestedEnumAIAssistantModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AIAssistantMode | EnumAIAssistantModeFieldRefInput<$PrismaModel>
    in?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAIAssistantModeFilter<$PrismaModel> | $Enums.AIAssistantMode
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumAutoTranslateModeFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoTranslateMode | EnumAutoTranslateModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoTranslateModeFilter<$PrismaModel> | $Enums.AutoTranslateMode
  }

  export type NestedEnumAIAssistantModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AIAssistantMode | EnumAIAssistantModeFieldRefInput<$PrismaModel>
    in?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AIAssistantMode[] | ListEnumAIAssistantModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAIAssistantModeWithAggregatesFilter<$PrismaModel> | $Enums.AIAssistantMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAIAssistantModeFilter<$PrismaModel>
    _max?: NestedEnumAIAssistantModeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAutoTranslateModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AutoTranslateMode | EnumAutoTranslateModeFieldRefInput<$PrismaModel>
    in?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AutoTranslateMode[] | ListEnumAutoTranslateModeFieldRefInput<$PrismaModel>
    not?: NestedEnumAutoTranslateModeWithAggregatesFilter<$PrismaModel> | $Enums.AutoTranslateMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAutoTranslateModeFilter<$PrismaModel>
    _max?: NestedEnumAutoTranslateModeFilter<$PrismaModel>
  }

  export type NestedEnumRoomRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomRole | EnumRoomRoleFieldRefInput<$PrismaModel>
    in?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomRoleFilter<$PrismaModel> | $Enums.RoomRole
  }

  export type NestedEnumRoomRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomRole | EnumRoomRoleFieldRefInput<$PrismaModel>
    in?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomRole[] | ListEnumRoomRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomRoleWithAggregatesFilter<$PrismaModel> | $Enums.RoomRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomRoleFilter<$PrismaModel>
    _max?: NestedEnumRoomRoleFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAttachmentKindFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentKind | EnumAttachmentKindFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentKindFilter<$PrismaModel> | $Enums.AttachmentKind
  }

  export type NestedEnumAttachmentKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttachmentKind | EnumAttachmentKindFieldRefInput<$PrismaModel>
    in?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttachmentKind[] | ListEnumAttachmentKindFieldRefInput<$PrismaModel>
    not?: NestedEnumAttachmentKindWithAggregatesFilter<$PrismaModel> | $Enums.AttachmentKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttachmentKindFilter<$PrismaModel>
    _max?: NestedEnumAttachmentKindFilter<$PrismaModel>
  }

  export type NestedEnumStatusAudienceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAudience | EnumStatusAudienceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAudienceFilter<$PrismaModel> | $Enums.StatusAudience
  }

  export type NestedEnumStatusAudienceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAudience | EnumStatusAudienceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAudience[] | ListEnumStatusAudienceFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAudienceWithAggregatesFilter<$PrismaModel> | $Enums.StatusAudience
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusAudienceFilter<$PrismaModel>
    _max?: NestedEnumStatusAudienceFilter<$PrismaModel>
  }

  export type NestedEnumStatusAssetKindFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAssetKind | EnumStatusAssetKindFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAssetKindFilter<$PrismaModel> | $Enums.StatusAssetKind
  }

  export type NestedEnumStatusAssetKindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusAssetKind | EnumStatusAssetKindFieldRefInput<$PrismaModel>
    in?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusAssetKind[] | ListEnumStatusAssetKindFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusAssetKindWithAggregatesFilter<$PrismaModel> | $Enums.StatusAssetKind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusAssetKindFilter<$PrismaModel>
    _max?: NestedEnumStatusAssetKindFilter<$PrismaModel>
  }

  export type NestedEnumContentScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentScope | EnumContentScopeFieldRefInput<$PrismaModel>
    in?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumContentScopeFilter<$PrismaModel> | $Enums.ContentScope
  }

  export type NestedEnumContentScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContentScope | EnumContentScopeFieldRefInput<$PrismaModel>
    in?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContentScope[] | ListEnumContentScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumContentScopeWithAggregatesFilter<$PrismaModel> | $Enums.ContentScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContentScopeFilter<$PrismaModel>
    _max?: NestedEnumContentScopeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MessageCreateWithoutSenderInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type ParticipantCreateWithoutUserInput = {
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
    chatRoom: ChatRoomCreateNestedOneWithoutParticipantsInput
  }

  export type ParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    chatRoomId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type ParticipantCreateOrConnectWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ParticipantCreateManyUserInputEnvelope = {
    data: ParticipantCreateManyUserInput | ParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutReporterInput = {
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
    message: MessageCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutReporterInput = {
    id?: number
    messageId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type ReportCreateOrConnectWithoutReporterInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportCreateManyReporterInputEnvelope = {
    data: ReportCreateManyReporterInput | ReportCreateManyReporterInput[]
    skipDuplicates?: boolean
  }

  export type RandomChatRoomCreateWithoutParticipantsInput = {
    createdAt?: Date | string
    aiEnabled?: boolean
    messages?: MessageCreateNestedManyWithoutRandomChatRoomInput
  }

  export type RandomChatRoomUncheckedCreateWithoutParticipantsInput = {
    id?: number
    createdAt?: Date | string
    aiEnabled?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutRandomChatRoomInput
  }

  export type RandomChatRoomCreateOrConnectWithoutParticipantsInput = {
    where: RandomChatRoomWhereUniqueInput
    create: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput>
  }

  export type MessageCreateWithoutReadByInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReadByInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReadByInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
  }

  export type ContactCreateWithoutOwnerInput = {
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutContactsSavedInput
  }

  export type ContactUncheckedCreateWithoutOwnerInput = {
    id?: number
    userId?: number | null
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutOwnerInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput>
  }

  export type ContactCreateManyOwnerInputEnvelope = {
    data: ContactCreateManyOwnerInput | ContactCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutUserInput = {
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
    owner: UserCreateNestedOneWithoutContactsOwnedInput
  }

  export type ContactUncheckedCreateWithoutUserInput = {
    id?: number
    ownerId: number
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutUserInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactCreateManyUserInputEnvelope = {
    data: ContactCreateManyUserInput | ContactCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutActorInput = {
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutActorInput = {
    id?: number
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogCreateManyActorInputEnvelope = {
    data: AuditLogCreateManyActorInput | AuditLogCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type MessageKeyCreateWithoutUserInput = {
    encryptedKey: string
    message: MessageCreateNestedOneWithoutKeysInput
  }

  export type MessageKeyUncheckedCreateWithoutUserInput = {
    messageId: number
    encryptedKey: string
  }

  export type MessageKeyCreateOrConnectWithoutUserInput = {
    where: MessageKeyWhereUniqueInput
    create: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput>
  }

  export type MessageKeyCreateManyUserInputEnvelope = {
    data: MessageKeyCreateManyUserInput | MessageKeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DeviceCreateWithoutUserInput = {
    id?: string
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    revokedBy?: UserCreateNestedOneWithoutDeviceRevocationsInput
  }

  export type DeviceUncheckedCreateWithoutUserInput = {
    id?: string
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    revokedById?: number | null
  }

  export type DeviceCreateOrConnectWithoutUserInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput>
  }

  export type DeviceCreateManyUserInputEnvelope = {
    data: DeviceCreateManyUserInput | DeviceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DeviceCreateWithoutRevokedByInput = {
    id?: string
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    user: UserCreateNestedOneWithoutDevicesInput
  }

  export type DeviceUncheckedCreateWithoutRevokedByInput = {
    id?: string
    userId: number
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
  }

  export type DeviceCreateOrConnectWithoutRevokedByInput = {
    where: DeviceWhereUniqueInput
    create: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput>
  }

  export type DeviceCreateManyRevokedByInputEnvelope = {
    data: DeviceCreateManyRevokedByInput | DeviceCreateManyRevokedByInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomInviteCreateWithoutCreatedByInput = {
    code: string
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    chatRoom: ChatRoomCreateNestedOneWithoutInvitesInput
  }

  export type ChatRoomInviteUncheckedCreateWithoutCreatedByInput = {
    id?: number
    code: string
    chatRoomId: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ChatRoomInviteCreateOrConnectWithoutCreatedByInput = {
    where: ChatRoomInviteWhereUniqueInput
    create: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput>
  }

  export type ChatRoomInviteCreateManyCreatedByInputEnvelope = {
    data: ChatRoomInviteCreateManyCreatedByInput | ChatRoomInviteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MessageReactionCreateWithoutUserInput = {
    emoji: string
    createdAt?: Date | string
    message: MessageCreateNestedOneWithoutReactionsInput
  }

  export type MessageReactionUncheckedCreateWithoutUserInput = {
    messageId: number
    emoji: string
    createdAt?: Date | string
  }

  export type MessageReactionCreateOrConnectWithoutUserInput = {
    where: MessageReactionWhereUniqueInput
    create: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput>
  }

  export type MessageReactionCreateManyUserInputEnvelope = {
    data: MessageReactionCreateManyUserInput | MessageReactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StatusCreateWithoutAuthorInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetCreateNestedManyWithoutStatusInput
    keys?: StatusKeyCreateNestedManyWithoutStatusInput
    views?: StatusViewCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateWithoutAuthorInput = {
    id?: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetUncheckedCreateNestedManyWithoutStatusInput
    keys?: StatusKeyUncheckedCreateNestedManyWithoutStatusInput
    views?: StatusViewUncheckedCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCreateOrConnectWithoutAuthorInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput>
  }

  export type StatusCreateManyAuthorInputEnvelope = {
    data: StatusCreateManyAuthorInput | StatusCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type StatusKeyCreateWithoutUserInput = {
    encryptedKey: string
    status: StatusCreateNestedOneWithoutKeysInput
  }

  export type StatusKeyUncheckedCreateWithoutUserInput = {
    statusId: number
    encryptedKey: string
  }

  export type StatusKeyCreateOrConnectWithoutUserInput = {
    where: StatusKeyWhereUniqueInput
    create: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput>
  }

  export type StatusKeyCreateManyUserInputEnvelope = {
    data: StatusKeyCreateManyUserInput | StatusKeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StatusViewCreateWithoutViewerInput = {
    viewedAt?: Date | string
    status: StatusCreateNestedOneWithoutViewsInput
  }

  export type StatusViewUncheckedCreateWithoutViewerInput = {
    id?: number
    statusId: number
    viewedAt?: Date | string
  }

  export type StatusViewCreateOrConnectWithoutViewerInput = {
    where: StatusViewWhereUniqueInput
    create: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput>
  }

  export type StatusViewCreateManyViewerInputEnvelope = {
    data: StatusViewCreateManyViewerInput | StatusViewCreateManyViewerInput[]
    skipDuplicates?: boolean
  }

  export type StatusReactionCreateWithoutUserInput = {
    emoji: string
    status: StatusCreateNestedOneWithoutReactionsInput
  }

  export type StatusReactionUncheckedCreateWithoutUserInput = {
    statusId: number
    emoji: string
  }

  export type StatusReactionCreateOrConnectWithoutUserInput = {
    where: StatusReactionWhereUniqueInput
    create: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput>
  }

  export type StatusReactionCreateManyUserInputEnvelope = {
    data: StatusReactionCreateManyUserInput | StatusReactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BotCreateWithoutOwnerInput = {
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceUser?: UserCreateNestedOneWithoutBotsAsServiceInput
    installs?: BotInstallCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    url: string
    secret: string
    serviceUserId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    installs?: BotInstallUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotCreateOrConnectWithoutOwnerInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput>
  }

  export type BotCreateManyOwnerInputEnvelope = {
    data: BotCreateManyOwnerInput | BotCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type BotCreateWithoutServiceUserInput = {
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBotsOwnedInput
    installs?: BotInstallCreateNestedManyWithoutBotInput
  }

  export type BotUncheckedCreateWithoutServiceUserInput = {
    id?: number
    ownerId: number
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
    installs?: BotInstallUncheckedCreateNestedManyWithoutBotInput
  }

  export type BotCreateOrConnectWithoutServiceUserInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput>
  }

  export type BotCreateManyServiceUserInputEnvelope = {
    data: BotCreateManyServiceUserInput | BotCreateManyServiceUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    contentCiphertext?: StringFilter<"Message"> | string
    rawContent?: StringFilter<"Message"> | string
    translations?: JsonNullableFilter<"Message">
    translatedFrom?: StringNullableFilter<"Message"> | string | null
    isExplicit?: BoolFilter<"Message"> | boolean
    imageUrl?: StringNullableFilter<"Message"> | string | null
    audioUrl?: StringNullableFilter<"Message"> | string | null
    audioDurationSec?: IntNullableFilter<"Message"> | number | null
    expiresAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    deletedBySender?: BoolFilter<"Message"> | boolean
    senderId?: IntFilter<"Message"> | number
    chatRoomId?: IntFilter<"Message"> | number
    randomChatRoomId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    isAutoReply?: BoolFilter<"Message"> | boolean
  }

  export type ParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutUserInput, ParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutUserInput, ParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ParticipantScalarWhereInput = {
    AND?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
    OR?: ParticipantScalarWhereInput[]
    NOT?: ParticipantScalarWhereInput | ParticipantScalarWhereInput[]
    id?: IntFilter<"Participant"> | number
    userId?: IntFilter<"Participant"> | number
    chatRoomId?: IntFilter<"Participant"> | number
    role?: EnumRoomRoleFilter<"Participant"> | $Enums.RoomRole
    joinedAt?: DateTimeFilter<"Participant"> | Date | string
    allowAIBot?: BoolFilter<"Participant"> | boolean
  }

  export type ReportUpsertWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
    create: XOR<ReportCreateWithoutReporterInput, ReportUncheckedCreateWithoutReporterInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutReporterInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutReporterInput, ReportUncheckedUpdateWithoutReporterInput>
  }

  export type ReportUpdateManyWithWhereWithoutReporterInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutReporterInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    messageId?: IntFilter<"Report"> | number
    reporterId?: IntFilter<"Report"> | number
    decryptedContent?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    status?: StringFilter<"Report"> | string
    resolvedAt?: DateTimeNullableFilter<"Report"> | Date | string | null
    notes?: StringNullableFilter<"Report"> | string | null
  }

  export type RandomChatRoomUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: RandomChatRoomWhereUniqueInput
    update: XOR<RandomChatRoomUpdateWithoutParticipantsInput, RandomChatRoomUncheckedUpdateWithoutParticipantsInput>
    create: XOR<RandomChatRoomCreateWithoutParticipantsInput, RandomChatRoomUncheckedCreateWithoutParticipantsInput>
  }

  export type RandomChatRoomUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: RandomChatRoomWhereUniqueInput
    data: XOR<RandomChatRoomUpdateWithoutParticipantsInput, RandomChatRoomUncheckedUpdateWithoutParticipantsInput>
  }

  export type RandomChatRoomUpdateManyWithWhereWithoutParticipantsInput = {
    where: RandomChatRoomScalarWhereInput
    data: XOR<RandomChatRoomUpdateManyMutationInput, RandomChatRoomUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type RandomChatRoomScalarWhereInput = {
    AND?: RandomChatRoomScalarWhereInput | RandomChatRoomScalarWhereInput[]
    OR?: RandomChatRoomScalarWhereInput[]
    NOT?: RandomChatRoomScalarWhereInput | RandomChatRoomScalarWhereInput[]
    id?: IntFilter<"RandomChatRoom"> | number
    createdAt?: DateTimeFilter<"RandomChatRoom"> | Date | string
    aiEnabled?: BoolFilter<"RandomChatRoom"> | boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutReadByInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
    create: XOR<MessageCreateWithoutReadByInput, MessageUncheckedCreateWithoutReadByInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReadByInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReadByInput, MessageUncheckedUpdateWithoutReadByInput>
  }

  export type MessageUpdateManyWithWhereWithoutReadByInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReadByInput>
  }

  export type ContactUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutOwnerInput, ContactUncheckedUpdateWithoutOwnerInput>
    create: XOR<ContactCreateWithoutOwnerInput, ContactUncheckedCreateWithoutOwnerInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutOwnerInput, ContactUncheckedUpdateWithoutOwnerInput>
  }

  export type ContactUpdateManyWithWhereWithoutOwnerInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: IntFilter<"Contact"> | number
    ownerId?: IntFilter<"Contact"> | number
    userId?: IntNullableFilter<"Contact"> | number | null
    externalPhone?: StringNullableFilter<"Contact"> | string | null
    externalName?: StringNullableFilter<"Contact"> | string | null
    alias?: StringNullableFilter<"Contact"> | string | null
    favorite?: BoolFilter<"Contact"> | boolean
    createdAt?: DateTimeFilter<"Contact"> | Date | string
  }

  export type ContactUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
  }

  export type ContactUpdateManyWithWhereWithoutUserInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutActorInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutActorInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    actorId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    resource?: StringNullableFilter<"AuditLog"> | string | null
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    status?: IntFilter<"AuditLog"> | number
    ip?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type MessageKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageKeyWhereUniqueInput
    update: XOR<MessageKeyUpdateWithoutUserInput, MessageKeyUncheckedUpdateWithoutUserInput>
    create: XOR<MessageKeyCreateWithoutUserInput, MessageKeyUncheckedCreateWithoutUserInput>
  }

  export type MessageKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageKeyWhereUniqueInput
    data: XOR<MessageKeyUpdateWithoutUserInput, MessageKeyUncheckedUpdateWithoutUserInput>
  }

  export type MessageKeyUpdateManyWithWhereWithoutUserInput = {
    where: MessageKeyScalarWhereInput
    data: XOR<MessageKeyUpdateManyMutationInput, MessageKeyUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageKeyScalarWhereInput = {
    AND?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
    OR?: MessageKeyScalarWhereInput[]
    NOT?: MessageKeyScalarWhereInput | MessageKeyScalarWhereInput[]
    messageId?: IntFilter<"MessageKey"> | number
    userId?: IntFilter<"MessageKey"> | number
    encryptedKey?: StringFilter<"MessageKey"> | string
  }

  export type DeviceUpsertWithWhereUniqueWithoutUserInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutUserInput, DeviceUncheckedUpdateWithoutUserInput>
    create: XOR<DeviceCreateWithoutUserInput, DeviceUncheckedCreateWithoutUserInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutUserInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutUserInput, DeviceUncheckedUpdateWithoutUserInput>
  }

  export type DeviceUpdateManyWithWhereWithoutUserInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutUserInput>
  }

  export type DeviceScalarWhereInput = {
    AND?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
    OR?: DeviceScalarWhereInput[]
    NOT?: DeviceScalarWhereInput | DeviceScalarWhereInput[]
    id?: StringFilter<"Device"> | string
    userId?: IntFilter<"Device"> | number
    publicKey?: StringFilter<"Device"> | string
    name?: StringNullableFilter<"Device"> | string | null
    platform?: StringNullableFilter<"Device"> | string | null
    isPrimary?: BoolFilter<"Device"> | boolean
    createdAt?: DateTimeFilter<"Device"> | Date | string
    lastSeenAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"Device"> | Date | string | null
    revokedById?: IntNullableFilter<"Device"> | number | null
  }

  export type DeviceUpsertWithWhereUniqueWithoutRevokedByInput = {
    where: DeviceWhereUniqueInput
    update: XOR<DeviceUpdateWithoutRevokedByInput, DeviceUncheckedUpdateWithoutRevokedByInput>
    create: XOR<DeviceCreateWithoutRevokedByInput, DeviceUncheckedCreateWithoutRevokedByInput>
  }

  export type DeviceUpdateWithWhereUniqueWithoutRevokedByInput = {
    where: DeviceWhereUniqueInput
    data: XOR<DeviceUpdateWithoutRevokedByInput, DeviceUncheckedUpdateWithoutRevokedByInput>
  }

  export type DeviceUpdateManyWithWhereWithoutRevokedByInput = {
    where: DeviceScalarWhereInput
    data: XOR<DeviceUpdateManyMutationInput, DeviceUncheckedUpdateManyWithoutRevokedByInput>
  }

  export type ChatRoomInviteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ChatRoomInviteWhereUniqueInput
    update: XOR<ChatRoomInviteUpdateWithoutCreatedByInput, ChatRoomInviteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ChatRoomInviteCreateWithoutCreatedByInput, ChatRoomInviteUncheckedCreateWithoutCreatedByInput>
  }

  export type ChatRoomInviteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ChatRoomInviteWhereUniqueInput
    data: XOR<ChatRoomInviteUpdateWithoutCreatedByInput, ChatRoomInviteUncheckedUpdateWithoutCreatedByInput>
  }

  export type ChatRoomInviteUpdateManyWithWhereWithoutCreatedByInput = {
    where: ChatRoomInviteScalarWhereInput
    data: XOR<ChatRoomInviteUpdateManyMutationInput, ChatRoomInviteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ChatRoomInviteScalarWhereInput = {
    AND?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
    OR?: ChatRoomInviteScalarWhereInput[]
    NOT?: ChatRoomInviteScalarWhereInput | ChatRoomInviteScalarWhereInput[]
    id?: IntFilter<"ChatRoomInvite"> | number
    code?: StringFilter<"ChatRoomInvite"> | string
    chatRoomId?: IntFilter<"ChatRoomInvite"> | number
    createdById?: IntFilter<"ChatRoomInvite"> | number
    maxUses?: IntFilter<"ChatRoomInvite"> | number
    uses?: IntFilter<"ChatRoomInvite"> | number
    expiresAt?: DateTimeNullableFilter<"ChatRoomInvite"> | Date | string | null
    createdAt?: DateTimeFilter<"ChatRoomInvite"> | Date | string
  }

  export type MessageReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageReactionWhereUniqueInput
    update: XOR<MessageReactionUpdateWithoutUserInput, MessageReactionUncheckedUpdateWithoutUserInput>
    create: XOR<MessageReactionCreateWithoutUserInput, MessageReactionUncheckedCreateWithoutUserInput>
  }

  export type MessageReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageReactionWhereUniqueInput
    data: XOR<MessageReactionUpdateWithoutUserInput, MessageReactionUncheckedUpdateWithoutUserInput>
  }

  export type MessageReactionUpdateManyWithWhereWithoutUserInput = {
    where: MessageReactionScalarWhereInput
    data: XOR<MessageReactionUpdateManyMutationInput, MessageReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageReactionScalarWhereInput = {
    AND?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
    OR?: MessageReactionScalarWhereInput[]
    NOT?: MessageReactionScalarWhereInput | MessageReactionScalarWhereInput[]
    messageId?: IntFilter<"MessageReaction"> | number
    userId?: IntFilter<"MessageReaction"> | number
    emoji?: StringFilter<"MessageReaction"> | string
    createdAt?: DateTimeFilter<"MessageReaction"> | Date | string
  }

  export type StatusUpsertWithWhereUniqueWithoutAuthorInput = {
    where: StatusWhereUniqueInput
    update: XOR<StatusUpdateWithoutAuthorInput, StatusUncheckedUpdateWithoutAuthorInput>
    create: XOR<StatusCreateWithoutAuthorInput, StatusUncheckedCreateWithoutAuthorInput>
  }

  export type StatusUpdateWithWhereUniqueWithoutAuthorInput = {
    where: StatusWhereUniqueInput
    data: XOR<StatusUpdateWithoutAuthorInput, StatusUncheckedUpdateWithoutAuthorInput>
  }

  export type StatusUpdateManyWithWhereWithoutAuthorInput = {
    where: StatusScalarWhereInput
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyWithoutAuthorInput>
  }

  export type StatusScalarWhereInput = {
    AND?: StatusScalarWhereInput | StatusScalarWhereInput[]
    OR?: StatusScalarWhereInput[]
    NOT?: StatusScalarWhereInput | StatusScalarWhereInput[]
    id?: IntFilter<"Status"> | number
    authorId?: IntFilter<"Status"> | number
    captionCiphertext?: StringNullableFilter<"Status"> | string | null
    encryptedKeys?: JsonNullableFilter<"Status">
    translatedFrom?: StringNullableFilter<"Status"> | string | null
    translations?: JsonNullableFilter<"Status">
    isExplicit?: BoolFilter<"Status"> | boolean
    audience?: EnumStatusAudienceFilter<"Status"> | $Enums.StatusAudience
    expiresAt?: DateTimeFilter<"Status"> | Date | string
    createdAt?: DateTimeFilter<"Status"> | Date | string
  }

  export type StatusKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: StatusKeyWhereUniqueInput
    update: XOR<StatusKeyUpdateWithoutUserInput, StatusKeyUncheckedUpdateWithoutUserInput>
    create: XOR<StatusKeyCreateWithoutUserInput, StatusKeyUncheckedCreateWithoutUserInput>
  }

  export type StatusKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: StatusKeyWhereUniqueInput
    data: XOR<StatusKeyUpdateWithoutUserInput, StatusKeyUncheckedUpdateWithoutUserInput>
  }

  export type StatusKeyUpdateManyWithWhereWithoutUserInput = {
    where: StatusKeyScalarWhereInput
    data: XOR<StatusKeyUpdateManyMutationInput, StatusKeyUncheckedUpdateManyWithoutUserInput>
  }

  export type StatusKeyScalarWhereInput = {
    AND?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
    OR?: StatusKeyScalarWhereInput[]
    NOT?: StatusKeyScalarWhereInput | StatusKeyScalarWhereInput[]
    statusId?: IntFilter<"StatusKey"> | number
    userId?: IntFilter<"StatusKey"> | number
    encryptedKey?: StringFilter<"StatusKey"> | string
  }

  export type StatusViewUpsertWithWhereUniqueWithoutViewerInput = {
    where: StatusViewWhereUniqueInput
    update: XOR<StatusViewUpdateWithoutViewerInput, StatusViewUncheckedUpdateWithoutViewerInput>
    create: XOR<StatusViewCreateWithoutViewerInput, StatusViewUncheckedCreateWithoutViewerInput>
  }

  export type StatusViewUpdateWithWhereUniqueWithoutViewerInput = {
    where: StatusViewWhereUniqueInput
    data: XOR<StatusViewUpdateWithoutViewerInput, StatusViewUncheckedUpdateWithoutViewerInput>
  }

  export type StatusViewUpdateManyWithWhereWithoutViewerInput = {
    where: StatusViewScalarWhereInput
    data: XOR<StatusViewUpdateManyMutationInput, StatusViewUncheckedUpdateManyWithoutViewerInput>
  }

  export type StatusViewScalarWhereInput = {
    AND?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
    OR?: StatusViewScalarWhereInput[]
    NOT?: StatusViewScalarWhereInput | StatusViewScalarWhereInput[]
    id?: IntFilter<"StatusView"> | number
    statusId?: IntFilter<"StatusView"> | number
    viewerId?: IntFilter<"StatusView"> | number
    viewedAt?: DateTimeFilter<"StatusView"> | Date | string
  }

  export type StatusReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: StatusReactionWhereUniqueInput
    update: XOR<StatusReactionUpdateWithoutUserInput, StatusReactionUncheckedUpdateWithoutUserInput>
    create: XOR<StatusReactionCreateWithoutUserInput, StatusReactionUncheckedCreateWithoutUserInput>
  }

  export type StatusReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: StatusReactionWhereUniqueInput
    data: XOR<StatusReactionUpdateWithoutUserInput, StatusReactionUncheckedUpdateWithoutUserInput>
  }

  export type StatusReactionUpdateManyWithWhereWithoutUserInput = {
    where: StatusReactionScalarWhereInput
    data: XOR<StatusReactionUpdateManyMutationInput, StatusReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type StatusReactionScalarWhereInput = {
    AND?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
    OR?: StatusReactionScalarWhereInput[]
    NOT?: StatusReactionScalarWhereInput | StatusReactionScalarWhereInput[]
    statusId?: IntFilter<"StatusReaction"> | number
    userId?: IntFilter<"StatusReaction"> | number
    emoji?: StringFilter<"StatusReaction"> | string
  }

  export type BotUpsertWithWhereUniqueWithoutOwnerInput = {
    where: BotWhereUniqueInput
    update: XOR<BotUpdateWithoutOwnerInput, BotUncheckedUpdateWithoutOwnerInput>
    create: XOR<BotCreateWithoutOwnerInput, BotUncheckedCreateWithoutOwnerInput>
  }

  export type BotUpdateWithWhereUniqueWithoutOwnerInput = {
    where: BotWhereUniqueInput
    data: XOR<BotUpdateWithoutOwnerInput, BotUncheckedUpdateWithoutOwnerInput>
  }

  export type BotUpdateManyWithWhereWithoutOwnerInput = {
    where: BotScalarWhereInput
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyWithoutOwnerInput>
  }

  export type BotScalarWhereInput = {
    AND?: BotScalarWhereInput | BotScalarWhereInput[]
    OR?: BotScalarWhereInput[]
    NOT?: BotScalarWhereInput | BotScalarWhereInput[]
    id?: IntFilter<"Bot"> | number
    ownerId?: IntFilter<"Bot"> | number
    name?: StringFilter<"Bot"> | string
    url?: StringFilter<"Bot"> | string
    secret?: StringFilter<"Bot"> | string
    serviceUserId?: IntNullableFilter<"Bot"> | number | null
    createdAt?: DateTimeFilter<"Bot"> | Date | string
    updatedAt?: DateTimeFilter<"Bot"> | Date | string
  }

  export type BotUpsertWithWhereUniqueWithoutServiceUserInput = {
    where: BotWhereUniqueInput
    update: XOR<BotUpdateWithoutServiceUserInput, BotUncheckedUpdateWithoutServiceUserInput>
    create: XOR<BotCreateWithoutServiceUserInput, BotUncheckedCreateWithoutServiceUserInput>
  }

  export type BotUpdateWithWhereUniqueWithoutServiceUserInput = {
    where: BotWhereUniqueInput
    data: XOR<BotUpdateWithoutServiceUserInput, BotUncheckedUpdateWithoutServiceUserInput>
  }

  export type BotUpdateManyWithWhereWithoutServiceUserInput = {
    where: BotScalarWhereInput
    data: XOR<BotUpdateManyMutationInput, BotUncheckedUpdateManyWithoutServiceUserInput>
  }

  export type ParticipantCreateWithoutChatRoomInput = {
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
    user: UserCreateNestedOneWithoutParticipantsInput
  }

  export type ParticipantUncheckedCreateWithoutChatRoomInput = {
    id?: number
    userId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type ParticipantCreateOrConnectWithoutChatRoomInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput>
  }

  export type ParticipantCreateManyChatRoomInputEnvelope = {
    data: ParticipantCreateManyChatRoomInput | ParticipantCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutChatRoomInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutChatRoomInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput>
  }

  export type MessageCreateManyChatRoomInputEnvelope = {
    data: MessageCreateManyChatRoomInput | MessageCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomInviteCreateWithoutChatRoomInput = {
    code: string
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedInvitesInput
  }

  export type ChatRoomInviteUncheckedCreateWithoutChatRoomInput = {
    id?: number
    code: string
    createdById: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ChatRoomInviteCreateOrConnectWithoutChatRoomInput = {
    where: ChatRoomInviteWhereUniqueInput
    create: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput>
  }

  export type ChatRoomInviteCreateManyChatRoomInputEnvelope = {
    data: ChatRoomInviteCreateManyChatRoomInput | ChatRoomInviteCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type BotInstallCreateWithoutChatRoomInput = {
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bot: BotCreateNestedOneWithoutInstallsInput
    events?: BotEventLogCreateNestedManyWithoutInstallInput
  }

  export type BotInstallUncheckedCreateWithoutChatRoomInput = {
    id?: number
    botId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: BotEventLogUncheckedCreateNestedManyWithoutInstallInput
  }

  export type BotInstallCreateOrConnectWithoutChatRoomInput = {
    where: BotInstallWhereUniqueInput
    create: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput>
  }

  export type BotInstallCreateManyChatRoomInputEnvelope = {
    data: BotInstallCreateManyChatRoomInput | BotInstallCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type ParticipantUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutChatRoomInput, ParticipantUncheckedUpdateWithoutChatRoomInput>
    create: XOR<ParticipantCreateWithoutChatRoomInput, ParticipantUncheckedCreateWithoutChatRoomInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutChatRoomInput, ParticipantUncheckedUpdateWithoutChatRoomInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutChatRoomInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatRoomInput, MessageUncheckedUpdateWithoutChatRoomInput>
    create: XOR<MessageCreateWithoutChatRoomInput, MessageUncheckedCreateWithoutChatRoomInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatRoomInput, MessageUncheckedUpdateWithoutChatRoomInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatRoomInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type ChatRoomInviteUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: ChatRoomInviteWhereUniqueInput
    update: XOR<ChatRoomInviteUpdateWithoutChatRoomInput, ChatRoomInviteUncheckedUpdateWithoutChatRoomInput>
    create: XOR<ChatRoomInviteCreateWithoutChatRoomInput, ChatRoomInviteUncheckedCreateWithoutChatRoomInput>
  }

  export type ChatRoomInviteUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: ChatRoomInviteWhereUniqueInput
    data: XOR<ChatRoomInviteUpdateWithoutChatRoomInput, ChatRoomInviteUncheckedUpdateWithoutChatRoomInput>
  }

  export type ChatRoomInviteUpdateManyWithWhereWithoutChatRoomInput = {
    where: ChatRoomInviteScalarWhereInput
    data: XOR<ChatRoomInviteUpdateManyMutationInput, ChatRoomInviteUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type BotInstallUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: BotInstallWhereUniqueInput
    update: XOR<BotInstallUpdateWithoutChatRoomInput, BotInstallUncheckedUpdateWithoutChatRoomInput>
    create: XOR<BotInstallCreateWithoutChatRoomInput, BotInstallUncheckedCreateWithoutChatRoomInput>
  }

  export type BotInstallUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: BotInstallWhereUniqueInput
    data: XOR<BotInstallUpdateWithoutChatRoomInput, BotInstallUncheckedUpdateWithoutChatRoomInput>
  }

  export type BotInstallUpdateManyWithWhereWithoutChatRoomInput = {
    where: BotInstallScalarWhereInput
    data: XOR<BotInstallUpdateManyMutationInput, BotInstallUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type BotInstallScalarWhereInput = {
    AND?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
    OR?: BotInstallScalarWhereInput[]
    NOT?: BotInstallScalarWhereInput | BotInstallScalarWhereInput[]
    id?: IntFilter<"BotInstall"> | number
    botId?: IntFilter<"BotInstall"> | number
    chatRoomId?: IntFilter<"BotInstall"> | number
    contentScope?: EnumContentScopeFilter<"BotInstall"> | $Enums.ContentScope
    isEnabled?: BoolFilter<"BotInstall"> | boolean
    scopes?: StringNullableFilter<"BotInstall"> | string | null
    createdAt?: DateTimeFilter<"BotInstall"> | Date | string
    updatedAt?: DateTimeFilter<"BotInstall"> | Date | string
  }

  export type UserCreateWithoutParticipantsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutParticipantsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
  }

  export type ChatRoomCreateWithoutParticipantsInput = {
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    messages?: MessageCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutParticipantsInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteUncheckedCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutParticipantsInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
  }

  export type UserUpsertWithoutParticipantsInput = {
    update: XOR<UserUpdateWithoutParticipantsInput, UserUncheckedUpdateWithoutParticipantsInput>
    create: XOR<UserCreateWithoutParticipantsInput, UserUncheckedCreateWithoutParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipantsInput, UserUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateWithoutParticipantsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type ChatRoomUpsertWithoutParticipantsInput = {
    update: XOR<ChatRoomUpdateWithoutParticipantsInput, ChatRoomUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ChatRoomCreateWithoutParticipantsInput, ChatRoomUncheckedCreateWithoutParticipantsInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutParticipantsInput, ChatRoomUncheckedUpdateWithoutParticipantsInput>
  }

  export type ChatRoomUpdateWithoutParticipantsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUncheckedUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type UserCreateWithoutMessagesInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantUncheckedCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteUncheckedCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type MessageKeyCreateWithoutMessageInput = {
    encryptedKey: string
    user: UserCreateNestedOneWithoutMessageKeysInput
  }

  export type MessageKeyUncheckedCreateWithoutMessageInput = {
    userId: number
    encryptedKey: string
  }

  export type MessageKeyCreateOrConnectWithoutMessageInput = {
    where: MessageKeyWhereUniqueInput
    create: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput>
  }

  export type MessageKeyCreateManyMessageInputEnvelope = {
    data: MessageKeyCreateManyMessageInput | MessageKeyCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type MessageAttachmentCreateWithoutMessageInput = {
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type MessageAttachmentUncheckedCreateWithoutMessageInput = {
    id?: number
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type MessageAttachmentCreateOrConnectWithoutMessageInput = {
    where: MessageAttachmentWhereUniqueInput
    create: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput>
  }

  export type MessageAttachmentCreateManyMessageInputEnvelope = {
    data: MessageAttachmentCreateManyMessageInput | MessageAttachmentCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type RandomChatRoomCreateWithoutMessagesInput = {
    createdAt?: Date | string
    aiEnabled?: boolean
    participants?: UserCreateNestedManyWithoutRandomChatRoomsInput
  }

  export type RandomChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: number
    createdAt?: Date | string
    aiEnabled?: boolean
    participants?: UserUncheckedCreateNestedManyWithoutRandomChatRoomsInput
  }

  export type RandomChatRoomCreateOrConnectWithoutMessagesInput = {
    where: RandomChatRoomWhereUniqueInput
    create: XOR<RandomChatRoomCreateWithoutMessagesInput, RandomChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutReadMessagesInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutReadMessagesInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutReadMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput>
  }

  export type ReportCreateWithoutMessageInput = {
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
    reporter: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutMessageInput = {
    id?: number
    reporterId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type ReportCreateOrConnectWithoutMessageInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput>
  }

  export type ReportCreateManyMessageInputEnvelope = {
    data: ReportCreateManyMessageInput | ReportCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type MessageReactionCreateWithoutMessageInput = {
    emoji: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMessageReactionsInput
  }

  export type MessageReactionUncheckedCreateWithoutMessageInput = {
    userId: number
    emoji: string
    createdAt?: Date | string
  }

  export type MessageReactionCreateOrConnectWithoutMessageInput = {
    where: MessageReactionWhereUniqueInput
    create: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput>
  }

  export type MessageReactionCreateManyMessageInputEnvelope = {
    data: MessageReactionCreateManyMessageInput | MessageReactionCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUncheckedUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUncheckedUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type MessageKeyUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageKeyWhereUniqueInput
    update: XOR<MessageKeyUpdateWithoutMessageInput, MessageKeyUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageKeyCreateWithoutMessageInput, MessageKeyUncheckedCreateWithoutMessageInput>
  }

  export type MessageKeyUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageKeyWhereUniqueInput
    data: XOR<MessageKeyUpdateWithoutMessageInput, MessageKeyUncheckedUpdateWithoutMessageInput>
  }

  export type MessageKeyUpdateManyWithWhereWithoutMessageInput = {
    where: MessageKeyScalarWhereInput
    data: XOR<MessageKeyUpdateManyMutationInput, MessageKeyUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageAttachmentUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageAttachmentWhereUniqueInput
    update: XOR<MessageAttachmentUpdateWithoutMessageInput, MessageAttachmentUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageAttachmentCreateWithoutMessageInput, MessageAttachmentUncheckedCreateWithoutMessageInput>
  }

  export type MessageAttachmentUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageAttachmentWhereUniqueInput
    data: XOR<MessageAttachmentUpdateWithoutMessageInput, MessageAttachmentUncheckedUpdateWithoutMessageInput>
  }

  export type MessageAttachmentUpdateManyWithWhereWithoutMessageInput = {
    where: MessageAttachmentScalarWhereInput
    data: XOR<MessageAttachmentUpdateManyMutationInput, MessageAttachmentUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageAttachmentScalarWhereInput = {
    AND?: MessageAttachmentScalarWhereInput | MessageAttachmentScalarWhereInput[]
    OR?: MessageAttachmentScalarWhereInput[]
    NOT?: MessageAttachmentScalarWhereInput | MessageAttachmentScalarWhereInput[]
    id?: IntFilter<"MessageAttachment"> | number
    messageId?: IntFilter<"MessageAttachment"> | number
    kind?: EnumAttachmentKindFilter<"MessageAttachment"> | $Enums.AttachmentKind
    url?: StringFilter<"MessageAttachment"> | string
    mimeType?: StringFilter<"MessageAttachment"> | string
    width?: IntNullableFilter<"MessageAttachment"> | number | null
    height?: IntNullableFilter<"MessageAttachment"> | number | null
    durationSec?: IntNullableFilter<"MessageAttachment"> | number | null
    caption?: StringNullableFilter<"MessageAttachment"> | string | null
    createdAt?: DateTimeFilter<"MessageAttachment"> | Date | string
  }

  export type RandomChatRoomUpsertWithoutMessagesInput = {
    update: XOR<RandomChatRoomUpdateWithoutMessagesInput, RandomChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<RandomChatRoomCreateWithoutMessagesInput, RandomChatRoomUncheckedCreateWithoutMessagesInput>
    where?: RandomChatRoomWhereInput
  }

  export type RandomChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: RandomChatRoomWhereInput
    data: XOR<RandomChatRoomUpdateWithoutMessagesInput, RandomChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type RandomChatRoomUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    participants?: UserUpdateManyWithoutRandomChatRoomsNestedInput
  }

  export type RandomChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    participants?: UserUncheckedUpdateManyWithoutRandomChatRoomsNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReadMessagesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReadMessagesInput, UserUncheckedUpdateWithoutReadMessagesInput>
    create: XOR<UserCreateWithoutReadMessagesInput, UserUncheckedCreateWithoutReadMessagesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReadMessagesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReadMessagesInput, UserUncheckedUpdateWithoutReadMessagesInput>
  }

  export type UserUpdateManyWithWhereWithoutReadMessagesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReadMessagesInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    preferredLanguage?: StringFilter<"User"> | string
    allowExplicitContent?: BoolFilter<"User"> | boolean
    showOriginalWithTranslation?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    enableAIResponder?: BoolFilter<"User"> | boolean
    enableSmartReplies?: BoolFilter<"User"> | boolean
    autoResponderMode?: EnumAutoResponderModeFilter<"User"> | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFilter<"User"> | number
    autoResponderActiveUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    autoResponderSignature?: StringNullableFilter<"User"> | string | null
    publicKey?: StringNullableFilter<"User"> | string | null
    privateKey?: StringNullableFilter<"User"> | string | null
    autoDeleteSeconds?: IntNullableFilter<"User"> | number | null
    showReadReceipts?: BoolFilter<"User"> | boolean
    avatarUrl?: StringNullableFilter<"User"> | string | null
    emojiTag?: StringNullableFilter<"User"> | string | null
    plan?: EnumPlanFilter<"User"> | $Enums.Plan
    messageTone?: StringNullableFilter<"User"> | string | null
    ringtone?: StringNullableFilter<"User"> | string | null
  }

  export type ReportUpsertWithWhereUniqueWithoutMessageInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutMessageInput, ReportUncheckedUpdateWithoutMessageInput>
    create: XOR<ReportCreateWithoutMessageInput, ReportUncheckedCreateWithoutMessageInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutMessageInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutMessageInput, ReportUncheckedUpdateWithoutMessageInput>
  }

  export type ReportUpdateManyWithWhereWithoutMessageInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageReactionUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageReactionWhereUniqueInput
    update: XOR<MessageReactionUpdateWithoutMessageInput, MessageReactionUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageReactionCreateWithoutMessageInput, MessageReactionUncheckedCreateWithoutMessageInput>
  }

  export type MessageReactionUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageReactionWhereUniqueInput
    data: XOR<MessageReactionUpdateWithoutMessageInput, MessageReactionUncheckedUpdateWithoutMessageInput>
  }

  export type MessageReactionUpdateManyWithWhereWithoutMessageInput = {
    where: MessageReactionScalarWhereInput
    data: XOR<MessageReactionUpdateManyMutationInput, MessageReactionUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageCreateWithoutKeysInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutKeysInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutKeysInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutKeysInput, MessageUncheckedCreateWithoutKeysInput>
  }

  export type UserCreateWithoutMessageKeysInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutMessageKeysInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutMessageKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageKeysInput, UserUncheckedCreateWithoutMessageKeysInput>
  }

  export type MessageUpsertWithoutKeysInput = {
    update: XOR<MessageUpdateWithoutKeysInput, MessageUncheckedUpdateWithoutKeysInput>
    create: XOR<MessageCreateWithoutKeysInput, MessageUncheckedCreateWithoutKeysInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutKeysInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutKeysInput, MessageUncheckedUpdateWithoutKeysInput>
  }

  export type MessageUpdateWithoutKeysInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserUpsertWithoutMessageKeysInput = {
    update: XOR<UserUpdateWithoutMessageKeysInput, UserUncheckedUpdateWithoutMessageKeysInput>
    create: XOR<UserCreateWithoutMessageKeysInput, UserUncheckedCreateWithoutMessageKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageKeysInput, UserUncheckedUpdateWithoutMessageKeysInput>
  }

  export type UserUpdateWithoutMessageKeysInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type MessageCreateWithoutAttachmentsInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutAttachmentsInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutAttachmentsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
  }

  export type MessageUpsertWithoutAttachmentsInput = {
    update: XOR<MessageUpdateWithoutAttachmentsInput, MessageUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<MessageCreateWithoutAttachmentsInput, MessageUncheckedCreateWithoutAttachmentsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutAttachmentsInput, MessageUncheckedUpdateWithoutAttachmentsInput>
  }

  export type MessageUpdateWithoutAttachmentsInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserCreateWithoutRandomChatRoomsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutRandomChatRoomsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutRandomChatRoomsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput>
  }

  export type MessageCreateWithoutRandomChatRoomInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutRandomChatRoomInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutRandomChatRoomInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput>
  }

  export type MessageCreateManyRandomChatRoomInputEnvelope = {
    data: MessageCreateManyRandomChatRoomInput | MessageCreateManyRandomChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRandomChatRoomsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRandomChatRoomsInput, UserUncheckedUpdateWithoutRandomChatRoomsInput>
    create: XOR<UserCreateWithoutRandomChatRoomsInput, UserUncheckedCreateWithoutRandomChatRoomsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRandomChatRoomsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRandomChatRoomsInput, UserUncheckedUpdateWithoutRandomChatRoomsInput>
  }

  export type UserUpdateManyWithWhereWithoutRandomChatRoomsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRandomChatRoomsInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutRandomChatRoomInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutRandomChatRoomInput, MessageUncheckedUpdateWithoutRandomChatRoomInput>
    create: XOR<MessageCreateWithoutRandomChatRoomInput, MessageUncheckedCreateWithoutRandomChatRoomInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutRandomChatRoomInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutRandomChatRoomInput, MessageUncheckedUpdateWithoutRandomChatRoomInput>
  }

  export type MessageUpdateManyWithWhereWithoutRandomChatRoomInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutRandomChatRoomInput>
  }

  export type UserCreateWithoutContactsOwnedInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutContactsOwnedInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutContactsOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsOwnedInput, UserUncheckedCreateWithoutContactsOwnedInput>
  }

  export type UserCreateWithoutContactsSavedInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutContactsSavedInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutContactsSavedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsSavedInput, UserUncheckedCreateWithoutContactsSavedInput>
  }

  export type UserUpsertWithoutContactsOwnedInput = {
    update: XOR<UserUpdateWithoutContactsOwnedInput, UserUncheckedUpdateWithoutContactsOwnedInput>
    create: XOR<UserCreateWithoutContactsOwnedInput, UserUncheckedCreateWithoutContactsOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsOwnedInput, UserUncheckedUpdateWithoutContactsOwnedInput>
  }

  export type UserUpdateWithoutContactsOwnedInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsOwnedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUpsertWithoutContactsSavedInput = {
    update: XOR<UserUpdateWithoutContactsSavedInput, UserUncheckedUpdateWithoutContactsSavedInput>
    create: XOR<UserCreateWithoutContactsSavedInput, UserUncheckedCreateWithoutContactsSavedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsSavedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsSavedInput, UserUncheckedUpdateWithoutContactsSavedInput>
  }

  export type UserUpdateWithoutContactsSavedInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsSavedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type MessageCreateWithoutReportsInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reactions?: MessageReactionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReportsInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reactions?: MessageReactionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReportsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReportsInput, MessageUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutReportsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type MessageUpsertWithoutReportsInput = {
    update: XOR<MessageUpdateWithoutReportsInput, MessageUncheckedUpdateWithoutReportsInput>
    create: XOR<MessageCreateWithoutReportsInput, MessageUncheckedCreateWithoutReportsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutReportsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutReportsInput, MessageUncheckedUpdateWithoutReportsInput>
  }

  export type MessageUpdateWithoutReportsInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserCreateWithoutDevicesInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutDevicesInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutDevicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
  }

  export type UserCreateWithoutDeviceRevocationsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutDeviceRevocationsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutDeviceRevocationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDeviceRevocationsInput, UserUncheckedCreateWithoutDeviceRevocationsInput>
  }

  export type UserUpsertWithoutDevicesInput = {
    update: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
    create: XOR<UserCreateWithoutDevicesInput, UserUncheckedCreateWithoutDevicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDevicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDevicesInput, UserUncheckedUpdateWithoutDevicesInput>
  }

  export type UserUpdateWithoutDevicesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUpsertWithoutDeviceRevocationsInput = {
    update: XOR<UserUpdateWithoutDeviceRevocationsInput, UserUncheckedUpdateWithoutDeviceRevocationsInput>
    create: XOR<UserCreateWithoutDeviceRevocationsInput, UserUncheckedCreateWithoutDeviceRevocationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDeviceRevocationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDeviceRevocationsInput, UserUncheckedUpdateWithoutDeviceRevocationsInput>
  }

  export type UserUpdateWithoutDeviceRevocationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDeviceRevocationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type ChatRoomCreateWithoutInvitesInput = {
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantCreateNestedManyWithoutChatRoomInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutInvitesInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantUncheckedCreateNestedManyWithoutChatRoomInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
    botInstalls?: BotInstallUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutInvitesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutInvitesInput, ChatRoomUncheckedCreateWithoutInvitesInput>
  }

  export type UserCreateWithoutCreatedInvitesInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutCreatedInvitesInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutCreatedInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedInvitesInput, UserUncheckedCreateWithoutCreatedInvitesInput>
  }

  export type ChatRoomUpsertWithoutInvitesInput = {
    update: XOR<ChatRoomUpdateWithoutInvitesInput, ChatRoomUncheckedUpdateWithoutInvitesInput>
    create: XOR<ChatRoomCreateWithoutInvitesInput, ChatRoomUncheckedCreateWithoutInvitesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutInvitesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutInvitesInput, ChatRoomUncheckedUpdateWithoutInvitesInput>
  }

  export type ChatRoomUpdateWithoutInvitesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUncheckedUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
    botInstalls?: BotInstallUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type UserUpsertWithoutCreatedInvitesInput = {
    update: XOR<UserUpdateWithoutCreatedInvitesInput, UserUncheckedUpdateWithoutCreatedInvitesInput>
    create: XOR<UserCreateWithoutCreatedInvitesInput, UserUncheckedCreateWithoutCreatedInvitesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedInvitesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedInvitesInput, UserUncheckedUpdateWithoutCreatedInvitesInput>
  }

  export type UserUpdateWithoutCreatedInvitesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedInvitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type MessageCreateWithoutReactionsInput = {
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    createdAt?: Date | string
    isAutoReply?: boolean
    sender: UserCreateNestedOneWithoutMessagesInput
    chatRoom: ChatRoomCreateNestedOneWithoutMessagesInput
    keys?: MessageKeyCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentCreateNestedManyWithoutMessageInput
    randomChatRoom?: RandomChatRoomCreateNestedOneWithoutMessagesInput
    readBy?: UserCreateNestedManyWithoutReadMessagesInput
    reports?: ReportCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutReactionsInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
    keys?: MessageKeyUncheckedCreateNestedManyWithoutMessageInput
    attachments?: MessageAttachmentUncheckedCreateNestedManyWithoutMessageInput
    readBy?: UserUncheckedCreateNestedManyWithoutReadMessagesInput
    reports?: ReportUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutReactionsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
  }

  export type UserCreateWithoutMessageReactionsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutMessageReactionsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutMessageReactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageReactionsInput, UserUncheckedCreateWithoutMessageReactionsInput>
  }

  export type MessageUpsertWithoutReactionsInput = {
    update: XOR<MessageUpdateWithoutReactionsInput, MessageUncheckedUpdateWithoutReactionsInput>
    create: XOR<MessageCreateWithoutReactionsInput, MessageUncheckedCreateWithoutReactionsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutReactionsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutReactionsInput, MessageUncheckedUpdateWithoutReactionsInput>
  }

  export type MessageUpdateWithoutReactionsInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserUpsertWithoutMessageReactionsInput = {
    update: XOR<UserUpdateWithoutMessageReactionsInput, UserUncheckedUpdateWithoutMessageReactionsInput>
    create: XOR<UserCreateWithoutMessageReactionsInput, UserUncheckedCreateWithoutMessageReactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageReactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageReactionsInput, UserUncheckedUpdateWithoutMessageReactionsInput>
  }

  export type UserUpdateWithoutMessageReactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageReactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserCreateWithoutStatusesAuthoredInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutStatusesAuthoredInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutStatusesAuthoredInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusesAuthoredInput, UserUncheckedCreateWithoutStatusesAuthoredInput>
  }

  export type StatusAssetCreateWithoutStatusInput = {
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type StatusAssetUncheckedCreateWithoutStatusInput = {
    id?: number
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type StatusAssetCreateOrConnectWithoutStatusInput = {
    where: StatusAssetWhereUniqueInput
    create: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput>
  }

  export type StatusAssetCreateManyStatusInputEnvelope = {
    data: StatusAssetCreateManyStatusInput | StatusAssetCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type StatusKeyCreateWithoutStatusInput = {
    encryptedKey: string
    user: UserCreateNestedOneWithoutStatusKeysInput
  }

  export type StatusKeyUncheckedCreateWithoutStatusInput = {
    userId: number
    encryptedKey: string
  }

  export type StatusKeyCreateOrConnectWithoutStatusInput = {
    where: StatusKeyWhereUniqueInput
    create: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput>
  }

  export type StatusKeyCreateManyStatusInputEnvelope = {
    data: StatusKeyCreateManyStatusInput | StatusKeyCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type StatusViewCreateWithoutStatusInput = {
    viewedAt?: Date | string
    viewer: UserCreateNestedOneWithoutStatusViewsInput
  }

  export type StatusViewUncheckedCreateWithoutStatusInput = {
    id?: number
    viewerId: number
    viewedAt?: Date | string
  }

  export type StatusViewCreateOrConnectWithoutStatusInput = {
    where: StatusViewWhereUniqueInput
    create: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput>
  }

  export type StatusViewCreateManyStatusInputEnvelope = {
    data: StatusViewCreateManyStatusInput | StatusViewCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type StatusReactionCreateWithoutStatusInput = {
    emoji: string
    user: UserCreateNestedOneWithoutStatusReactionsInput
  }

  export type StatusReactionUncheckedCreateWithoutStatusInput = {
    userId: number
    emoji: string
  }

  export type StatusReactionCreateOrConnectWithoutStatusInput = {
    where: StatusReactionWhereUniqueInput
    create: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput>
  }

  export type StatusReactionCreateManyStatusInputEnvelope = {
    data: StatusReactionCreateManyStatusInput | StatusReactionCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStatusesAuthoredInput = {
    update: XOR<UserUpdateWithoutStatusesAuthoredInput, UserUncheckedUpdateWithoutStatusesAuthoredInput>
    create: XOR<UserCreateWithoutStatusesAuthoredInput, UserUncheckedCreateWithoutStatusesAuthoredInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusesAuthoredInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusesAuthoredInput, UserUncheckedUpdateWithoutStatusesAuthoredInput>
  }

  export type UserUpdateWithoutStatusesAuthoredInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusesAuthoredInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type StatusAssetUpsertWithWhereUniqueWithoutStatusInput = {
    where: StatusAssetWhereUniqueInput
    update: XOR<StatusAssetUpdateWithoutStatusInput, StatusAssetUncheckedUpdateWithoutStatusInput>
    create: XOR<StatusAssetCreateWithoutStatusInput, StatusAssetUncheckedCreateWithoutStatusInput>
  }

  export type StatusAssetUpdateWithWhereUniqueWithoutStatusInput = {
    where: StatusAssetWhereUniqueInput
    data: XOR<StatusAssetUpdateWithoutStatusInput, StatusAssetUncheckedUpdateWithoutStatusInput>
  }

  export type StatusAssetUpdateManyWithWhereWithoutStatusInput = {
    where: StatusAssetScalarWhereInput
    data: XOR<StatusAssetUpdateManyMutationInput, StatusAssetUncheckedUpdateManyWithoutStatusInput>
  }

  export type StatusAssetScalarWhereInput = {
    AND?: StatusAssetScalarWhereInput | StatusAssetScalarWhereInput[]
    OR?: StatusAssetScalarWhereInput[]
    NOT?: StatusAssetScalarWhereInput | StatusAssetScalarWhereInput[]
    id?: IntFilter<"StatusAsset"> | number
    statusId?: IntFilter<"StatusAsset"> | number
    kind?: EnumStatusAssetKindFilter<"StatusAsset"> | $Enums.StatusAssetKind
    url?: StringFilter<"StatusAsset"> | string
    mimeType?: StringFilter<"StatusAsset"> | string
    width?: IntNullableFilter<"StatusAsset"> | number | null
    height?: IntNullableFilter<"StatusAsset"> | number | null
    durationSec?: IntNullableFilter<"StatusAsset"> | number | null
    caption?: StringNullableFilter<"StatusAsset"> | string | null
    createdAt?: DateTimeFilter<"StatusAsset"> | Date | string
  }

  export type StatusKeyUpsertWithWhereUniqueWithoutStatusInput = {
    where: StatusKeyWhereUniqueInput
    update: XOR<StatusKeyUpdateWithoutStatusInput, StatusKeyUncheckedUpdateWithoutStatusInput>
    create: XOR<StatusKeyCreateWithoutStatusInput, StatusKeyUncheckedCreateWithoutStatusInput>
  }

  export type StatusKeyUpdateWithWhereUniqueWithoutStatusInput = {
    where: StatusKeyWhereUniqueInput
    data: XOR<StatusKeyUpdateWithoutStatusInput, StatusKeyUncheckedUpdateWithoutStatusInput>
  }

  export type StatusKeyUpdateManyWithWhereWithoutStatusInput = {
    where: StatusKeyScalarWhereInput
    data: XOR<StatusKeyUpdateManyMutationInput, StatusKeyUncheckedUpdateManyWithoutStatusInput>
  }

  export type StatusViewUpsertWithWhereUniqueWithoutStatusInput = {
    where: StatusViewWhereUniqueInput
    update: XOR<StatusViewUpdateWithoutStatusInput, StatusViewUncheckedUpdateWithoutStatusInput>
    create: XOR<StatusViewCreateWithoutStatusInput, StatusViewUncheckedCreateWithoutStatusInput>
  }

  export type StatusViewUpdateWithWhereUniqueWithoutStatusInput = {
    where: StatusViewWhereUniqueInput
    data: XOR<StatusViewUpdateWithoutStatusInput, StatusViewUncheckedUpdateWithoutStatusInput>
  }

  export type StatusViewUpdateManyWithWhereWithoutStatusInput = {
    where: StatusViewScalarWhereInput
    data: XOR<StatusViewUpdateManyMutationInput, StatusViewUncheckedUpdateManyWithoutStatusInput>
  }

  export type StatusReactionUpsertWithWhereUniqueWithoutStatusInput = {
    where: StatusReactionWhereUniqueInput
    update: XOR<StatusReactionUpdateWithoutStatusInput, StatusReactionUncheckedUpdateWithoutStatusInput>
    create: XOR<StatusReactionCreateWithoutStatusInput, StatusReactionUncheckedCreateWithoutStatusInput>
  }

  export type StatusReactionUpdateWithWhereUniqueWithoutStatusInput = {
    where: StatusReactionWhereUniqueInput
    data: XOR<StatusReactionUpdateWithoutStatusInput, StatusReactionUncheckedUpdateWithoutStatusInput>
  }

  export type StatusReactionUpdateManyWithWhereWithoutStatusInput = {
    where: StatusReactionScalarWhereInput
    data: XOR<StatusReactionUpdateManyMutationInput, StatusReactionUncheckedUpdateManyWithoutStatusInput>
  }

  export type StatusCreateWithoutAssetsInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutStatusesAuthoredInput
    keys?: StatusKeyCreateNestedManyWithoutStatusInput
    views?: StatusViewCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateWithoutAssetsInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    keys?: StatusKeyUncheckedCreateNestedManyWithoutStatusInput
    views?: StatusViewUncheckedCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCreateOrConnectWithoutAssetsInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutAssetsInput, StatusUncheckedCreateWithoutAssetsInput>
  }

  export type StatusUpsertWithoutAssetsInput = {
    update: XOR<StatusUpdateWithoutAssetsInput, StatusUncheckedUpdateWithoutAssetsInput>
    create: XOR<StatusCreateWithoutAssetsInput, StatusUncheckedCreateWithoutAssetsInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutAssetsInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutAssetsInput, StatusUncheckedUpdateWithoutAssetsInput>
  }

  export type StatusUpdateWithoutAssetsInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput
    keys?: StatusKeyUpdateManyWithoutStatusNestedInput
    views?: StatusViewUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keys?: StatusKeyUncheckedUpdateManyWithoutStatusNestedInput
    views?: StatusViewUncheckedUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusCreateWithoutKeysInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutStatusesAuthoredInput
    assets?: StatusAssetCreateNestedManyWithoutStatusInput
    views?: StatusViewCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateWithoutKeysInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetUncheckedCreateNestedManyWithoutStatusInput
    views?: StatusViewUncheckedCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCreateOrConnectWithoutKeysInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutKeysInput, StatusUncheckedCreateWithoutKeysInput>
  }

  export type UserCreateWithoutStatusKeysInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutStatusKeysInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutStatusKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusKeysInput, UserUncheckedCreateWithoutStatusKeysInput>
  }

  export type StatusUpsertWithoutKeysInput = {
    update: XOR<StatusUpdateWithoutKeysInput, StatusUncheckedUpdateWithoutKeysInput>
    create: XOR<StatusCreateWithoutKeysInput, StatusUncheckedCreateWithoutKeysInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutKeysInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutKeysInput, StatusUncheckedUpdateWithoutKeysInput>
  }

  export type StatusUpdateWithoutKeysInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput
    assets?: StatusAssetUpdateManyWithoutStatusNestedInput
    views?: StatusViewUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateWithoutKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUncheckedUpdateManyWithoutStatusNestedInput
    views?: StatusViewUncheckedUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type UserUpsertWithoutStatusKeysInput = {
    update: XOR<UserUpdateWithoutStatusKeysInput, UserUncheckedUpdateWithoutStatusKeysInput>
    create: XOR<UserCreateWithoutStatusKeysInput, UserUncheckedCreateWithoutStatusKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusKeysInput, UserUncheckedUpdateWithoutStatusKeysInput>
  }

  export type UserUpdateWithoutStatusKeysInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type StatusCreateWithoutViewsInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutStatusesAuthoredInput
    assets?: StatusAssetCreateNestedManyWithoutStatusInput
    keys?: StatusKeyCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateWithoutViewsInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetUncheckedCreateNestedManyWithoutStatusInput
    keys?: StatusKeyUncheckedCreateNestedManyWithoutStatusInput
    reactions?: StatusReactionUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCreateOrConnectWithoutViewsInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutViewsInput, StatusUncheckedCreateWithoutViewsInput>
  }

  export type UserCreateWithoutStatusViewsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutStatusViewsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutStatusViewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusViewsInput, UserUncheckedCreateWithoutStatusViewsInput>
  }

  export type StatusUpsertWithoutViewsInput = {
    update: XOR<StatusUpdateWithoutViewsInput, StatusUncheckedUpdateWithoutViewsInput>
    create: XOR<StatusCreateWithoutViewsInput, StatusUncheckedCreateWithoutViewsInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutViewsInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutViewsInput, StatusUncheckedUpdateWithoutViewsInput>
  }

  export type StatusUpdateWithoutViewsInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput
    assets?: StatusAssetUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateWithoutViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUncheckedUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUncheckedUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type UserUpsertWithoutStatusViewsInput = {
    update: XOR<UserUpdateWithoutStatusViewsInput, UserUncheckedUpdateWithoutStatusViewsInput>
    create: XOR<UserCreateWithoutStatusViewsInput, UserUncheckedCreateWithoutStatusViewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusViewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusViewsInput, UserUncheckedUpdateWithoutStatusViewsInput>
  }

  export type UserUpdateWithoutStatusViewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type StatusCreateWithoutReactionsInput = {
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutStatusesAuthoredInput
    assets?: StatusAssetCreateNestedManyWithoutStatusInput
    keys?: StatusKeyCreateNestedManyWithoutStatusInput
    views?: StatusViewCreateNestedManyWithoutStatusInput
  }

  export type StatusUncheckedCreateWithoutReactionsInput = {
    id?: number
    authorId: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
    assets?: StatusAssetUncheckedCreateNestedManyWithoutStatusInput
    keys?: StatusKeyUncheckedCreateNestedManyWithoutStatusInput
    views?: StatusViewUncheckedCreateNestedManyWithoutStatusInput
  }

  export type StatusCreateOrConnectWithoutReactionsInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutReactionsInput, StatusUncheckedCreateWithoutReactionsInput>
  }

  export type UserCreateWithoutStatusReactionsInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutStatusReactionsInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutStatusReactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusReactionsInput, UserUncheckedCreateWithoutStatusReactionsInput>
  }

  export type StatusUpsertWithoutReactionsInput = {
    update: XOR<StatusUpdateWithoutReactionsInput, StatusUncheckedUpdateWithoutReactionsInput>
    create: XOR<StatusCreateWithoutReactionsInput, StatusUncheckedCreateWithoutReactionsInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutReactionsInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutReactionsInput, StatusUncheckedUpdateWithoutReactionsInput>
  }

  export type StatusUpdateWithoutReactionsInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutStatusesAuthoredNestedInput
    assets?: StatusAssetUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUpdateManyWithoutStatusNestedInput
    views?: StatusViewUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateWithoutReactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUncheckedUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUncheckedUpdateManyWithoutStatusNestedInput
    views?: StatusViewUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type UserUpsertWithoutStatusReactionsInput = {
    update: XOR<UserUpdateWithoutStatusReactionsInput, UserUncheckedUpdateWithoutStatusReactionsInput>
    create: XOR<UserCreateWithoutStatusReactionsInput, UserUncheckedCreateWithoutStatusReactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusReactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusReactionsInput, UserUncheckedUpdateWithoutStatusReactionsInput>
  }

  export type UserUpdateWithoutStatusReactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusReactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserCreateWithoutBotsOwnedInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsAsService?: BotCreateNestedManyWithoutServiceUserInput
  }

  export type UserUncheckedCreateWithoutBotsOwnedInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsAsService?: BotUncheckedCreateNestedManyWithoutServiceUserInput
  }

  export type UserCreateOrConnectWithoutBotsOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBotsOwnedInput, UserUncheckedCreateWithoutBotsOwnedInput>
  }

  export type UserCreateWithoutBotsAsServiceInput = {
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageCreateNestedManyWithoutSenderInput
    participants?: ParticipantCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyCreateNestedManyWithoutUserInput
    devices?: DeviceCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyCreateNestedManyWithoutUserInput
    statusViews?: StatusViewCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionCreateNestedManyWithoutUserInput
    botsOwned?: BotCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutBotsAsServiceInput = {
    id?: number
    username: string
    email?: string | null
    password: string
    phoneNumber?: string | null
    preferredLanguage?: string
    allowExplicitContent?: boolean
    showOriginalWithTranslation?: boolean
    role?: string
    enableAIResponder?: boolean
    enableSmartReplies?: boolean
    autoResponderMode?: $Enums.AutoResponderMode
    autoResponderCooldownSec?: number
    autoResponderActiveUntil?: Date | string | null
    autoResponderSignature?: string | null
    publicKey?: string | null
    privateKey?: string | null
    autoDeleteSeconds?: number | null
    showReadReceipts?: boolean
    avatarUrl?: string | null
    emojiTag?: string | null
    plan?: $Enums.Plan
    messageTone?: string | null
    ringtone?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    participants?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutReporterInput
    randomChatRooms?: RandomChatRoomUncheckedCreateNestedManyWithoutParticipantsInput
    readMessages?: MessageUncheckedCreateNestedManyWithoutReadByInput
    contactsOwned?: ContactUncheckedCreateNestedManyWithoutOwnerInput
    contactsSaved?: ContactUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    messageKeys?: MessageKeyUncheckedCreateNestedManyWithoutUserInput
    devices?: DeviceUncheckedCreateNestedManyWithoutUserInput
    deviceRevocations?: DeviceUncheckedCreateNestedManyWithoutRevokedByInput
    createdInvites?: ChatRoomInviteUncheckedCreateNestedManyWithoutCreatedByInput
    messageReactions?: MessageReactionUncheckedCreateNestedManyWithoutUserInput
    statusesAuthored?: StatusUncheckedCreateNestedManyWithoutAuthorInput
    statusKeys?: StatusKeyUncheckedCreateNestedManyWithoutUserInput
    statusViews?: StatusViewUncheckedCreateNestedManyWithoutViewerInput
    statusReactions?: StatusReactionUncheckedCreateNestedManyWithoutUserInput
    botsOwned?: BotUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutBotsAsServiceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBotsAsServiceInput, UserUncheckedCreateWithoutBotsAsServiceInput>
  }

  export type BotInstallCreateWithoutBotInput = {
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chatRoom: ChatRoomCreateNestedOneWithoutBotInstallsInput
    events?: BotEventLogCreateNestedManyWithoutInstallInput
  }

  export type BotInstallUncheckedCreateWithoutBotInput = {
    id?: number
    chatRoomId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: BotEventLogUncheckedCreateNestedManyWithoutInstallInput
  }

  export type BotInstallCreateOrConnectWithoutBotInput = {
    where: BotInstallWhereUniqueInput
    create: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput>
  }

  export type BotInstallCreateManyBotInputEnvelope = {
    data: BotInstallCreateManyBotInput | BotInstallCreateManyBotInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBotsOwnedInput = {
    update: XOR<UserUpdateWithoutBotsOwnedInput, UserUncheckedUpdateWithoutBotsOwnedInput>
    create: XOR<UserCreateWithoutBotsOwnedInput, UserUncheckedCreateWithoutBotsOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBotsOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBotsOwnedInput, UserUncheckedUpdateWithoutBotsOwnedInput>
  }

  export type UserUpdateWithoutBotsOwnedInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBotsOwnedInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUpsertWithoutBotsAsServiceInput = {
    update: XOR<UserUpdateWithoutBotsAsServiceInput, UserUncheckedUpdateWithoutBotsAsServiceInput>
    create: XOR<UserCreateWithoutBotsAsServiceInput, UserUncheckedCreateWithoutBotsAsServiceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBotsAsServiceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBotsAsServiceInput, UserUncheckedUpdateWithoutBotsAsServiceInput>
  }

  export type UserUpdateWithoutBotsAsServiceInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutBotsAsServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type BotInstallUpsertWithWhereUniqueWithoutBotInput = {
    where: BotInstallWhereUniqueInput
    update: XOR<BotInstallUpdateWithoutBotInput, BotInstallUncheckedUpdateWithoutBotInput>
    create: XOR<BotInstallCreateWithoutBotInput, BotInstallUncheckedCreateWithoutBotInput>
  }

  export type BotInstallUpdateWithWhereUniqueWithoutBotInput = {
    where: BotInstallWhereUniqueInput
    data: XOR<BotInstallUpdateWithoutBotInput, BotInstallUncheckedUpdateWithoutBotInput>
  }

  export type BotInstallUpdateManyWithWhereWithoutBotInput = {
    where: BotInstallScalarWhereInput
    data: XOR<BotInstallUpdateManyMutationInput, BotInstallUncheckedUpdateManyWithoutBotInput>
  }

  export type BotCreateWithoutInstallsInput = {
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBotsOwnedInput
    serviceUser?: UserCreateNestedOneWithoutBotsAsServiceInput
  }

  export type BotUncheckedCreateWithoutInstallsInput = {
    id?: number
    ownerId: number
    name: string
    url: string
    secret: string
    serviceUserId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotCreateOrConnectWithoutInstallsInput = {
    where: BotWhereUniqueInput
    create: XOR<BotCreateWithoutInstallsInput, BotUncheckedCreateWithoutInstallsInput>
  }

  export type ChatRoomCreateWithoutBotInstallsInput = {
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantCreateNestedManyWithoutChatRoomInput
    messages?: MessageCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutBotInstallsInput = {
    id?: number
    name?: string | null
    aiAssistantMode?: $Enums.AIAssistantMode
    isGroup?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    autoTranslateMode?: $Enums.AutoTranslateMode
    allowOrbitBot?: boolean
    participants?: ParticipantUncheckedCreateNestedManyWithoutChatRoomInput
    messages?: MessageUncheckedCreateNestedManyWithoutChatRoomInput
    invites?: ChatRoomInviteUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutBotInstallsInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutBotInstallsInput, ChatRoomUncheckedCreateWithoutBotInstallsInput>
  }

  export type BotEventLogCreateWithoutInstallInput = {
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotEventLogUncheckedCreateWithoutInstallInput = {
    id?: number
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotEventLogCreateOrConnectWithoutInstallInput = {
    where: BotEventLogWhereUniqueInput
    create: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput>
  }

  export type BotEventLogCreateManyInstallInputEnvelope = {
    data: BotEventLogCreateManyInstallInput | BotEventLogCreateManyInstallInput[]
    skipDuplicates?: boolean
  }

  export type BotUpsertWithoutInstallsInput = {
    update: XOR<BotUpdateWithoutInstallsInput, BotUncheckedUpdateWithoutInstallsInput>
    create: XOR<BotCreateWithoutInstallsInput, BotUncheckedCreateWithoutInstallsInput>
    where?: BotWhereInput
  }

  export type BotUpdateToOneWithWhereWithoutInstallsInput = {
    where?: BotWhereInput
    data: XOR<BotUpdateWithoutInstallsInput, BotUncheckedUpdateWithoutInstallsInput>
  }

  export type BotUpdateWithoutInstallsInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBotsOwnedNestedInput
    serviceUser?: UserUpdateOneWithoutBotsAsServiceNestedInput
  }

  export type BotUncheckedUpdateWithoutInstallsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    serviceUserId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomUpsertWithoutBotInstallsInput = {
    update: XOR<ChatRoomUpdateWithoutBotInstallsInput, ChatRoomUncheckedUpdateWithoutBotInstallsInput>
    create: XOR<ChatRoomCreateWithoutBotInstallsInput, ChatRoomUncheckedCreateWithoutBotInstallsInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutBotInstallsInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutBotInstallsInput, ChatRoomUncheckedUpdateWithoutBotInstallsInput>
  }

  export type ChatRoomUpdateWithoutBotInstallsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUpdateManyWithoutChatRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutBotInstallsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    aiAssistantMode?: EnumAIAssistantModeFieldUpdateOperationsInput | $Enums.AIAssistantMode
    isGroup?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    autoTranslateMode?: EnumAutoTranslateModeFieldUpdateOperationsInput | $Enums.AutoTranslateMode
    allowOrbitBot?: BoolFieldUpdateOperationsInput | boolean
    participants?: ParticipantUncheckedUpdateManyWithoutChatRoomNestedInput
    messages?: MessageUncheckedUpdateManyWithoutChatRoomNestedInput
    invites?: ChatRoomInviteUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type BotEventLogUpsertWithWhereUniqueWithoutInstallInput = {
    where: BotEventLogWhereUniqueInput
    update: XOR<BotEventLogUpdateWithoutInstallInput, BotEventLogUncheckedUpdateWithoutInstallInput>
    create: XOR<BotEventLogCreateWithoutInstallInput, BotEventLogUncheckedCreateWithoutInstallInput>
  }

  export type BotEventLogUpdateWithWhereUniqueWithoutInstallInput = {
    where: BotEventLogWhereUniqueInput
    data: XOR<BotEventLogUpdateWithoutInstallInput, BotEventLogUncheckedUpdateWithoutInstallInput>
  }

  export type BotEventLogUpdateManyWithWhereWithoutInstallInput = {
    where: BotEventLogScalarWhereInput
    data: XOR<BotEventLogUpdateManyMutationInput, BotEventLogUncheckedUpdateManyWithoutInstallInput>
  }

  export type BotEventLogScalarWhereInput = {
    AND?: BotEventLogScalarWhereInput | BotEventLogScalarWhereInput[]
    OR?: BotEventLogScalarWhereInput[]
    NOT?: BotEventLogScalarWhereInput | BotEventLogScalarWhereInput[]
    id?: IntFilter<"BotEventLog"> | number
    installId?: IntFilter<"BotEventLog"> | number
    eventId?: StringFilter<"BotEventLog"> | string
    type?: StringFilter<"BotEventLog"> | string
    payload?: JsonFilter<"BotEventLog">
    status?: StringFilter<"BotEventLog"> | string
    attempts?: IntFilter<"BotEventLog"> | number
    nextAttemptAt?: DateTimeNullableFilter<"BotEventLog"> | Date | string | null
    lastError?: StringNullableFilter<"BotEventLog"> | string | null
    createdAt?: DateTimeFilter<"BotEventLog"> | Date | string
    updatedAt?: DateTimeFilter<"BotEventLog"> | Date | string
  }

  export type BotInstallCreateWithoutEventsInput = {
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bot: BotCreateNestedOneWithoutInstallsInput
    chatRoom: ChatRoomCreateNestedOneWithoutBotInstallsInput
  }

  export type BotInstallUncheckedCreateWithoutEventsInput = {
    id?: number
    botId: number
    chatRoomId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotInstallCreateOrConnectWithoutEventsInput = {
    where: BotInstallWhereUniqueInput
    create: XOR<BotInstallCreateWithoutEventsInput, BotInstallUncheckedCreateWithoutEventsInput>
  }

  export type BotInstallUpsertWithoutEventsInput = {
    update: XOR<BotInstallUpdateWithoutEventsInput, BotInstallUncheckedUpdateWithoutEventsInput>
    create: XOR<BotInstallCreateWithoutEventsInput, BotInstallUncheckedCreateWithoutEventsInput>
    where?: BotInstallWhereInput
  }

  export type BotInstallUpdateToOneWithWhereWithoutEventsInput = {
    where?: BotInstallWhereInput
    data: XOR<BotInstallUpdateWithoutEventsInput, BotInstallUncheckedUpdateWithoutEventsInput>
  }

  export type BotInstallUpdateWithoutEventsInput = {
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bot?: BotUpdateOneRequiredWithoutInstallsNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutBotInstallsNestedInput
  }

  export type BotInstallUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    botId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManySenderInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    chatRoomId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
  }

  export type ParticipantCreateManyUserInput = {
    id?: number
    chatRoomId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type ReportCreateManyReporterInput = {
    id?: number
    messageId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type ContactCreateManyOwnerInput = {
    id?: number
    userId?: number | null
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type ContactCreateManyUserInput = {
    id?: number
    ownerId: number
    externalPhone?: string | null
    externalName?: string | null
    alias?: string | null
    favorite?: boolean
    createdAt?: Date | string
  }

  export type AuditLogCreateManyActorInput = {
    id?: number
    action: string
    resource?: string | null
    resourceId?: string | null
    status: number
    ip?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MessageKeyCreateManyUserInput = {
    messageId: number
    encryptedKey: string
  }

  export type DeviceCreateManyUserInput = {
    id?: string
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
    revokedById?: number | null
  }

  export type DeviceCreateManyRevokedByInput = {
    id?: string
    userId: number
    publicKey: string
    name?: string | null
    platform?: string | null
    isPrimary?: boolean
    createdAt?: Date | string
    lastSeenAt?: Date | string | null
    revokedAt?: Date | string | null
  }

  export type ChatRoomInviteCreateManyCreatedByInput = {
    id?: number
    code: string
    chatRoomId: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type MessageReactionCreateManyUserInput = {
    messageId: number
    emoji: string
    createdAt?: Date | string
  }

  export type StatusCreateManyAuthorInput = {
    id?: number
    captionCiphertext?: string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: boolean
    audience?: $Enums.StatusAudience
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type StatusKeyCreateManyUserInput = {
    statusId: number
    encryptedKey: string
  }

  export type StatusViewCreateManyViewerInput = {
    id?: number
    statusId: number
    viewedAt?: Date | string
  }

  export type StatusReactionCreateManyUserInput = {
    statusId: number
    emoji: string
  }

  export type BotCreateManyOwnerInput = {
    id?: number
    name: string
    url: string
    secret: string
    serviceUserId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotCreateManyServiceUserInput = {
    id?: number
    ownerId: number
    name: string
    url: string
    secret: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantUpdateWithoutUserInput = {
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
    chatRoom?: ChatRoomUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReportUpdateWithoutReporterInput = {
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    message?: MessageUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUncheckedUpdateManyWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RandomChatRoomUpdateWithoutParticipantsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUpdateManyWithoutRandomChatRoomNestedInput
  }

  export type RandomChatRoomUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutRandomChatRoomNestedInput
  }

  export type RandomChatRoomUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aiEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutReadByInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReadByInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReadByInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactUpdateWithoutOwnerInput = {
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutContactsSavedNestedInput
  }

  export type ContactUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUpdateWithoutUserInput = {
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutContactsOwnedNestedInput
  }

  export type ContactUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    externalPhone?: NullableStringFieldUpdateOperationsInput | string | null
    externalName?: NullableStringFieldUpdateOperationsInput | string | null
    alias?: NullableStringFieldUpdateOperationsInput | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutActorInput = {
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: IntFieldUpdateOperationsInput | number
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageKeyUpdateWithoutUserInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutKeysNestedInput
  }

  export type MessageKeyUncheckedUpdateWithoutUserInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageKeyUncheckedUpdateManyWithoutUserInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type DeviceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: UserUpdateOneWithoutDeviceRevocationsNestedInput
  }

  export type DeviceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeviceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DeviceUpdateWithoutRevokedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type DeviceUncheckedUpdateWithoutRevokedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DeviceUncheckedUpdateManyWithoutRevokedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    publicKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeenAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatRoomInviteUpdateWithoutCreatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type ChatRoomInviteUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    chatRoomId?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomInviteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    chatRoomId?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionUpdateWithoutUserInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: MessageUpdateOneRequiredWithoutReactionsNestedInput
  }

  export type MessageReactionUncheckedUpdateWithoutUserInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionUncheckedUpdateManyWithoutUserInput = {
    messageId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusUpdateWithoutAuthorInput = {
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUpdateManyWithoutStatusNestedInput
    views?: StatusViewUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assets?: StatusAssetUncheckedUpdateManyWithoutStatusNestedInput
    keys?: StatusKeyUncheckedUpdateManyWithoutStatusNestedInput
    views?: StatusViewUncheckedUpdateManyWithoutStatusNestedInput
    reactions?: StatusReactionUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type StatusUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    captionCiphertext?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedKeys?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    translations?: NullableJsonNullValueInput | InputJsonValue
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    audience?: EnumStatusAudienceFieldUpdateOperationsInput | $Enums.StatusAudience
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusKeyUpdateWithoutUserInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateOneRequiredWithoutKeysNestedInput
  }

  export type StatusKeyUncheckedUpdateWithoutUserInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusKeyUncheckedUpdateManyWithoutUserInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusViewUpdateWithoutViewerInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StatusUpdateOneRequiredWithoutViewsNestedInput
  }

  export type StatusViewUncheckedUpdateWithoutViewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusViewUncheckedUpdateManyWithoutViewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusReactionUpdateWithoutUserInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    status?: StatusUpdateOneRequiredWithoutReactionsNestedInput
  }

  export type StatusReactionUncheckedUpdateWithoutUserInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type StatusReactionUncheckedUpdateManyWithoutUserInput = {
    statusId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type BotUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceUser?: UserUpdateOneWithoutBotsAsServiceNestedInput
    installs?: BotInstallUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    serviceUserId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    installs?: BotInstallUncheckedUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    serviceUserId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotUpdateWithoutServiceUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBotsOwnedNestedInput
    installs?: BotInstallUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateWithoutServiceUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    installs?: BotInstallUncheckedUpdateManyWithoutBotNestedInput
  }

  export type BotUncheckedUpdateManyWithoutServiceUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantCreateManyChatRoomInput = {
    id?: number
    userId: number
    role?: $Enums.RoomRole
    joinedAt?: Date | string
    allowAIBot?: boolean
  }

  export type MessageCreateManyChatRoomInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    randomChatRoomId?: number | null
    createdAt?: Date | string
    isAutoReply?: boolean
  }

  export type ChatRoomInviteCreateManyChatRoomInput = {
    id?: number
    code: string
    createdById: number
    maxUses?: number
    uses?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type BotInstallCreateManyChatRoomInput = {
    id?: number
    botId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantUpdateWithoutChatRoomInput = {
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ParticipantUncheckedUpdateWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantUncheckedUpdateManyWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoomRoleFieldUpdateOperationsInput | $Enums.RoomRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowAIBot?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutChatRoomInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    randomChatRoom?: RandomChatRoomUpdateOneWithoutMessagesNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    randomChatRoomId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatRoomInviteUpdateWithoutChatRoomInput = {
    code?: StringFieldUpdateOperationsInput | string
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedInvitesNestedInput
  }

  export type ChatRoomInviteUncheckedUpdateWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomInviteUncheckedUpdateManyWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    maxUses?: IntFieldUpdateOperationsInput | number
    uses?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotInstallUpdateWithoutChatRoomInput = {
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bot?: BotUpdateOneRequiredWithoutInstallsNestedInput
    events?: BotEventLogUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallUncheckedUpdateWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    botId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: BotEventLogUncheckedUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallUncheckedUpdateManyWithoutChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    botId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageKeyCreateManyMessageInput = {
    userId: number
    encryptedKey: string
  }

  export type MessageAttachmentCreateManyMessageInput = {
    id?: number
    kind: $Enums.AttachmentKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type ReportCreateManyMessageInput = {
    id?: number
    reporterId: number
    decryptedContent: string
    createdAt?: Date | string
    status?: string
    resolvedAt?: Date | string | null
    notes?: string | null
  }

  export type MessageReactionCreateManyMessageInput = {
    userId: number
    emoji: string
    createdAt?: Date | string
  }

  export type MessageKeyUpdateWithoutMessageInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMessageKeysNestedInput
  }

  export type MessageKeyUncheckedUpdateWithoutMessageInput = {
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageKeyUncheckedUpdateManyWithoutMessageInput = {
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type MessageAttachmentUpdateWithoutMessageInput = {
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageAttachmentUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageAttachmentUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: EnumAttachmentKindFieldUpdateOperationsInput | $Enums.AttachmentKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutReadMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUpdateManyWithoutParticipantsNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReadMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    randomChatRooms?: RandomChatRoomUncheckedUpdateManyWithoutParticipantsNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReadMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutMessageInput = {
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reporter?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    reporterId?: IntFieldUpdateOperationsInput | number
    decryptedContent?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageReactionUpdateWithoutMessageInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessageReactionsNestedInput
  }

  export type MessageReactionUncheckedUpdateWithoutMessageInput = {
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageReactionUncheckedUpdateManyWithoutMessageInput = {
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyRandomChatRoomInput = {
    id?: number
    contentCiphertext: string
    rawContent: string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: string | null
    isExplicit?: boolean
    imageUrl?: string | null
    audioUrl?: string | null
    audioDurationSec?: number | null
    expiresAt?: Date | string | null
    deletedBySender?: boolean
    senderId: number
    chatRoomId: number
    createdAt?: Date | string
    isAutoReply?: boolean
  }

  export type UserUpdateWithoutRandomChatRoomsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutReporterNestedInput
    readMessages?: MessageUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUpdateManyWithoutUserNestedInput
    devices?: DeviceUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUpdateManyWithoutUserNestedInput
    botsOwned?: BotUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRandomChatRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    participants?: ParticipantUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutReporterNestedInput
    readMessages?: MessageUncheckedUpdateManyWithoutReadByNestedInput
    contactsOwned?: ContactUncheckedUpdateManyWithoutOwnerNestedInput
    contactsSaved?: ContactUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    messageKeys?: MessageKeyUncheckedUpdateManyWithoutUserNestedInput
    devices?: DeviceUncheckedUpdateManyWithoutUserNestedInput
    deviceRevocations?: DeviceUncheckedUpdateManyWithoutRevokedByNestedInput
    createdInvites?: ChatRoomInviteUncheckedUpdateManyWithoutCreatedByNestedInput
    messageReactions?: MessageReactionUncheckedUpdateManyWithoutUserNestedInput
    statusesAuthored?: StatusUncheckedUpdateManyWithoutAuthorNestedInput
    statusKeys?: StatusKeyUncheckedUpdateManyWithoutUserNestedInput
    statusViews?: StatusViewUncheckedUpdateManyWithoutViewerNestedInput
    statusReactions?: StatusReactionUncheckedUpdateManyWithoutUserNestedInput
    botsOwned?: BotUncheckedUpdateManyWithoutOwnerNestedInput
    botsAsService?: BotUncheckedUpdateManyWithoutServiceUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRandomChatRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    allowExplicitContent?: BoolFieldUpdateOperationsInput | boolean
    showOriginalWithTranslation?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    enableAIResponder?: BoolFieldUpdateOperationsInput | boolean
    enableSmartReplies?: BoolFieldUpdateOperationsInput | boolean
    autoResponderMode?: EnumAutoResponderModeFieldUpdateOperationsInput | $Enums.AutoResponderMode
    autoResponderCooldownSec?: IntFieldUpdateOperationsInput | number
    autoResponderActiveUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoResponderSignature?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    privateKey?: NullableStringFieldUpdateOperationsInput | string | null
    autoDeleteSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    showReadReceipts?: BoolFieldUpdateOperationsInput | boolean
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emojiTag?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    messageTone?: NullableStringFieldUpdateOperationsInput | string | null
    ringtone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutRandomChatRoomInput = {
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chatRoom?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    keys?: MessageKeyUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUpdateManyWithoutMessageNestedInput
    readBy?: UserUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutRandomChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
    keys?: MessageKeyUncheckedUpdateManyWithoutMessageNestedInput
    attachments?: MessageAttachmentUncheckedUpdateManyWithoutMessageNestedInput
    readBy?: UserUncheckedUpdateManyWithoutReadMessagesNestedInput
    reports?: ReportUncheckedUpdateManyWithoutMessageNestedInput
    reactions?: MessageReactionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutRandomChatRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentCiphertext?: StringFieldUpdateOperationsInput | string
    rawContent?: StringFieldUpdateOperationsInput | string
    translations?: NullableJsonNullValueInput | InputJsonValue
    translatedFrom?: NullableStringFieldUpdateOperationsInput | string | null
    isExplicit?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    audioDurationSec?: NullableIntFieldUpdateOperationsInput | number | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBySender?: BoolFieldUpdateOperationsInput | boolean
    senderId?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isAutoReply?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StatusAssetCreateManyStatusInput = {
    id?: number
    kind: $Enums.StatusAssetKind
    url: string
    mimeType: string
    width?: number | null
    height?: number | null
    durationSec?: number | null
    caption?: string | null
    createdAt?: Date | string
  }

  export type StatusKeyCreateManyStatusInput = {
    userId: number
    encryptedKey: string
  }

  export type StatusViewCreateManyStatusInput = {
    id?: number
    viewerId: number
    viewedAt?: Date | string
  }

  export type StatusReactionCreateManyStatusInput = {
    userId: number
    emoji: string
  }

  export type StatusAssetUpdateWithoutStatusInput = {
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusAssetUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusAssetUncheckedUpdateManyWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: EnumStatusAssetKindFieldUpdateOperationsInput | $Enums.StatusAssetKind
    url?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    durationSec?: NullableIntFieldUpdateOperationsInput | number | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusKeyUpdateWithoutStatusInput = {
    encryptedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatusKeysNestedInput
  }

  export type StatusKeyUncheckedUpdateWithoutStatusInput = {
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusKeyUncheckedUpdateManyWithoutStatusInput = {
    userId?: IntFieldUpdateOperationsInput | number
    encryptedKey?: StringFieldUpdateOperationsInput | string
  }

  export type StatusViewUpdateWithoutStatusInput = {
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewer?: UserUpdateOneRequiredWithoutStatusViewsNestedInput
  }

  export type StatusViewUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusViewUncheckedUpdateManyWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    viewerId?: IntFieldUpdateOperationsInput | number
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusReactionUpdateWithoutStatusInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatusReactionsNestedInput
  }

  export type StatusReactionUncheckedUpdateWithoutStatusInput = {
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type StatusReactionUncheckedUpdateManyWithoutStatusInput = {
    userId?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
  }

  export type BotInstallCreateManyBotInput = {
    id?: number
    chatRoomId: number
    contentScope?: $Enums.ContentScope
    isEnabled?: boolean
    scopes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotInstallUpdateWithoutBotInput = {
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: ChatRoomUpdateOneRequiredWithoutBotInstallsNestedInput
    events?: BotEventLogUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallUncheckedUpdateWithoutBotInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: BotEventLogUncheckedUpdateManyWithoutInstallNestedInput
  }

  export type BotInstallUncheckedUpdateManyWithoutBotInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatRoomId?: IntFieldUpdateOperationsInput | number
    contentScope?: EnumContentScopeFieldUpdateOperationsInput | $Enums.ContentScope
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogCreateManyInstallInput = {
    id?: number
    eventId?: string
    type: string
    payload: JsonNullValueInput | InputJsonValue
    status?: string
    attempts?: number
    nextAttemptAt?: Date | string | null
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BotEventLogUpdateWithoutInstallInput = {
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogUncheckedUpdateWithoutInstallInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BotEventLogUncheckedUpdateManyWithoutInstallInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    nextAttemptAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}