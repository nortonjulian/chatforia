
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  phoneNumber: 'phoneNumber',
  preferredLanguage: 'preferredLanguage',
  allowExplicitContent: 'allowExplicitContent',
  showOriginalWithTranslation: 'showOriginalWithTranslation',
  role: 'role',
  enableAIResponder: 'enableAIResponder',
  enableSmartReplies: 'enableSmartReplies',
  theme: 'theme',
  autoResponderMode: 'autoResponderMode',
  autoResponderCooldownSec: 'autoResponderCooldownSec',
  autoResponderActiveUntil: 'autoResponderActiveUntil',
  autoResponderSignature: 'autoResponderSignature',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  publicKey: 'publicKey',
  privateKey: 'privateKey',
  plan: 'plan',
  autoDeleteSeconds: 'autoDeleteSeconds',
  showReadReceipts: 'showReadReceipts',
  avatarUrl: 'avatarUrl',
  emojiTag: 'emojiTag',
  messageTone: 'messageTone',
  ringtone: 'ringtone',
  privacyBlurEnabled: 'privacyBlurEnabled',
  privacyHoldToReveal: 'privacyHoldToReveal',
  notifyOnCopy: 'notifyOnCopy',
  ageBand: 'ageBand',
  ageAttestedAt: 'ageAttestedAt',
  wantsAgeFilter: 'wantsAgeFilter',
  randomChatAllowedBands: 'randomChatAllowedBands',
  a11yVisualAlerts: 'a11yVisualAlerts',
  a11yVibrate: 'a11yVibrate',
  a11yFlashOnCall: 'a11yFlashOnCall',
  a11yLiveCaptions: 'a11yLiveCaptions',
  a11yVoiceNoteSTT: 'a11yVoiceNoteSTT',
  a11yCaptionFont: 'a11yCaptionFont',
  a11yCaptionBg: 'a11yCaptionBg'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  publicKey: 'publicKey',
  name: 'name',
  platform: 'platform',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  lastSeenAt: 'lastSeenAt',
  revokedAt: 'revokedAt',
  revokedById: 'revokedById'
};

exports.Prisma.ProvisionLinkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdById: 'createdById',
  secret: 'secret',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  sasCode: 'sasCode',
  createdAt: 'createdAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  aiAssistantMode: 'aiAssistantMode',
  isGroup: 'isGroup',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  autoTranslateMode: 'autoTranslateMode',
  allowOrbitBot: 'allowOrbitBot'
};

exports.Prisma.ParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatRoomId: 'chatRoomId',
  role: 'role',
  joinedAt: 'joinedAt',
  allowAIBot: 'allowAIBot'
};

exports.Prisma.ChatRoomInviteScalarFieldEnum = {
  id: 'id',
  code: 'code',
  chatRoomId: 'chatRoomId',
  createdById: 'createdById',
  maxUses: 'maxUses',
  uses: 'uses',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.RandomChatRoomScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  aiEnabled: 'aiEnabled'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  contentCiphertext: 'contentCiphertext',
  rawContent: 'rawContent',
  translations: 'translations',
  translatedFrom: 'translatedFrom',
  isExplicit: 'isExplicit',
  imageUrl: 'imageUrl',
  audioUrl: 'audioUrl',
  audioDurationSec: 'audioDurationSec',
  expiresAt: 'expiresAt',
  deletedBySender: 'deletedBySender',
  senderId: 'senderId',
  chatRoomId: 'chatRoomId',
  randomChatRoomId: 'randomChatRoomId',
  createdAt: 'createdAt',
  isAutoReply: 'isAutoReply'
};

exports.Prisma.MessageSessionKeyScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  recipientUserId: 'recipientUserId',
  recipientDeviceId: 'recipientDeviceId',
  encryptedSessionKey: 'encryptedSessionKey'
};

exports.Prisma.MessageKeyScalarFieldEnum = {
  messageId: 'messageId',
  userId: 'userId',
  encryptedKey: 'encryptedKey'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  kind: 'kind',
  url: 'url',
  mimeType: 'mimeType',
  width: 'width',
  height: 'height',
  durationSec: 'durationSec',
  caption: 'caption',
  createdAt: 'createdAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  messageId: 'messageId',
  userId: 'userId',
  emoji: 'emoji',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduledMessageScalarFieldEnum = {
  id: 'id',
  chatRoomId: 'chatRoomId',
  senderId: 'senderId',
  content: 'content',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  userId: 'userId',
  externalPhone: 'externalPhone',
  externalName: 'externalName',
  alias: 'alias',
  favorite: 'favorite',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  reporterId: 'reporterId',
  decryptedContent: 'decryptedContent',
  createdAt: 'createdAt',
  status: 'status',
  resolvedAt: 'resolvedAt',
  notes: 'notes'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  status: 'status',
  ip: 'ip',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  captionCiphertext: 'captionCiphertext',
  encryptedKeys: 'encryptedKeys',
  translatedFrom: 'translatedFrom',
  translations: 'translations',
  isExplicit: 'isExplicit',
  audience: 'audience',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.StatusAssetScalarFieldEnum = {
  id: 'id',
  statusId: 'statusId',
  kind: 'kind',
  url: 'url',
  mimeType: 'mimeType',
  width: 'width',
  height: 'height',
  durationSec: 'durationSec',
  caption: 'caption',
  createdAt: 'createdAt'
};

exports.Prisma.StatusKeyScalarFieldEnum = {
  statusId: 'statusId',
  userId: 'userId',
  encryptedKey: 'encryptedKey'
};

exports.Prisma.StatusViewScalarFieldEnum = {
  id: 'id',
  statusId: 'statusId',
  viewerId: 'viewerId',
  viewedAt: 'viewedAt'
};

exports.Prisma.StatusReactionScalarFieldEnum = {
  statusId: 'statusId',
  userId: 'userId',
  emoji: 'emoji'
};

exports.Prisma.BotScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  name: 'name',
  url: 'url',
  secret: 'secret',
  serviceUserId: 'serviceUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BotInstallScalarFieldEnum = {
  id: 'id',
  botId: 'botId',
  chatRoomId: 'chatRoomId',
  contentScope: 'contentScope',
  isEnabled: 'isEnabled',
  scopes: 'scopes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BotEventLogScalarFieldEnum = {
  id: 'id',
  installId: 'installId',
  eventId: 'eventId',
  type: 'type',
  payload: 'payload',
  status: 'status',
  attempts: 'attempts',
  nextAttemptAt: 'nextAttemptAt',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CallScalarFieldEnum = {
  id: 'id',
  callerId: 'callerId',
  calleeId: 'calleeId',
  chatId: 'chatId',
  mode: 'mode',
  status: 'status',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  endedAt: 'endedAt'
};

exports.Prisma.PhoneNumberScalarFieldEnum = {
  id: 'id',
  e164: 'e164',
  provider: 'provider',
  areaCode: 'areaCode',
  vanity: 'vanity',
  status: 'status',
  assignedUserId: 'assignedUserId',
  assignedAt: 'assignedAt',
  lastOutboundAt: 'lastOutboundAt',
  keepLocked: 'keepLocked',
  holdUntil: 'holdUntil',
  releaseAfter: 'releaseAfter',
  portStatus: 'portStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NumberReservationScalarFieldEnum = {
  id: 'id',
  phoneNumberId: 'phoneNumberId',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.TranscriptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  callId: 'callId',
  messageId: 'messageId',
  language: 'language',
  segments: 'segments',
  createdAt: 'createdAt'
};

exports.Prisma.STTUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  monthKey: 'monthKey',
  seconds: 'seconds',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AutoResponderMode = exports.$Enums.AutoResponderMode = {
  OFF: 'OFF',
  DM: 'DM',
  MENTION: 'MENTION',
  ALL: 'ALL'
};

exports.Plan = exports.$Enums.Plan = {
  FREE: 'FREE',
  PREMIUM: 'PREMIUM'
};

exports.AgeBand = exports.$Enums.AgeBand = {
  TEEN_13_17: 'TEEN_13_17',
  ADULT_18_24: 'ADULT_18_24',
  ADULT_25_34: 'ADULT_25_34',
  ADULT_35_49: 'ADULT_35_49',
  ADULT_50_PLUS: 'ADULT_50_PLUS'
};

exports.AIAssistantMode = exports.$Enums.AIAssistantMode = {
  OFF: 'OFF',
  MENTION: 'MENTION',
  ALWAYS: 'ALWAYS'
};

exports.AutoTranslateMode = exports.$Enums.AutoTranslateMode = {
  OFF: 'OFF',
  TAGGED: 'TAGGED',
  ALL: 'ALL'
};

exports.RoomRole = exports.$Enums.RoomRole = {
  MEMBER: 'MEMBER',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN'
};

exports.AttachmentKind = exports.$Enums.AttachmentKind = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE',
  STICKER: 'STICKER',
  GIF: 'GIF'
};

exports.StatusAudience = exports.$Enums.StatusAudience = {
  CONTACTS: 'CONTACTS',
  MUTUALS: 'MUTUALS',
  CUSTOM: 'CUSTOM'
};

exports.StatusAssetKind = exports.$Enums.StatusAssetKind = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  GIF: 'GIF',
  STICKER: 'STICKER',
  FILE: 'FILE'
};

exports.ContentScope = exports.$Enums.ContentScope = {
  COMMANDS: 'COMMANDS',
  MENTIONS: 'MENTIONS',
  ALL: 'ALL'
};

exports.CallMode = exports.$Enums.CallMode = {
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO'
};

exports.CallStatus = exports.$Enums.CallStatus = {
  INITIATED: 'INITIATED',
  RINGING: 'RINGING',
  ANSWERED: 'ANSWERED',
  REJECTED: 'REJECTED',
  MISSED: 'MISSED',
  CANCELLED: 'CANCELLED',
  ENDED: 'ENDED'
};

exports.NumberStatus = exports.$Enums.NumberStatus = {
  AVAILABLE: 'AVAILABLE',
  RESERVED: 'RESERVED',
  ASSIGNED: 'ASSIGNED',
  HOLD: 'HOLD',
  RELEASING: 'RELEASING'
};

exports.PortStatus = exports.$Enums.PortStatus = {
  NONE: 'NONE',
  PORT_IN_PENDING: 'PORT_IN_PENDING',
  PORTED_IN: 'PORTED_IN',
  PORT_OUT_PENDING: 'PORT_OUT_PENDING',
  PORTED_OUT: 'PORTED_OUT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Device: 'Device',
  ProvisionLink: 'ProvisionLink',
  ChatRoom: 'ChatRoom',
  Participant: 'Participant',
  ChatRoomInvite: 'ChatRoomInvite',
  RandomChatRoom: 'RandomChatRoom',
  Message: 'Message',
  MessageSessionKey: 'MessageSessionKey',
  MessageKey: 'MessageKey',
  MessageAttachment: 'MessageAttachment',
  MessageReaction: 'MessageReaction',
  ScheduledMessage: 'ScheduledMessage',
  Contact: 'Contact',
  Report: 'Report',
  AuditLog: 'AuditLog',
  Status: 'Status',
  StatusAsset: 'StatusAsset',
  StatusKey: 'StatusKey',
  StatusView: 'StatusView',
  StatusReaction: 'StatusReaction',
  Bot: 'Bot',
  BotInstall: 'BotInstall',
  BotEventLog: 'BotEventLog',
  Call: 'Call',
  PhoneNumber: 'PhoneNumber',
  NumberReservation: 'NumberReservation',
  Transcript: 'Transcript',
  STTUsage: 'STTUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
