"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelnyxSignatureVerificationError = exports.TelnyxConnectionError = exports.TelnyxServiceUnavailableError = exports.TelnyxRateLimitError = exports.TelnyxInvalidParametersError = exports.TelnyxUnsupportedMediaTypeError = exports.TelnyxTimeoutError = exports.TelnyxMethodNotSupportedError = exports.TelnyxResourceNotFoundError = exports.TelnyxPermissionError = exports.TelnyxAuthenticationError = exports.TelnyxAPIError = exports.TelnyxInvalidRequestError = exports.TelnyxError = exports.generate = void 0;
const generate = (rawTelnyxError) => {
    switch (rawTelnyxError.statusCode) {
        case 400:
            return new TelnyxInvalidRequestError(rawTelnyxError);
        case 401:
            return new TelnyxAuthenticationError(rawTelnyxError);
        case 403:
            return new TelnyxPermissionError(rawTelnyxError);
        case 404:
            return new TelnyxResourceNotFoundError(rawTelnyxError);
        case 405:
            return new TelnyxMethodNotSupportedError(rawTelnyxError);
        case 408:
            return new TelnyxTimeoutError(rawTelnyxError);
        case 415:
            return new TelnyxUnsupportedMediaTypeError(rawTelnyxError);
        case 422:
            return new TelnyxInvalidParametersError(rawTelnyxError);
        case 429:
            return new TelnyxRateLimitError(rawTelnyxError);
        case 500:
            return new TelnyxAPIError(rawTelnyxError);
        case 503:
            return new TelnyxServiceUnavailableError(rawTelnyxError);
    }
    return new TelnyxError({ type: 'Generic', message: 'Unknown Error' });
};
exports.generate = generate;
/**
 * TelnyxError is the base error from which all other more specific Telnyx errors derive.
 * Specifically for errors returned from Telnyx's REST API.
 */
class TelnyxError extends Error {
    message;
    type;
    raw;
    headers;
    requestId;
    detail;
    code;
    statusCode;
    responseBody;
    constructor(raw = {}, type = null) {
        super(raw.message);
        this.type = type || this.constructor.name;
        this.raw = raw;
        this.code = raw.code;
        this.detail = raw.detail;
        this.headers = raw.headers;
        this.requestId = raw.requestId;
        this.statusCode = raw.statusCode;
        this.responseBody = raw.responseBody;
        // @ts-expect-error message needs to be required here
        this.message = raw.message;
    }
    /**
     * Helper factory which takes raw Telnyx errors and outputs wrapping instances
     */
    static generate = exports.generate;
}
exports.TelnyxError = TelnyxError;
/**
 * InvalidRequestError is raised when a request is initiated with invalid
 * parameters.
 */
class TelnyxInvalidRequestError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxInvalidRequestError');
    }
}
exports.TelnyxInvalidRequestError = TelnyxInvalidRequestError;
/**
 * APIError is a generic error that may be raised in cases where none of the
 * other named errors cover the problem. It could also be raised in the case
 * that a new error has been introduced in the API, but this version of the
 * Node.JS SDK doesn't know how to handle it.
 */
class TelnyxAPIError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxAPIError');
    }
}
exports.TelnyxAPIError = TelnyxAPIError;
/**
 * AuthenticationError is raised when invalid credentials are used to connect
 * to Telnyx's servers.
 */
class TelnyxAuthenticationError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxAuthenticationError');
    }
}
exports.TelnyxAuthenticationError = TelnyxAuthenticationError;
/**
 * PermissionError is raised in cases where access was attempted on a resource
 * that wasn't allowed.
 */
class TelnyxPermissionError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxPermissionError');
    }
}
exports.TelnyxPermissionError = TelnyxPermissionError;
class TelnyxResourceNotFoundError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxResourceNotFoundError');
    }
}
exports.TelnyxResourceNotFoundError = TelnyxResourceNotFoundError;
class TelnyxMethodNotSupportedError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxMethodNotSupportedError');
    }
}
exports.TelnyxMethodNotSupportedError = TelnyxMethodNotSupportedError;
class TelnyxTimeoutError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxTimeoutError');
    }
}
exports.TelnyxTimeoutError = TelnyxTimeoutError;
class TelnyxUnsupportedMediaTypeError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxUnsupportedMediaTypeError');
    }
}
exports.TelnyxUnsupportedMediaTypeError = TelnyxUnsupportedMediaTypeError;
class TelnyxInvalidParametersError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxInvalidParametersError');
    }
}
exports.TelnyxInvalidParametersError = TelnyxInvalidParametersError;
/**
 * RateLimitError is raised in cases where an account is putting too much load
 * on Telnyx's API servers (usually by performing too many requests). Please
 * back off on request rate.
 */
class TelnyxRateLimitError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxRateLimitError');
    }
}
exports.TelnyxRateLimitError = TelnyxRateLimitError;
class TelnyxServiceUnavailableError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxServiceUnavailableError');
    }
}
exports.TelnyxServiceUnavailableError = TelnyxServiceUnavailableError;
/**
 * TelnyxConnectionError is raised in the event that the SDK can't connect to
 * Telnyx's servers. That can be for a variety of different reasons from a
 * downed network to a bad TLS certificate.
 */
class TelnyxConnectionError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxConnectionError');
    }
}
exports.TelnyxConnectionError = TelnyxConnectionError;
/**
 * SignatureVerificationError is raised when the signature verification for a
 * webhook fails
 */
class TelnyxSignatureVerificationError extends TelnyxError {
    constructor(raw = {}) {
        super(raw, 'TelnyxSignatureVerificationError');
    }
}
exports.TelnyxSignatureVerificationError = TelnyxSignatureVerificationError;
