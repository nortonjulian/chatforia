"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("./utils.js"));
const makeRequest_js_1 = __importDefault(require("./makeRequest.js"));
const autoPagination_js_1 = require("./autoPagination.js");
/**
 * Create an API method from the declared spec.
 *
 * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT, PATCH)
 * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with
 *  the instance's path (e.g. 'messaging_profiles' or 'available_phone_numbers')
 * @param [spec.urlParams=[]] Array of required arguments in the order that they
 *  must be passed by the consumer of the API. Subsequent optional arguments are
 *  optionally passed through a hash (Object) as the penultimate argument
 *  (preceding the also-optional callback argument
 * @param [spec.paramsNames=[]] Array of required arguments in the order that they
 *  are to be used instead of being passed by the consumer of the API. Useful for nested resources
 *  in a manner that consumer doesn't need to provide path arguments
 * @param [spec.paramsValues=[]] Array of substitute require arguments in `paramsNames` values
 * @param [spec.encode] Function for mutating input parameters to a method.
 *  Usefully for applying transforms to data on a per-method basis.
 * @param [spec.host] Hostname for the request.
 * @param [spec.transformResponseData]   mutates response data to decorate with any util functions or info.
 */
function telnyxMethod(spec) {
    return function (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ...args // needs to be any since callback is extracted from these args and there's no easy way to type all args
    ) {
        if (spec.paramsValues) {
            populateUrlParamsWithResource(this, args, spec);
        }
        const callback = typeof args[args.length - 1] == 'function' && args.pop();
        const requestPromise = utils.callbackifyPromiseWithTimeout((0, makeRequest_js_1.default)(this, args, spec, {}), callback);
        if (spec.methodType === 'list') {
            const autoPaginationMethods = (0, autoPagination_js_1.makeAutoPaginationMethods)(this, args, spec, requestPromise);
            Object.assign(requestPromise, autoPaginationMethods);
        }
        return requestPromise;
    };
}
/**
 * Populate nested method URL params with resource object attributes that match the param name.
 * This allows you to do things like setting the `call_control_id` attribute from an existing call object on a new instance of `telnyx.calls`.
 */
function populateUrlParamsWithResource(self, args, spec) {
    // if url params is not in resource response data.
    if (spec.paramsValues && !spec.paramsValues[0]) {
        const paramsValues = (spec.paramsNames || []).reduce(function (result, name) {
            // @ts-expect-error TODO: cast name to index of self
            if (self[name]) {
                // @ts-expect-error TODO: cast name to index of self
                result.push(self[name]);
            }
            return result;
        }, []);
        args.unshift(paramsValues);
    }
    else {
        args.unshift(spec.paramsValues);
    }
}
exports.default = telnyxMethod;
