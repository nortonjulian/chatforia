"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const TelnyxError = __importStar(require("./Error.js"));
const Webhooks = {
    DEFAULT_TOLERANCE: 300, // 5 minutes
    decoder: new TextDecoder('utf8'),
    constructEvent: function (payload, signatureHeader, timestampHeader = '', publicKey, tolerance) {
        this.signature.verifySignature(payload, signatureHeader, timestampHeader, publicKey, tolerance || Webhooks.DEFAULT_TOLERANCE);
        const jsonPayload = JSON.parse(payload);
        return jsonPayload;
    },
    signature: {
        verifySignature: function (payload, signatureHeader, timestampHeader, publicKey, tolerance) {
            const payloadBuffer = Buffer.from(`${timestampHeader}|${payload}`, 'utf8');
            const signature = signatureHeader || Buffer.from('', 'base64');
            let verification;
            try {
                // https://bun.sh/guides/binary/buffer-to-typedarray
                verification = tweetnacl_1.default.sign.detached.verify(payloadBuffer, signature, publicKey);
            }
            catch (_e) {
                console.log(_e);
                throwSignatureVerificationError(payload, signature, timestampHeader);
            }
            if (!verification) {
                throwSignatureVerificationError(payload, signature, timestampHeader);
            }
            const timestampAge = Math.floor(Date.now() / 1000) - parseInt(timestampHeader);
            if (tolerance && tolerance > 0 && timestampAge > tolerance) {
                throw new TelnyxError.TelnyxSignatureVerificationError({
                    message: 'Timestamp outside the tolerance zone',
                    detail: {
                        signatureHeader: signatureHeader,
                        timestampHeader: timestampHeader,
                        payload: payload,
                    },
                });
            }
            return true;
        },
    },
};
function throwSignatureVerificationError(payload, signatureHeader, timestampHeader) {
    throw new TelnyxError.TelnyxSignatureVerificationError({
        message: 'Signature is invalid and does not match the payload',
        detail: {
            signatureHeader: signatureHeader,
            timestampHeader: timestampHeader,
            payload: payload,
        },
    });
}
exports.default = Webhooks;
