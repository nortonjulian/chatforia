"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Conferences = void 0;
const TelnyxResource_js_1 = __importDefault(require("../TelnyxResource.js"));
const utils = __importStar(require("../utils.js"));
const telnyxMethod = TelnyxResource_js_1.default.method;
const CONFERENCES_COMMANDS = [
    'join',
    'mute',
    'unmute',
    'hold',
    'unhold',
    'speak',
    'play',
    'stop',
    'record_start',
    'record_stop',
    'update',
    'leave',
    'record_resume',
    'record_pause',
];
function getSpec(conferenceId) {
    if (conferenceId) {
        return function (methodName) {
            return {
                method: 'POST',
                path: `/{conferenceId}/actions/${methodName}`,
                urlParams: ['conferenceId'],
                paramsValues: [conferenceId],
                paramsNames: ['conferenceId'],
                methodType: 'create',
            };
        };
    }
    return function (methodName) {
        return {
            method: 'POST',
            path: `/{conferenceId}/actions/${methodName}`,
            urlParams: ['conferenceId'],
            paramsNames: ['conferenceId'],
            methodType: 'create',
        };
    };
}
const transformResponseData = (response, telnyx) => {
    const methods = utils.createNestedMethods(telnyxMethod, CONFERENCES_COMMANDS, getSpec(response.data.id));
    methods.listParticipants = telnyxMethod({
        method: 'GET',
        path: '/{conferenceId}/participants',
        urlParams: ['conferenceId'],
    });
    return utils.addResourceToResponseData(response, telnyx, 'conferences', methods);
};
exports.Conferences = TelnyxResource_js_1.default.extend({
    path: 'conferences',
    includeBasic: ['list'],
    retrieve: telnyxMethod({
        method: 'GET',
        path: '/{id}',
        urlParams: ['id'],
        transformResponseData: transformResponseData,
    }),
    create: telnyxMethod({
        method: 'POST',
        transformResponseData: transformResponseData,
    }),
    listParticipants: telnyxMethod({
        method: 'GET',
        path: '/{conferenceId}/participants',
        urlParams: ['conferenceId'],
    }),
    instanceMethods: utils.createNestedMethods(telnyxMethod, CONFERENCES_COMMANDS, getSpec()),
});
