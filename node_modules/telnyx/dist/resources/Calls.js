"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Calls = void 0;
const TelnyxResource_js_1 = __importDefault(require("../TelnyxResource.js"));
const utils = __importStar(require("../utils.js"));
const telnyxMethod = TelnyxResource_js_1.default.method;
const CALL_COMMANDS = [
    'answer',
    'reject',
    'hangup',
    'bridge',
    'speak',
    'fork_start',
    'fork_stop',
    'gather',
    'gather_using_audio',
    'gather_using_speak',
    'gather_stop',
    'playback_start',
    'playback_stop',
    'record_start',
    'record_stop',
    'record_pause',
    'record_resume',
    'refer',
    'send_dtmf',
    'streaming_start',
    'streaming_stop',
    'suppression_start',
    'suppression_stop',
    'transfer',
    'transcription_start',
    'transcription_stop',
    'enqueue',
    'leave_queue',
];
function getSpec(callControlId) {
    if (callControlId) {
        return function (methodName) {
            return {
                method: 'POST',
                path: `/{call_control_id}/actions/${methodName}`,
                urlParams: ['call_control_id'],
                paramsValues: [callControlId],
                paramsNames: ['call_control_id'],
                methodType: 'create',
            };
        };
    }
    return function (methodName) {
        return {
            method: 'POST',
            path: `/{call_control_id}/actions/${methodName}`,
            urlParams: ['call_control_id'],
            paramsNames: ['call_control_id'],
            methodType: 'create',
        };
    };
}
exports.Calls = TelnyxResource_js_1.default.extend({
    path: 'calls',
    retrieve: telnyxMethod({
        method: 'GET',
        path: '/{call_control_id}',
        urlParams: ['call_control_id'],
        transformResponseData: function (response, telnyx) {
            return utils.addResourceToResponseData(response, telnyx, 'calls', utils.createNestedMethods(telnyxMethod, CALL_COMMANDS, getSpec(response.data.call_control_id)));
        },
    }),
    dial: telnyxMethod({
        // dial method
        method: 'POST',
        transformResponseData: function (response, telnyx) {
            return utils.addResourceToResponseData(response, telnyx, 'calls', utils.createNestedMethods(telnyxMethod, CALL_COMMANDS, getSpec(response.data.call_control_id)));
        },
    }),
    create: telnyxMethod({
        // dial method
        method: 'POST',
        transformResponseData: function (response, telnyx) {
            return utils.addResourceToResponseData(response, telnyx, 'calls', utils.createNestedMethods(telnyxMethod, CALL_COMMANDS, getSpec(response.data.call_control_id)));
        },
    }),
    clientStateUpdate: telnyxMethod({
        path: '/{call_control_id}/actions/client_state_update',
        urlParams: ['call_control_id'],
        method: 'PUT',
    }),
    updateClientState: telnyxMethod({
        path: '/{call_control_id}/actions/client_state_update',
        urlParams: ['call_control_id'],
        method: 'PUT',
    }),
    instanceMethods: utils.createNestedMethods(telnyxMethod, CALL_COMMANDS, getSpec()),
});
