"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessagingProfiles = void 0;
const TelnyxResource_js_1 = __importDefault(require("../TelnyxResource.js"));
const utils = __importStar(require("../utils.js"));
const telnyxMethod = TelnyxResource_js_1.default.method;
const MESSAGING_PROFILES_COMMANDS = ['phone_numbers', 'short_codes'];
function getSpec(messagingProfileId) {
    return function (methodName) {
        return {
            method: 'GET',
            path: `/{messagingProfileId}/${methodName}`,
            urlParams: ['messagingProfileId'],
            paramsValues: [messagingProfileId],
            paramsNames: ['messagingProfileId'],
            methodType: 'list',
        };
    };
}
const transformResponseData = (response, telnyx) => {
    const methods = utils.createNestedMethods(telnyxMethod, MESSAGING_PROFILES_COMMANDS, getSpec(response.data.id));
    methods.del = telnyxMethod({
        method: 'DELETE',
        path: '/{messagingProfileId}',
        urlParams: ['messagingProfileId'],
        paramsValues: [response.data.id],
        paramsNames: ['messagingProfileId'],
    });
    methods.listAutorespConfigs = telnyxMethod({
        method: 'GET',
        path: '/{profileId}/autoresp_configs',
        urlParams: ['profileId'],
        paramsValues: [response.data.id],
        paramsNames: ['profileId'],
        methodType: 'list',
    });
    methods.createAutorespConfig = telnyxMethod({
        method: 'POST',
        path: '/{profileId}/autoresp_configs',
        urlParams: ['profileId'],
        paramsValues: [response.data.id],
        paramsNames: ['profileId'],
        methodType: 'create',
    });
    methods.delAutorespConfig = telnyxMethod({
        method: 'DELETE',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        paramsValues: [response.data.id],
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
    });
    methods.retrieveAutorespConfig = telnyxMethod({
        method: 'GET',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        paramsValues: [response.data.id],
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
        methodType: 'retrieve',
    });
    methods.updateAutorespConfig = telnyxMethod({
        method: 'PUT',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        paramsValues: [response.data.id],
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
    });
    methods.retrieveMetrics = telnyxMethod({
        method: 'GET',
        path: '/{messagingProfileId}/metrics',
        urlParams: ['messagingProfileId'],
        paramsValues: [response.data.id],
        paramsNames: ['messagingProfileId'],
        methodType: 'retrieve',
    });
    return utils.addResourceToResponseData(response, telnyx, 'messagingProfiles', methods);
};
exports.MessagingProfiles = TelnyxResource_js_1.default.extend({
    path: 'messaging_profiles',
    includeBasic: ['list', 'del', 'update'],
    create: telnyxMethod({
        method: 'POST',
        transformResponseData: transformResponseData,
    }),
    retrieve: telnyxMethod({
        method: 'GET',
        path: '/{id}',
        urlParams: ['id'],
        transformResponseData: transformResponseData,
    }),
    listPhoneNumbers: telnyxMethod({
        method: 'GET',
        path: '/{messagingProfileId}/phone_numbers',
        urlParams: ['messagingProfileId'],
        methodType: 'list',
    }),
    listShortCodes: telnyxMethod({
        method: 'GET',
        path: '/{messagingProfileId}/short_codes',
        urlParams: ['messagingProfileId'],
        methodType: 'list',
    }),
    listAutorespConfigs: telnyxMethod({
        method: 'GET',
        path: '/{profileId}/autoresp_configs',
        urlParams: ['profileId'],
        paramsNames: ['profileId'],
        methodType: 'list',
    }),
    createAutorespConfig: telnyxMethod({
        method: 'POST',
        path: '/{profileId}/autoresp_configs',
        urlParams: ['profileId'],
        paramsNames: ['profileId'],
        methodType: 'create',
    }),
    delAutorespConfig: telnyxMethod({
        method: 'DELETE',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
    }),
    retrieveAutorespConfig: telnyxMethod({
        method: 'GET',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
        methodType: 'retrieve',
    }),
    updateAutorespConfig: telnyxMethod({
        method: 'PUT',
        path: '/{profileId}/autoresp_configs/{autorespCfgId}',
        urlParams: ['profileId', 'autorespCfgId'],
        paramsNames: ['profileId', 'autorespCfgId'],
    }),
});
