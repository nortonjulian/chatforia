"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTelnyx = createTelnyx;
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const events_1 = require("events");
const child_process_1 = require("child_process");
const utils = __importStar(require("./utils.js"));
//#region Resources
const AccessIpAddress_js_1 = require("./resources/AccessIpAddress.js");
const AccessIpRanges_js_1 = require("./resources/AccessIpRanges.js");
const Actions_js_1 = require("./resources/Actions.js");
const ActionsSimCards_js_1 = require("./resources/ActionsSimCards.js");
const ActivateDeactivateBulkCredentials_js_1 = require("./resources/ActivateDeactivateBulkCredentials.js");
const Addresses_js_1 = require("./resources/Addresses.js");
const AiAssistants_js_1 = require("./resources/AiAssistants.js");
const AiAudioTranscriptions_js_1 = require("./resources/AiAudioTranscriptions.js");
const AiChatCompletions_js_1 = require("./resources/AiChatCompletions.js");
const AiEmbeddings_js_1 = require("./resources/AiEmbeddings.js");
const AiEmbeddingsBuckets_js_1 = require("./resources/AiEmbeddingsBuckets.js");
const AiEmbeddingsSimilaritySearch_js_1 = require("./resources/AiEmbeddingsSimilaritySearch.js");
const AiModels_js_1 = require("./resources/AiModels.js");
const AiSummarize_js_1 = require("./resources/AiSummarize.js");
const AuthenticationProviders_js_1 = require("./resources/AuthenticationProviders.js");
const AvailablePhoneNumbers_js_1 = require("./resources/AvailablePhoneNumbers.js");
const Balance_js_1 = require("./resources/Balance.js");
const BillingGroups_js_1 = require("./resources/BillingGroups.js");
const Brands_js_1 = require("./resources/Brands.js");
const BulkCredentials_js_1 = require("./resources/BulkCredentials.js");
const BulkSoleProprietorCreation_js_1 = require("./resources/BulkSoleProprietorCreation.js");
const BulkTelephonyCredentials_js_1 = require("./resources/BulkTelephonyCredentials.js");
const CallControlApplications_js_1 = require("./resources/CallControlApplications.js");
const CallEvents_js_1 = require("./resources/CallEvents.js");
const CallRecordings_js_1 = require("./resources/CallRecordings.js");
const Calls_js_1 = require("./resources/Calls.js");
const Campaign_js_1 = require("./resources/Campaign.js");
const CampaignBuilder_js_1 = require("./resources/CampaignBuilder.js");
const CdrUsageReports_js_1 = require("./resources/CdrUsageReports.js");
const Channelzones_js_1 = require("./resources/Channelzones.js");
const Conferences_js_1 = require("./resources/Conferences.js");
const Connections_js_1 = require("./resources/Connections.js");
const CredentialConnections_js_1 = require("./resources/CredentialConnections.js");
const PhoneNumbersCsvDownloads_js_1 = require("./resources/PhoneNumbersCsvDownloads.js");
const CustomerServiceRecords_js_1 = require("./resources/CustomerServiceRecords.js");
const DetailRecords_js_1 = require("./resources/DetailRecords.js");
const DialogflowConnections_js_1 = require("./resources/DialogflowConnections.js");
const DocumentLinks_js_1 = require("./resources/DocumentLinks.js");
const Documents_js_1 = require("./resources/Documents.js");
const DynamicEmergency_js_1 = require("./resources/DynamicEmergency.js");
const DynamicEmergencyAddresses_js_1 = require("./resources/DynamicEmergencyAddresses.js");
const DynamicEmergencyEndpoints_js_1 = require("./resources/DynamicEmergencyEndpoints.js");
const AuditEvents_js_1 = require("./resources/AuditEvents.js");
const ExternalConnections_js_1 = require("./resources/ExternalConnections.js");
const FaxApplications_js_1 = require("./resources/FaxApplications.js");
const Faxes_js_1 = require("./resources/Faxes.js");
const FqdnConnections_js_1 = require("./resources/FqdnConnections.js");
const Fqdns_js_1 = require("./resources/Fqdns.js");
const GlobalIps_js_1 = require("./resources/GlobalIps.js");
const InventoryCoverage_js_1 = require("./resources/InventoryCoverage.js");
const IpConnections_js_1 = require("./resources/IpConnections.js");
const Ips_js_1 = require("./resources/Ips.js");
const ManagedAccounts_js_1 = require("./resources/ManagedAccounts.js");
const MdrDetailReports_js_1 = require("./resources/MdrDetailReports.js");
const MdrUsageReports_js_1 = require("./resources/MdrUsageReports.js");
const MediaStorageApi_js_1 = require("./resources/MediaStorageApi.js");
const Messages_js_1 = require("./resources/Messages.js");
const MessagingHostedNumberOrders_js_1 = require("./resources/MessagingHostedNumberOrders.js");
const MessagingHostedNumbers_js_1 = require("./resources/MessagingHostedNumbers.js");
const MessagingProfiles_js_1 = require("./resources/MessagingProfiles.js");
const MessagingShortCodes_js_1 = require("./resources/MessagingShortCodes.js");
const MessagingTollfreeVerification_js_1 = require("./resources/MessagingTollfreeVerification.js");
const MessagingUrlDomains_js_1 = require("./resources/MessagingUrlDomains.js");
const MobileNetworkOperators_js_1 = require("./resources/MobileNetworkOperators.js");
const MobileOperatorNetworks_js_1 = require("./resources/MobileOperatorNetworks.js");
const Networks_js_1 = require("./resources/Networks.js");
const NotificationEvents_js_1 = require("./resources/NotificationEvents.js");
const NumberBackgroundJobs_js_1 = require("./resources/NumberBackgroundJobs.js");
const NumberLookup_js_1 = require("./resources/NumberLookup.js");
const NumberOrders_js_1 = require("./resources/NumberOrders.js");
const NumberPortouts_js_1 = require("./resources/NumberPortouts.js");
const NumberReservations_js_1 = require("./resources/NumberReservations.js");
const NumbersFeatures_js_1 = require("./resources/NumbersFeatures.js");
const Object_js_1 = require("./resources/Object.js");
const OtaUpdates_js_1 = require("./resources/OtaUpdates.js");
const OutboundVoiceProfiles_js_1 = require("./resources/OutboundVoiceProfiles.js");
const Payment_js_1 = require("./resources/Payment.js");
const PhoneNumberAssignmentByProfile_js_1 = require("./resources/PhoneNumberAssignmentByProfile.js");
const PhoneNumberBlockOrders_js_1 = require("./resources/PhoneNumberBlockOrders.js");
const PhoneNumberBlocksBackgroundJobs_js_1 = require("./resources/PhoneNumberBlocksBackgroundJobs.js");
const PhoneNumberCampaigns_js_1 = require("./resources/PhoneNumberCampaigns.js");
const PhoneNumbers_js_1 = require("./resources/PhoneNumbers.js");
const InboundChannels_js_1 = require("./resources/InboundChannels.js");
const PhoneNumbersMessaging_js_1 = require("./resources/PhoneNumbersMessaging.js");
const PhoneNumbersRegulatoryRequirements_js_1 = require("./resources/PhoneNumbersRegulatoryRequirements.js");
const PhoneNumbersSlim_js_1 = require("./resources/PhoneNumbersSlim.js");
const PhoneNumbersVoice_js_1 = require("./resources/PhoneNumbersVoice.js");
const PortabilityChecks_js_1 = require("./resources/PortabilityChecks.js");
const PortingEvents_js_1 = require("./resources/PortingEvents.js");
const PortingLoaConfigurations_js_1 = require("./resources/PortingLoaConfigurations.js");
const PortingReports_js_1 = require("./resources/PortingReports.js");
const PortoutEvents_js_1 = require("./resources/PortoutEvents.js");
const PortingOrders_js_1 = require("./resources/PortingOrders.js");
const PortingPhoneNumbers_js_1 = require("./resources/PortingPhoneNumbers.js");
const PortoutRequests_js_1 = require("./resources/PortoutRequests.js");
const PresignedObjectUrls_js_1 = require("./resources/PresignedObjectUrls.js");
const PrivateWirelessGateways_js_1 = require("./resources/PrivateWirelessGateways.js");
const PublicInternetGateways_js_1 = require("./resources/PublicInternetGateways.js");
const PushCredentials_js_1 = require("./resources/PushCredentials.js");
const Queues_js_1 = require("./resources/Queues.js");
const RecordingsCommands_js_1 = require("./resources/RecordingsCommands.js");
const Regions_js_1 = require("./resources/Regions.js");
const RegulatoryRequirements_js_1 = require("./resources/RegulatoryRequirements.js");
const Reporting_js_1 = require("./resources/Reporting.js");
const Reports_js_1 = require("./resources/Reports.js");
const ReportsMdrs_js_1 = require("./resources/ReportsMdrs.js");
const Requirements_js_1 = require("./resources/Requirements.js");
const RequirementTypes_js_1 = require("./resources/RequirementTypes.js");
const RoomCompositions_js_1 = require("./resources/RoomCompositions.js");
const RoomParticipants_js_1 = require("./resources/RoomParticipants.js");
const RoomRecordings_js_1 = require("./resources/RoomRecordings.js");
const Rooms_js_1 = require("./resources/Rooms.js");
const RoomsClientToken_js_1 = require("./resources/RoomsClientToken.js");
const RoomsClientTokens_js_1 = require("./resources/RoomsClientTokens.js");
const RoomSessions_js_1 = require("./resources/RoomSessions.js");
const SharedCampaigns_js_1 = require("./resources/SharedCampaigns.js");
const ShortCodes_js_1 = require("./resources/ShortCodes.js");
const SimCardActions_js_1 = require("./resources/SimCardActions.js");
const SimCardGroupActions_js_1 = require("./resources/SimCardGroupActions.js");
const SimCardGroups_js_1 = require("./resources/SimCardGroups.js");
const SimCardOrders_js_1 = require("./resources/SimCardOrders.js");
const SimCards_js_1 = require("./resources/SimCards.js");
const StorageBuckets_js_1 = require("./resources/StorageBuckets.js");
const TelephonyCredentials_js_1 = require("./resources/TelephonyCredentials.js");
const Texml_js_1 = require("./resources/Texml.js");
const TexmlApplications_js_1 = require("./resources/TexmlApplications.js");
const Verifications_js_1 = require("./resources/Verifications.js");
const VerifiedNumbers_js_1 = require("./resources/VerifiedNumbers.js");
const VerifyProfiles_js_1 = require("./resources/VerifyProfiles.js");
const VirtualCrossConnects_js_1 = require("./resources/VirtualCrossConnects.js");
const WdrDetailReports_js_1 = require("./resources/WdrDetailReports.js");
const Webhooks_js_1 = require("./resources/Webhooks.js");
const WireguardInterfaces_js_1 = require("./resources/WireguardInterfaces.js");
const WirelessDetailRecordReports_js_1 = require("./resources/WirelessDetailRecordReports.js");
//
const TelnyxResource_js_1 = __importDefault(require("./TelnyxResource.js"));
const _Error = __importStar(require("./Error.js"));
const Webhooks_js_2 = __importDefault(require("./Webhooks.js"));
const AvailablePhoneNumbersBlocks_js_1 = require("./resources/AvailablePhoneNumbersBlocks.js");
function createTelnyx() {
    Telnyx.DEFAULT_HOST = process.env.TELNYX_API_BASE || 'api.telnyx.com';
    Telnyx.DEFAULT_PORT = '443';
    Telnyx.DEFAULT_BASE_PATH = '/v2/';
    // Use node's default timeout:
    Telnyx.DEFAULT_TIMEOUT = http.createServer().timeout;
    Telnyx.PACKAGE_VERSION = process.env.npm_package_version || '2.x';
    Telnyx.REQUESTS = [];
    Telnyx.LAST_REQUEST = null;
    Telnyx.USER_AGENT = {
        bindings_version: Telnyx.PACKAGE_VERSION,
        lang: 'node',
        lang_version: process.version,
        platform: process.platform,
        publisher: 'telnyx',
        uname: null,
    };
    Telnyx.USER_AGENT_SERIALIZED = process.env.USER_AGENT_SERIALIZED || null;
    Telnyx.MAX_NETWORK_RETRY_DELAY_SEC = 2;
    Telnyx.INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;
    const APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];
    // #region Resources Definition
    const resources = {
        AccessIpAddress: AccessIpAddress_js_1.AccessIpAddress,
        AccessIpRanges: AccessIpRanges_js_1.AccessIpRanges,
        Actions: Actions_js_1.Actions,
        ActionsSimCards: ActionsSimCards_js_1.ActionsSimCards,
        ActivateDeactivateBulkCredentials: ActivateDeactivateBulkCredentials_js_1.ActivateDeactivateBulkCredentials,
        Addresses: Addresses_js_1.Addresses,
        AiAssistants: AiAssistants_js_1.AiAssistants,
        AiAudioTranscriptions: AiAudioTranscriptions_js_1.AiAudioTranscriptions,
        AiChatCompletions: AiChatCompletions_js_1.AiChatCompletions,
        AiEmbeddings: AiEmbeddings_js_1.AiEmbeddings,
        AiEmbeddingsBuckets: AiEmbeddingsBuckets_js_1.AiEmbeddingsBuckets,
        AiEmbeddingsSimilaritySearch: AiEmbeddingsSimilaritySearch_js_1.AiEmbeddingsSimilaritySearch,
        AiModels: AiModels_js_1.AiModels,
        AiSummarize: AiSummarize_js_1.AiSummarize,
        AuthenticationProviders: AuthenticationProviders_js_1.AuthenticationProviders,
        AvailablePhoneNumbers: AvailablePhoneNumbers_js_1.AvailablePhoneNumbers,
        AvailablePhoneNumbersBlocks: AvailablePhoneNumbersBlocks_js_1.AvailablePhoneNumbersBlocks,
        Balance: Balance_js_1.Balance,
        BillingGroups: BillingGroups_js_1.BillingGroups,
        Brands: Brands_js_1.Brands,
        BulkCredentials: BulkCredentials_js_1.BulkCredentials,
        BulkSoleProprietorCreation: BulkSoleProprietorCreation_js_1.BulkSoleProprietorCreation,
        BulkTelephonyCredentials: BulkTelephonyCredentials_js_1.BulkTelephonyCredentials,
        CallControlApplications: CallControlApplications_js_1.CallControlApplications,
        CallEvents: CallEvents_js_1.CallEvents,
        CallRecordings: CallRecordings_js_1.CallRecordings,
        Calls: Calls_js_1.Calls,
        Campaign: Campaign_js_1.Campaign,
        CampaignBuilder: CampaignBuilder_js_1.CampaignBuilder,
        CdrUsageReports: CdrUsageReports_js_1.CdrUsageReports,
        Channelzones: Channelzones_js_1.Channelzones,
        Conferences: Conferences_js_1.Conferences,
        Connections: Connections_js_1.Connections,
        CredentialConnections: CredentialConnections_js_1.CredentialConnections,
        CustomerServiceRecords: CustomerServiceRecords_js_1.CustomerServiceRecords,
        DetailRecords: DetailRecords_js_1.DetailRecords,
        DialogflowConnections: DialogflowConnections_js_1.DialogflowConnections,
        DocumentLinks: DocumentLinks_js_1.DocumentLinks,
        Documents: Documents_js_1.Documents,
        DynamicEmergency: DynamicEmergency_js_1.DynamicEmergency,
        DynamicEmergencyAddresses: DynamicEmergencyAddresses_js_1.DynamicEmergencyAddresses,
        DynamicEmergencyEndpoints: DynamicEmergencyEndpoints_js_1.DynamicEmergencyEndpoints,
        AuditEvents: AuditEvents_js_1.AuditEvents,
        ExternalConnections: ExternalConnections_js_1.ExternalConnections,
        FaxApplications: FaxApplications_js_1.FaxApplications,
        Faxes: Faxes_js_1.Faxes,
        FqdnConnections: FqdnConnections_js_1.FqdnConnections,
        Fqdns: Fqdns_js_1.Fqdns,
        GlobalIps: GlobalIps_js_1.GlobalIps,
        InboundChannels: InboundChannels_js_1.InboundChannels,
        InventoryCoverage: InventoryCoverage_js_1.InventoryCoverage,
        IpConnections: IpConnections_js_1.IpConnections,
        Ips: Ips_js_1.Ips,
        ManagedAccounts: ManagedAccounts_js_1.ManagedAccounts,
        MdrDetailReports: MdrDetailReports_js_1.MdrDetailReports,
        MdrUsageReports: MdrUsageReports_js_1.MdrUsageReports,
        MediaStorageApi: MediaStorageApi_js_1.MediaStorageApi,
        Messages: Messages_js_1.Messages,
        MessagingHostedNumberOrders: MessagingHostedNumberOrders_js_1.MessagingHostedNumberOrders,
        MessagingHostedNumbers: MessagingHostedNumbers_js_1.MessagingHostedNumbers,
        MessagingProfiles: MessagingProfiles_js_1.MessagingProfiles,
        MessagingShortCodes: MessagingShortCodes_js_1.MessagingShortCodes,
        MessagingTollfreeVerification: MessagingTollfreeVerification_js_1.MessagingTollfreeVerification,
        MessagingUrlDomains: MessagingUrlDomains_js_1.MessagingUrlDomains,
        MobileNetworkOperators: MobileNetworkOperators_js_1.MobileNetworkOperators,
        MobileOperatorNetworks: MobileOperatorNetworks_js_1.MobileOperatorNetworks,
        Networks: Networks_js_1.Networks,
        NotificationEvents: NotificationEvents_js_1.NotificationEvents,
        NumberBackgroundJobs: NumberBackgroundJobs_js_1.NumberBackgroundJobs,
        NumberLookup: NumberLookup_js_1.NumberLookup,
        NumberOrders: NumberOrders_js_1.NumberOrders,
        NumberPortouts: NumberPortouts_js_1.NumberPortouts,
        NumberReservations: NumberReservations_js_1.NumberReservations,
        NumbersFeatures: NumbersFeatures_js_1.NumbersFeatures,
        ObjectApi: Object_js_1.Object,
        OtaUpdates: OtaUpdates_js_1.OtaUpdates,
        OutboundVoiceProfiles: OutboundVoiceProfiles_js_1.OutboundVoiceProfiles,
        Payment: Payment_js_1.Payment,
        PhoneNumberAssignmentByProfile: PhoneNumberAssignmentByProfile_js_1.PhoneNumberAssignmentByProfile,
        PhoneNumberBlockOrders: PhoneNumberBlockOrders_js_1.PhoneNumberBlockOrders,
        PhoneNumberBlocksBackgroundJobs: PhoneNumberBlocksBackgroundJobs_js_1.PhoneNumberBlocksBackgroundJobs,
        PhoneNumberCampaigns: PhoneNumberCampaigns_js_1.PhoneNumberCampaigns,
        PhoneNumbersRegulatoryRequirements: PhoneNumbersRegulatoryRequirements_js_1.PhoneNumbersRegulatoryRequirements,
        PhoneNumbersSlim: PhoneNumbersSlim_js_1.PhoneNumbersSlim,
        PhoneNumbers: PhoneNumbers_js_1.PhoneNumbers,
        PhoneNumbersMessaging: PhoneNumbersMessaging_js_1.PhoneNumbersMessaging,
        PhoneNumbersVoice: PhoneNumbersVoice_js_1.PhoneNumbersVoice,
        PhoneNumbersCsvDownloads: PhoneNumbersCsvDownloads_js_1.PhoneNumbersCsvDownloads,
        PortingEvents: PortingEvents_js_1.PortingEvents,
        PortoutEvents: PortoutEvents_js_1.PortoutEvents,
        PortabilityChecks: PortabilityChecks_js_1.PortabilityChecks,
        PortingLoaConfigurations: PortingLoaConfigurations_js_1.PortingLoaConfigurations,
        PortingOrders: PortingOrders_js_1.PortingOrders,
        PortingReports: PortingReports_js_1.PortingReports,
        PortingPhoneNumbers: PortingPhoneNumbers_js_1.PortingPhoneNumbers,
        PortoutRequests: PortoutRequests_js_1.PortoutRequests,
        PresignedObjectUrls: PresignedObjectUrls_js_1.PresignedObjectUrls,
        PrivateWirelessGateways: PrivateWirelessGateways_js_1.PrivateWirelessGateways,
        PublicInternetGateways: PublicInternetGateways_js_1.PublicInternetGateways,
        PushCredentials: PushCredentials_js_1.PushCredentials,
        Queues: Queues_js_1.Queues,
        RecordingsCommands: RecordingsCommands_js_1.RecordingsCommands,
        Regions: Regions_js_1.Regions,
        RegulatoryRequirements: RegulatoryRequirements_js_1.RegulatoryRequirements,
        Reporting: Reporting_js_1.Reporting,
        Reports: Reports_js_1.Reports,
        ReportsMdrs: ReportsMdrs_js_1.ReportsMdrs,
        Requirements: Requirements_js_1.Requirements,
        RequirementTypes: RequirementTypes_js_1.RequirementTypes,
        RoomCompositions: RoomCompositions_js_1.RoomCompositions,
        RoomParticipants: RoomParticipants_js_1.RoomParticipants,
        RoomRecordings: RoomRecordings_js_1.RoomRecordings,
        Rooms: Rooms_js_1.Rooms,
        RoomsClientToken: RoomsClientToken_js_1.RoomsClientToken,
        RoomsClientTokens: RoomsClientTokens_js_1.RoomsClientTokens,
        RoomSessions: RoomSessions_js_1.RoomSessions,
        SharedCampaigns: SharedCampaigns_js_1.SharedCampaigns,
        ShortCodes: ShortCodes_js_1.ShortCodes,
        SimCardActions: SimCardActions_js_1.SimCardActions,
        SimCardGroupActions: SimCardGroupActions_js_1.SimCardGroupActions,
        SimCardGroups: SimCardGroups_js_1.SimCardGroups,
        SimCardOrders: SimCardOrders_js_1.SimCardOrders,
        SimCards: SimCards_js_1.SimCards,
        StorageBuckets: StorageBuckets_js_1.StorageBuckets,
        TelephonyCredentials: TelephonyCredentials_js_1.TelephonyCredentials,
        Texml: Texml_js_1.Texml,
        TexmlApplications: TexmlApplications_js_1.TexmlApplications,
        Verifications: Verifications_js_1.Verifications,
        VerifiedNumbers: VerifiedNumbers_js_1.VerifiedNumbers,
        VerifyProfiles: VerifyProfiles_js_1.VerifyProfiles,
        VirtualCrossConnects: VirtualCrossConnects_js_1.VirtualCrossConnects,
        WdrDetailReports: WdrDetailReports_js_1.WdrDetailReports,
        WebhooksApi: Webhooks_js_1.Webhooks,
        WireguardInterfaces: WireguardInterfaces_js_1.WireguardInterfaces,
        WirelessDetailRecordReports: WirelessDetailRecordReports_js_1.WirelessDetailRecordReports,
    };
    //
    Telnyx.TelnyxResource = TelnyxResource_js_1.default;
    Telnyx.resources = resources;
    function Telnyx(key, version) {
        if (!(this instanceof Telnyx)) {
            // needed for this constructor to be used without `new`
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return new Telnyx(key, version);
        }
        Object.defineProperty(this, '_emitter', {
            value: new events_1.EventEmitter(),
            enumerable: false,
            configurable: false,
            writable: false,
        });
        this.on = this._emitter.on.bind(this._emitter);
        this.off = this._emitter.removeListener.bind(this._emitter);
        this._api = {
            auth: null,
            host: Telnyx.DEFAULT_HOST,
            port: Telnyx.DEFAULT_PORT,
            protocol: 'https',
            basePath: Telnyx.DEFAULT_BASE_PATH,
            timeout: Telnyx.DEFAULT_TIMEOUT,
            http_agent: new http.Agent({ keepAlive: true }),
            https_agent: new https.Agent({ keepAlive: true }),
            dev: false,
            maxNetworkRetries: 0,
        };
        this._setApiKey(key);
        this._prepResources();
        this.errors = _Error;
        this.webhooks = Webhooks_js_2.default;
        this._prevRequestMetrics = [];
    }
    Telnyx.errors = _Error;
    Telnyx.webhooks = Webhooks_js_2.default;
    Telnyx.prototype = {
        // Properties are set in the constructor above
        _appInfo: undefined,
        on: null,
        off: null,
        once: null,
        VERSION: null,
        TelnyxResource: null,
        webhooks: null,
        errors: null,
        _api: null,
        _prevRequestMetrics: null,
        _emitter: null,
        _requestSender: null,
        _platformFunctions: null,
        REQUESTS: null,
        LAST_REQUEST: null,
        setHost: function (host, port, protocol) {
            this._setApiField('host', host);
            if (port) {
                this.setPort(port);
            }
            if (protocol) {
                this.setProtocol(protocol);
            }
        },
        setProtocol: function (protocol) {
            this._setApiField('protocol', protocol.toLowerCase());
        },
        setPort: function (port) {
            this._setApiField('port', port);
        },
        /**
         * @private
         */
        _setApiKey(key) {
            if (key) {
                this._setApiField('auth', 'Bearer ' + key);
            }
        },
        setTimeout: function (timeout) {
            this._setApiField('timeout', timeout == null ? Telnyx.DEFAULT_TIMEOUT : timeout);
        },
        /**
         * @private
         * This may be removed in the future.
         */
        _setAppInfo: function (info) {
            if (info && typeof info !== 'object') {
                throw new Error('AppInfo must be an object.');
            }
            if (info && !info.name) {
                throw new Error('AppInfo.name is required');
            }
            info = info || {};
            const appInfo = APP_INFO_PROPERTIES.reduce(function (accum, prop) {
                if (typeof info[prop] == 'string') {
                    accum = accum || {};
                    accum[prop] = info[prop];
                }
                return accum;
            }, // @ts-expect-error force default of appInfo to be undefined with default param
            undefined);
            // Kill the cached UA string because it may no longer be valid
            Telnyx.USER_AGENT_SERIALIZED = null;
            this._appInfo = appInfo;
        },
        setHttpAgent: function (agent) {
            if (agent instanceof https.Agent) {
                this._setApiField('https_agent', agent);
            }
            else {
                this._setApiField('http_agent', agent);
            }
        },
        _setApiField: function (key, value) {
            this._api[key] = value;
        },
        getApiField: function (key) {
            return this._api[key];
        },
        setClientId: function (clientId) {
            this._clientId = clientId;
        },
        getClientId: function () {
            return this._clientId;
        },
        getConstant: function (c) {
            switch (c) {
                case 'DEFAULT_HOST':
                    return Telnyx.DEFAULT_HOST;
                case 'DEFAULT_PORT':
                    return Telnyx.DEFAULT_PORT;
                case 'DEFAULT_BASE_PATH':
                    return Telnyx.DEFAULT_BASE_PATH;
                case 'DEFAULT_TIMEOUT':
                    return Telnyx.DEFAULT_TIMEOUT;
                case 'MAX_NETWORK_RETRY_DELAY_SEC':
                    return Telnyx.MAX_NETWORK_RETRY_DELAY_SEC;
                case 'INITIAL_NETWORK_RETRY_DELAY_SEC':
                    return Telnyx.INITIAL_NETWORK_RETRY_DELAY_SEC;
            }
            return Telnyx[c];
        },
        getMaxNetworkRetries: function () {
            return this.getApiField('maxNetworkRetries');
        },
        setMaxNetworkRetries: function (maxNetworkRetries) {
            if ((maxNetworkRetries && typeof maxNetworkRetries !== 'number') ||
                typeof maxNetworkRetries === 'undefined' ||
                arguments.length < 1) {
                throw new Error('maxNetworkRetries must be a number.');
            }
            this._setApiField('maxNetworkRetries', maxNetworkRetries);
        },
        getMaxNetworkRetryDelay: function () {
            return this.getConstant('MAX_NETWORK_RETRY_DELAY_SEC');
        },
        getInitialNetworkRetryDelay: function () {
            return this.getConstant('INITIAL_NETWORK_RETRY_DELAY_SEC');
        },
        /**
         * @private
         * It may be deprecated and removed in the future.
         *
         * Gets a JSON version of a User-Agent and uses a cached version for a slight
         * speed advantage.
         */
        getClientUserAgent: function (cb) {
            if (Telnyx.USER_AGENT_SERIALIZED) {
                return cb(Telnyx.USER_AGENT_SERIALIZED);
            }
            this.getClientUserAgentSeeded(Telnyx.USER_AGENT, function (cua) {
                Telnyx.USER_AGENT_SERIALIZED = cua;
                cb(Telnyx.USER_AGENT_SERIALIZED);
            });
        },
        /**
         * @private
         *
         * It may be deprecated and removed in the future.
         *
         * Gets a JSON version of a User-Agent by encoding a seeded object and
         * fetching a uname from the system.
         */
        getClientUserAgentSeeded: function (seed, cb) {
            (0, child_process_1.exec)('uname -a', (_err, uname) => {
                const userAgent = {};
                for (const field in seed) {
                    userAgent[field] = encodeURIComponent(seed[field] ?? 'null');
                }
                // URI-encode in case there are unusual characters in the system's uname.
                userAgent.uname = encodeURIComponent(uname) || 'UNKNOWN';
                if (this._appInfo) {
                    userAgent.application = this._appInfo;
                }
                cb(JSON.stringify(userAgent));
            });
        },
        getAppInfoAsString: function () {
            if (!this._appInfo) {
                return '';
            }
            let formatted = this._appInfo.name;
            if (this._appInfo.version) {
                formatted += '/' + this._appInfo.version;
            }
            if (this._appInfo.url) {
                formatted += ' (' + this._appInfo.url + ')';
            }
            return formatted;
        },
        _buildDefaultAgent: function (protocol) {
            if (protocol === 'http') {
                return new http.Agent({ keepAlive: true });
            }
            return new https.Agent({ keepAlive: true });
        },
        _prepResources: function () {
            for (const name in resources) {
                this._instantiateResource(name, this);
                // @ts-expect-error - TODO: infer this from resources object
                this[utils.toSingular(name)] = this._createConstructor(name, this);
            }
        },
        _instantiateResource: function (name, self) {
            const camelCaseName = utils.pascalToCamelCase(name);
            // @ts-expect-error - TODO: infer this from resources object
            self[camelCaseName] = new resources[name](self);
            // @ts-expect-error - TODO: infer this from resources object
            return self[camelCaseName];
        },
        _createConstructor: function (resourceName, self) {
            return function (args) {
                return Object.assign(self._instantiateResource(resourceName, self), args || {});
            };
        },
    }; // needed to populate `this` properly
    return Telnyx;
}
